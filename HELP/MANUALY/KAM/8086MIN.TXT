      ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
      ³ ÿIÿnÿsÿtÿrÿuÿkÿcÿe  ÿpÿrÿoÿcÿeÿsÿoÿrÿu  ÿ8ÿ0ÿ8ÿ6ÿ/ÿ8ÿ0ÿ8ÿ8  ³
      ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                           (c) Miroslav Nˆme‡ek

                             Registr p©¡znak–
 
       15 14 13 12 11 10 09 08   07 06 05 04 03 02 01 00
      ÚÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄ¿ ÚÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄ¿
      ³--³--³--³--³OF³DF³IF³TF³ ³SF³ZF³--³AF³--³PF³--³CF³
      ÀÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÙ ÀÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÙ
                    ³  ³  ³  ³    ³  ³     ³     ³     ÀÄ p©enos
                    ³  ³  ³  ³    ³  ³     ³     ÀÄÄÄÄÄÄÄ sud  parita
                    ³  ³  ³  ³    ³  ³     ÀÄÄÄÄÄÄÄÄÄÄÄÄÄ pomocn˜ p©enos
                    ³  ³  ³  ³    ³  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ nula
                    ³  ³  ³  ³    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ z porn‚ znam‚nko
                    ³  ³  ³  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ krokov˜ re‘im
                    ³  ³  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ povol. p©eru¨en¡
                    ³  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ smˆr p©enosu dol–
                    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ p©eplnˆn¡

    ÿPÿ©ÿeÿhÿlÿeÿdÿ ÿiÿnÿsÿtÿrÿuÿkÿcÿ¡ÿ ÿmÿiÿkÿrÿoÿpÿrÿoÿcÿeÿsÿoÿrÿu

ÿAÿAÿA        - ASCII korekce po sou‡tu                    P©¡znaky:
V˜znam:       if (AL & 0Fh) > 9 or (AF = 1) then      O D I T S Z A P C
                   AL <-- AL + 6                      ? - - - ? ? * ? *
                   AH <-- AH + 1
                   AF <-- 1; CF <-- 1
              else
                   AF <-- 0; CF <-- 0
              AL <-- AL & 0Fh

ÿAÿAÿD        - ASCII korekce p©ed dˆlen¡m                 P©¡znaky:
V˜znam:       AL <-- AH * 10 + AL                     O D I T S Z A P C
              AH <-- 0                                ? - - - * * ? * ?

ÿAÿAÿM        - ASCII korekce po n soben¡                  P©¡znaky:
V˜znam:       AH <-- AL / 10                          O D I T S Z A P C
              AL <-- AL MOD 10                        ? - - - * * ? * ?

ÿAÿAÿS        - ASCII korekce po ode‡¡t n¡                 P©¡znaky:
V˜znam:       if (AL & 0Fh) > 9 or (AF = 1) then      O D I T S Z A P C
                   AL <-- AL - 6                      ? - - - ? ? * ? *
                   AH <-- AH - 1
                   AF <-- 1; CF <-- 1
              else
                   AF <-- 0; CF <-- 0
              AL <-- AL & 0Fh

ÿAÿDÿC        - aritmetick˜ sou‡et s p©¡znakem p©enosu     P©¡znaky:
V˜znam:       [op1] <-- [op1] + [op2] + CF            O D I T S Z A P C
                                                      * - - - * * * * *

ÿAÿDÿD        - aritmetick˜ sou‡et                         P©¡znaky:
V˜znam:       [op1] <-- [op1] + [op2]                 O D I T S Z A P C
                                                      * - - - * * * * *

ÿAÿNÿD        - logick‚ AND                                P©¡znaky:
V˜znam:       [op1] <-- [op1] AND [op2]               O D I T S Z A P C
                                                      0 - - - * * ? * 0

ÿCÿAÿLÿL      - vol n¡ procedury                           P©¡znaky:
V˜znam:       if FAR CALL (mezisegmentov‚ vol n¡)         neovlivnˆny
                   PUSH CS
                   CS <-- c¡lov˜_segment
              PUSH IP
              IP <-- c¡lov˜_offset

ÿCÿBÿW        - konverze bajtu na slovo                    P©¡znaky:
V˜znam:       if (AL < 80h) then                          neovlivnˆny
                   AH <-- 0
              else
                   AH <-- 0FFh

ÿCÿLÿC        - nulov n¡ p©¡znaku p©enosu CF               P©¡znaky:
V˜znam:       CF <-- 0                                O D I T S Z A P C
                                                      - - - - - - - - 0

ÿCÿLÿD        - nulov n¡ p©¡znaku smˆru DF                 P©¡znaky:
V˜znam:       DF <-- 0                                O D I T S Z A P C
                                                      - 0 - - - - - - -

ÿCÿLÿI        - nulov n¡ p©¡znaku povolen¡ p©eru¨.IF       P©¡znaky:
V˜znam:       IF <-- 0                                O D I T S Z A P C
                                                      - - 0 - - - - - -

ÿCÿMÿC        - doplnˆk p©¡znaku p©enosu CF                P©¡znaky:
V˜znam:       CF <--  - CF                            O D I T S Z A P C
                                                      - - - - - - - - *

ÿCÿMÿP        - porovn n¡ dvou operand–                    P©¡znaky:
V˜znam:       nastaven¡ p©¡znak– podle v˜sledku       O D I T S Z A P C
              operace [op1] - [op2]                   * - - - * * * * *

ÿCÿMÿPÿS      - porovn n¡ ©etˆzc– (bajt– nebo slov)        P©¡znaky:
V˜znam:       CMP [DS:SI], [ES:DI] (nastav¡ p©¡znaky) O D I T S Z A P C
              if DF = 0                               * - - - * * * * *
                   SI <-- SI + n   (n = 1 pro bajt,
                   DI <-- DI + n     2 pro slovo)
              else
                   SI <-- SI - n
                   DI <-- DI - n

ÿCÿMÿPÿSÿB    - porovn n¡ ©etˆzc– bajt–                    P©¡znaky:
V˜znam:       CMP [DS:SI], [ES:DI] (nastav¡ p©¡znaky) O D I T S Z A P C
              if DF = 0                               * - - - * * * * *
                   SI <-- SI + 1
                   DI <-- DI + 1
              else
                   SI <-- SI - 1
                   DI <-- DI - 1

ÿCÿMÿPÿSÿW    - porovn n¡ ©etˆzc– slov                     P©¡znaky:
V˜znam:       CMP [DS:SI], [ES:DI] (nastav¡ p©¡znaky) O D I T S Z A P C
              if DF = 0                               * - - - * * * * *
                   SI <-- SI + 2
                   DI <-- DI + 2
              else
                   SI <-- SI - 2
                   DI <-- DI - 2

ÿCÿWÿD        - konverze slova na dvojit‚ slovo            P©¡znaky:
V˜znam:       if (AX < 8000H)                             neovlivnˆny
                   DX <-- 0
              else
                   DX <-- FFFFH

ÿDÿAÿA        - dekadick  korekce po sou‡tu                P©¡znaky:
V˜znam:       if (AL & 0FH) > 9 or (AF = 1)           O D I T S Z A P C
                   AL <-- AL + 6                      ? - - - * * * * *
                   AF <-- 1
              else AF <-- 0
              if (AL > 9FH) or (CF = 1)
                   AL <-- AL + 60H
                   CF <-- 1
              else CF <-- 0



ÿDÿAÿS        - dekadick  korekce pro ode‡¡t n¡            P©¡znaky:
V˜znam:       if (AL & 0FH) > 9 or (AF = 1)           O D I T S Z A P C
                   AL <-- AL - 6                      ? - - - * * * * *
                   AF <-- 1
              else AF <-- 0
              if (AL > 9FH) or (CF = 1)
                   AL <-- AL - 60H
                   CF <-- 1
              else CF <-- 0

ÿDÿEÿC        - dekrementace operandu                      P©¡znaky:
V˜znam:       [op1] <-- [op1] - 1                     O D I T S Z A P C
                                                      * - - - * * * * -

ÿDÿIÿV        - dˆlen¡ bez znam‚nka                        P©¡znaky:
V˜znam:       AL <-- AX / [op1]     ; op1 je bajt     O D I T S Z A P C
              AH <-- zbytek                           ? - - - ? ? ? ? ?

         nebo AX <-- DX:AX / [op1]  ; op1 je slovo
              DX <-- zbytek

ÿEÿSÿC        - p©ed n¡ ©¡zen¡ koprocesoru

ÿHÿLÿT        - zastaven¡ procesoru

ÿIÿDÿIÿV      - celo‡¡seln‚ dˆlen¡ (se znam‚nkem)          P©¡znaky:
V˜znam:       AL <-- AX / [op1]     ; op1 je bajt     O D I T S Z A P C
              AH <-- zbytek                           ? - - - ? ? ? ? ?

         nebo AX <-- DX:AX / [op1]  ; op1 je slovo
              DX <-- zbytek

ÿIÿMÿUÿL      - celo‡¡seln‚ dˆlen¡ (se znam‚nkem)           P©¡znaky:
V˜znam:       AX <-- AL * [op1]    ; operandem bajt     O D I T S Z A P C
                                                        * - - - ? ? ? ? *
         nebo DX:AX <-- AX * [op1] ; operandem slovo

ÿIÿN          - vstup bajtu nebo slova z I/O portu         P©¡znaky:
V˜znam:       akumul tor <-- [port]                       neovlivnˆny

ÿIÿNÿC        - inkrementace operandu                      P©¡znaky:
V˜znam:       [op1] <-- [op1] + 1                     O D I T S Z A P C
                                                      * - - - * * * * -

ÿIÿNÿT        - p©eru¨en¡                                  P©¡znaky:
V˜znam:       PUSHF                                   O D I T S Z A P C
              TF <-- 0                                0 0 - - - - - - -
              IF <-- 0
              CALL FAR (‡¡slo_p©eru¨en¡ * 4)

ÿIÿNÿTÿO      - p©eru¨en¡ p©i p©ete‡en¡                   P©¡znaky:
V˜znam:       if (OF = 1)                             O D I T S Z A P C
                 PUSHF                                0 0 - - - - - - -
                 TF <-- 0
                 IF <-- 0
                 CALL FAR (10H)

ÿIÿRÿEÿT      - n vrat z p©eru¨en¡                         P©¡znaky:
V˜znam:       POP IP                                  O D I T S Z A P C
              POP CS                                  r r r r r r r r r
              POPF

ÿJÿA          - skok, je-li nad                            P©¡znaky:
V˜znam:       skok, je-li CF = 0 a ZF = 0                 neovlivnˆny

ÿJÿAÿE        - skok, je-li nad nebo shoda                 P©¡znaky:
V˜znam:       skok, je-li CF = 0                          neovlivnˆny


ÿJÿB          - skok, je-li pod                            P©¡znaky:
V˜znam:       skok, je-li CF = 1                          neovlivnˆny

ÿJÿBÿE        - skok, je-li pod nebo shodn˜                P©¡znaky:
V˜znam:       skok, je-li CF = 1 nebo ZF = 1              neovlivnˆny

ÿJÿC          - skok, je-li p©¡znak p©enosu CF             P©¡znaky:
V˜znam:       skok, je-li CF = 1                          neovlivnˆny

ÿJÿCÿXÿZ      - skok, je-li registr CX = 0
V˜znam:       skok, je-li registr CX = 0

ÿJÿE          - skok, je-li rovnost                        P©¡znaky:
V˜znam:       skok, je-li ZF = 1                          neovlivnˆny

ÿJÿG          - skok, je-li vˆt¨¡                          P©¡znaky:
V˜znam:       skok, je-li ZF = 0 a SF = OF                neovlivnˆny

ÿJÿGÿE        - skok, je-li vˆt¨¡ nebo shodn˜              P©¡znaky:
V˜znam:       skok, je-li SF = OF                         neovlivnˆny

ÿJÿL          - skok, je-li men¨¡                          P©¡znaky:
V˜znam:       skok, je-li SF <> OF                        neovlivnˆny

ÿJÿLÿE        - skok, je-li men¨¡ nebo shodn˜              P©¡znaky:
V˜znam:       skok, je-li SF <> OF nebo ZF = 1            neovlivnˆny

ÿJÿMÿP        - nepodm¡nˆn˜ skok                           P©¡znaky:
V˜znam:       skok v‘dy                                   neovlivnˆny

ÿJÿNÿA        - skok, nen¡-li nad
    Instrukce JNA je synonymum pro JBE. Viz popis instrukce JBE.

ÿJÿNÿAÿE      - skok, nen¡-li nad ani shodn˜
    Instrukce JNAE je synonymum pro JB. Viz popis instrukce JB.

ÿJÿNÿB        - skok, nen¡-li pod
    Instrukce JNB je synonymum pro JAE. Viz popis instrukce JAE.

ÿJÿNÿBÿE      - skok, nen¡-li pod ani shodn˜
    Instrukce JNBE je synonymum pro JA. Viz popis instrukce JA.

ÿJÿNÿC        - skok, nen¡-li p©¡znak p©enosu CF           P©¡znaky:
V˜znam:       skok, je-li CF = 0                          neovlivnˆny

ÿJÿNÿE        - skok, nen¡-li shodn˜                       P©¡znaky:
V˜znam:       skok, je-li ZF = 0                          neovlivnˆny

ÿJÿNÿG        - skok, nen¡-li vˆt¨¡
    Instrukce JNG je synonymum pro JLE. Viz popis instrukce JLE.

ÿJÿNÿGÿE      - skok, nen¡-li vˆt¨¡ ani shodn˜
    Instrukce JNGE je synonymum pro JL. Viz popis instrukce JL.

ÿJÿNÿL        - skok, nen¡-li men¨¡
    Instrukce JNL je synonymum pro JGE. Viz popis instrukce JGE.

ÿJÿNÿLÿE      - skok, nen¡-li men¨¡ ani shodn˜
    Instrukce JNLE je synonymum pro JG. Viz popis instrukce JG.

ÿJÿNÿO        - skok, nen¡-li p©¡znak p©ete‡en¡ OF         P©¡znaky:
V˜znam:       skok, je-li OF = 0                          neovlivnˆny

ÿJÿNÿP        - skok, nen¡-li p©¡znak parity PF (tj. je parita lich )
V˜znam:       skok, je-li PF = 0                           P©¡znaky:
                                                          neovlivnˆny

ÿJÿNÿS        - skok, nen¡-li p©¡znak znam‚nka SF          P©¡znaky:
V˜znam:       skok, je-li SF = 0                          neovlivnˆny
ÿJÿNÿZ        - skok, nen¡-li p©¡znak nuly ZF
    Instrukce JNZ je synonymum pro JNE. Viz popis instrukce JNE.

ÿJÿO          - skok, je-li p©¡znak p©ete‡en¡ OF           P©¡znaky:
V˜znam:       skok, je-li OF = 1                          neovlivnˆny

ÿJÿP          - skok, je-li p©¡znak parity PF (tj. je parita sud )
V˜znam:       skok, je-li PF = 1                           P©¡znaky:
                                                          neovlivnˆny
ÿJÿPÿE        - skok, je-li parita sud 
    Instrukce JPE je synonymum pro JP. Viz popis instrukce JP.

ÿJÿPÿO        - skok, je-li parita lich 
    Instrukce JPO je synonymum pro JNP. Viz popis instrukce JNP.

ÿJÿS          - skok, je-li p©¡znak znam‚nka SF            P©¡znaky:
V˜znam:       skok, je-li SF = 1                          neovlivnˆny

ÿJÿZ          - skok, je-li p©¡znak nuly ZF
    Instrukce JZ je synonymum pro JE. Viz popis instrukce JE.

ÿLÿAÿHÿF      - naplnˆn¡ registru AH obsahem p©¡znakov‚ho registru
V˜znam:       bity AH:         p©¡znakov‚ bity:            P©¡znaky:
              7 6 4 2 0   <--     S Z A P C               neovlivnˆny

ÿLÿDÿS        - naplnˆn¡ registru ukazatelem s pou‘it¡m DS
V˜znam:       DS <-- [op2 + 2]                             P©¡znaky:
              [op1] <-- [op2]                             neovlivnˆny

ÿLÿEÿA        - naplnˆn¡ efektivn¡ adresou                 P©¡znaky:
V˜znam:       [op1] <-- adresa [op2]                      neovlivnˆny

ÿLÿEÿS        - naplnˆn¡ registru ukazatelem s pou‘it¡m ES
V˜znam:       DS <-- [op2 + 2]                             P©¡znaky:
              [op1] <-- [op2]                             neovlivnˆny

ÿLÿOÿCÿK      - uzam‡en¡ sbˆrnice                          P©¡znaky:
V˜znam:       uzamkne sbˆrnici                            neovlivnˆny

ÿLÿOÿDÿS      - na‡ten¡ ©etˆzce (bajt nebo slovo)         P©¡znaky:
V˜znam:       Akumul tor <-- [DS:SI]                     neovlivnˆny
              if DF = 0
                   SI <-- SI + n   (n = 1 pro bajt, 2 pro slovo)
              else
                   SI <-- SI - n

ÿLÿOÿDÿSÿB    - naplnˆn¡ akumul toru bajtov˜m ©etˆzcem    P©¡znaky:
V˜znam:       AL <-- [DS:SI]                             neovlivnˆny
              if DF = 0
                   SI <-- SI + 1
              else
                   SI <-- SI - 1

ÿLÿOÿDÿSÿW    - naplnˆn¡ akumul toru ©etˆzcem slov        P©¡znaky:
V˜znam:       AX <-- [DS:SI]                             neovlivnˆny
              if DF = 0
                   SI <-- SI + 2
              else
                   SI <-- SI - 2

ÿLÿOÿOÿP      - ‡¡tac¡ smy‡ka                             P©¡znaky:
V˜znam:       CX <-- CX - 1                              neovlivnˆny
              if (CX <> 0)
                   JMP  kr tk‚_n vˆ¨t¡

ÿLÿOÿOÿPÿE    - ‡¡tac¡ smy‡ka, je-li shoda                P©¡znaky:
V˜znam:       CX <-- CX - 1                              neovlivnˆny
              if (CX <> 0) and ZF = 1
                   JMP  kr tk‚_n vˆ¨t¡

ÿLÿOÿOÿPÿNÿE  - ‡¡tac¡ smy‡ka, nen¡-li shoda              P©¡znaky:
V˜znam:       CX <-- CX - 1                              neovlivnˆny
              if (CX <> 0) and ZF = 0
                   JMP  kr tk‚_n vˆ¨t¡

ÿLÿOÿOÿPÿNÿZ  - ‡¡tac¡ smy‡ka, pokud nen¡ nula
    LOOPNZ je synonymum pro instrukci LOOPNE. Viz popis instrukce LOOPNE.

ÿLÿOÿOÿPÿZ    - ‡¡tac¡ smy‡ka, je-li nula
    LOOPZ je synonymum pro instrukci LOOPE. Viz popis instrukce LOOPE.

ÿMÿOÿV        - p©esun dat (bajt nebo slovo)              P©¡znaky:
V˜znam:       p©¡jemce <-- zdroj                         neovlivnˆny

ÿMÿOÿVÿS      - p©esun ©etˆzce (bajt nebo slovo)          P©¡znaky:
V˜znam:       [ES:DI] <-- [DS:SI]                        neovlivnˆny
              if DF = 0
                   SI <-- SI + n   (n = 1 pro bajt,
                   DI <-- DI + n     2 pro slovo)
              else
                   SI <-- SI - n
                   DI <-- DI - n

ÿMÿOÿVÿSÿB    - p©esun bajtov‚ho ©etˆzce                  P©¡znaky:
V˜znam:       [ES:DI] <-- [DS:SI]                        neovlivnˆny
              if DF = 0
                   SI <-- SI + 1
                   DI <-- DI + 1
              else
                   SI <-- SI - 1
                   DI <-- DI - 1

ÿMÿOÿVÿSÿW    - p©esun ©etˆzce slov                       P©¡znaky:
V˜znam:       [ES:DI] <-- [DS:SI]                        neovlivnˆny
              if DF = 0
                   SI <-- SI + 2
                   DI <-- DI + 2
              else
                   SI <-- SI - 2
                   DI <-- DI - 2

ÿMÿUÿL        - n soben¡ bez znam‚nka                       P©¡znaky:
V˜znam:       AX <-- AL * [op1]    ; operandem bajt     O D I T S Z A P C
                                                        * - - - ? ? ? ? *
         nebo DX:AX <-- AX * [op1] ; operandem slovo

ÿNÿEÿG        - negace                                    P©¡znaky:
V˜znam:       [op1] <--  - [op1] (dvojkov˜ doplnˆk)   O D I T S Z A P C
                                                      * - - - * * * * *

ÿNÿOÿP        - pr zdn  operace                            P©¡znaky:
V˜znam:       ‘ dn  funkce                                neovlivnˆny

ÿNÿOÿT        - logick  negace                             P©¡znaky:
V˜znam:       NOT    [op1] <--  NOT[op1]                  neovlivnˆny

ÿOÿR          - logick‚ OR                                P©¡znaky:
V˜znam:       [op1] <-- [op1] OR [op2]                O D I T S Z A P C
                                                      0 - - - * * ? * 0

ÿOÿUÿT        - v˜stup bajtu nebo slova na I/O port        P©¡znaky:
V˜znam:       [port] <-- akumul tor                       neovlivnˆny

ÿPÿOÿP        - vyjmut¡ slova ze z sobn¡ku                 P©¡znaky:
V˜znam:       [op1] <-- (SP)                              neovlivnˆny
              SP <-- SP + 2


ÿPÿOÿPÿF      - vyjmut¡ registru p©¡znak– ze z sobn¡ku     P©¡znaky:
V˜znam:       p©¡znakov˜_registr <-- (SP)             O D I T S Z A P C
              SP <-- SP + 2                           r r r r r r r r r

ÿPÿUÿSÿH      - ulo‘en¡ slova do z sobn¡ku                 P©¡znaky:
V˜znam:       SP <-- SP - 2                               neovlivnˆny
              (SP) <-- [op1]

ÿPÿUÿSÿHÿF    - ulo‘en¡ registru p©¡znak– do z sobn¡ku     P©¡znaky:
V˜znam:       SP <-- SP - 2                               neovlivnˆny
              (SP) <-- registr_p©¡znak–

ÿRÿCÿL        - rotace vlevo p©es p©¡znakov˜ bit p©enosu CF
V˜znam:       ÚÄÄÄÄÄ>ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                 P©¡znaky:
            ÚÄÁÄÄ¿   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿ ³            O D I T S Z A P C
            ³ CF ÃÄ<Ä´  operand [op1]  Ã<Ù            * - - - - - - - *
            ÀÄÄÄÄÙ   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

ÿRÿCÿR        - rotace vpravo p©es p©¡znakov˜ bit p©enosu CF
V˜znam:      ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ<ÄÄÄÄ¿                  P©¡znaky:
             ³ ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿   ÚÄÄÁÄ¿           O D I T S Z A P C
             À>´  operand [op1]  ÃÄ>Ä´ CF ³           * - - - - - - - *
               ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ   ÀÄÄÄÄÙ

ÿRÿEÿP        - opakov n¡ instrukce
V˜znam:       while CX <> 0       ; pro MOVS, LODS, STOS   P©¡znaky:
                   proveden¡ instrukce                    neovlivnˆny
                   CX <-- CX - 1
              ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
              while CX <> 0       ; pro CMPS, SCAS
                   proveden¡ instrukce
                   CX <-- CX - 1
                   if ZF = 0 p©eru¨en¡ smy‡ky

ÿRÿEÿPÿE      - opakov n¡ instrukce, pokud je shoda
    Instrukce REPE je synonymum pro instrukci REP. Viz popis instrukce REP.

ÿRÿEÿPÿNÿE    - opakov n¡ instrukce, pokud nen¡ shoda
V˜znam:       while CX <> 0       ; pro MOVS, LODS, STOS   P©¡znaky:
                   proveden¡ instrukce                    neovlivnˆny
                   CX <-- CX - 1
              ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
              while CX <> 0       ; pro CMPS, SCAS
                   proveden¡ instrukce
                   CX <-- CX - 1
                   if ZF = 1 p©eru¨en¡ smy‡ky  ; toto je jedin˜ rozd¡l
                                               ; mezi REP a REPNE

ÿRÿEÿPÿNÿZ    - opakov n¡ instrukce, pokud nen¡ nula
    Instrukce  REPNZ  je synonymum pro instrukci REPNE. Viz popis instrukce
REPNE.

ÿRÿEÿPÿZ      - opakov n¡ instrukce, pokud je nula
    Instrukce REPZ je synonymum pro instrukci REP. Viz popis instrukce REP.

ÿRÿEÿT        - n vrat z procedury
V˜znam:       POP  IP
              if FAR RETURN (vnitrosegmentov  instrukce)
                   POP CS
              SP <-- SP + voliteln  hodnota (pokud je specifikov na)

ÿRÿOÿL        - rotace vlevo                               P©¡znaky:
V˜znam:            ÚÄÄÄÄÄÄÄ>ÄÄÄÄÄÄÄÄÄÄÄÄÄ¿            O D I T S Z A P C
            ÚÄÄÄÄ¿ ³ ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿ ³            * - - - - - - - *
            ³ CF Ã<Á<´  operand [op1]  Ã<Ù
            ÀÄÄÄÄÙ   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ



ÿRÿOÿR        - rotace vpravo                              P©¡znaky:
V˜znam:     ÚÄÄÄÄÄÄÄÄÄÄÄÄ<ÄÄÄÄÄÄÄÄ¿                   O D I T S Z A P C
            ³ ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿ ³ ÚÄÄÄÄ¿            * - - - - - - - *
            À>´  operand [op1]  Ã>Á>´ CF ³
              ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ   ÀÄÄÄÄÙ

ÿSÿAÿHÿF      - ulo‘en¡ registru AH do p©¡znakov‚ho registru
V˜znam:       bity p©¡znak. reg.     bity AH              P©¡znaky:
                  S Z A P C     <-- 7 6 4 2 0         O D I T S Z A P C
                                                      - - - - * * * * *

ÿSÿAÿL        - aritmetick˜ posun vlevo                    P©¡znaky:
V˜znam:     ÚÄÄÄÄ¿   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿              O D I T S Z A P C
            ³ CF ÃÄ<Ä´  operand [op1]  ÃÄ<Ä 0         * - - - * * ? * *
            ÀÄÄÄÄÙ   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

ÿSÿAÿR        - aritmetick˜ posun vpravo                   P©¡znaky:
V˜znam:     ÚÄÄÄÄ¿   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿   ÚÄÄÄÄ¿     O D I T S Z A P C
            ³ SF ÃÄ>Ä´  operand [op1]  ÃÄ>Ä´ CF ³     * - - - * * ? * *
            ÀÄÄÄÄÙ   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ   ÀÄÄÄÄÙ

ÿSÿBÿB        - ode‡ten¡ s p©¡znakem p©enosu CF            P©¡znaky:
V˜znam:       [op1] <-- [op1] - [op2] - CF            O D I T S Z A P C
                                                      * - - - * * * * *

ÿSÿCÿAÿS      - porovn n¡ ©etˆzce (bajt nebo slovo)        P©¡znaky:
V˜znam:       CMP akumul tor,[ES:DI]                  O D I T S Z A P C
              if DF = 0                               * - - - * * * * *
                   DI <-- DI + n   (n = 1 pro bajt,
                                     2 pro slovo)
              else
                   DI <-- DI - n

ÿSÿCÿAÿSÿB    - porovn n¡ bajtov‚ho ©etˆzce                P©¡znaky:
V˜znam:       CMP akumul tor,[ES:DI]                  O D I T S Z A P C
              if DF = 0                               * - - - * * * * *
                   DI <-- DI + 1
              else
                   DI <-- DI - 1

ÿSÿCÿAÿSÿW    - porovn n¡ ©etˆzce slov                     P©¡znaky:
V˜znam:       CMP akumul tor,[ES:DI]                  O D I T S Z A P C
              if DF = 0                               * - - - * * * * *
                   DI <-- DI + 2
              else
                   DI <-- DI - 2

ÿSÿHÿL        - logick˜ posun vlevo                        P©¡znaky:
V˜znam:     ÚÄÄÄÄ¿   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿              O D I T S Z A P C
            ³ CF ÃÄ<Ä´  operand [op1]  ÃÄ<Ä 0         * - - - * * ? * *
            ÀÄÄÄÄÙ   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

ÿSÿHÿR        - logick˜ posun vpravo                       P©¡znaky:
V˜znam:           ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿   ÚÄÄÄÄ¿        O D I T S Z A P C
             0 Ä>Ä´  operand [op1]  ÃÄ>Ä´ CF ³        * - - - * * ? * *
                  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ   ÀÄÄÄÄÙ

ÿSÿTÿC        - nastaven¡ p©¡znaku p©enosu CF              P©¡znaky:
V˜znam:       CF <-- 1                                O D I T S Z A P C
                                                      - - - - - - - - 1

ÿSÿTÿD        - nastaven¡ p©¡znaku smˆru DF                P©¡znaky:
V˜znam:       DF <-- 1                                O D I T S Z A P C
                                                      - 1 - - - - - - -

ÿSÿTÿI        - nastaven¡ p©¡znaku povolen¡ p©er.IF        P©¡znaky:
V˜znam:       IF <-- 1                                O D I T S Z A P C
                                                      - - 1 - - - - - -

ÿSÿTÿOÿS      - ulo‘en¡ ©etˆzce (bajt– nebo slov)         P©¡znaky:
V˜znam:       [ES:DI] <-- Akumul tor                     neovlivnˆny
              if DF = 0
                   DI <-- DI + n   (n = 1 pro bajt,
                                     2 pro slovo)
              else
                   DI <-- DI - n

ÿSÿTÿOÿSÿB    - ulo‘en¡ ©etˆzce bajt–                     P©¡znaky:
V˜znam:       [ES:DI] <-- AL                             neovlivnˆny
              if DF = 0
                   DI <-- DI + 1
              else
                   DI <-- DI - 1

ÿSÿTÿOÿSÿW    - ulo‘en¡ ©etˆzce slov                      P©¡znaky:
V˜znam:       [ES:DI] <-- AX                             neovlivnˆny
              if DF = 0
                   DI <-- DI + 2
              else
                   DI <-- DI - 2

ÿSÿUÿB        - ode‡¡t n¡                                 P©¡znaky:
V˜znam:       [op1] <-- [op1] - [op2]                 O D I T S Z A P C
                                                      * - - - * * * * *

ÿTÿEÿSÿT      - test                                      P©¡znaky:
V˜znam:       [op1] AND [op2]  ; nastaven¡ p©¡znak–   O D I T S Z A P C
              CF <-- 0                                0 - - - * * ? * 0
              OF <-- 0

ÿWÿAÿIÿT      - ‡ek n¡                                     P©¡znaky:
V˜znam:       ‘ dn  funkce                                neovlivnˆny

ÿXÿCÿHÿG      - z mˆna registr–                            P©¡znaky:
V˜znam:       [op1] <--> [op2]                            neovlivnˆny

ÿXÿLÿAÿT      - tabulkov˜ p©evod                           P©¡znaky:
V˜znam:       AL <-- (BX + AL)                            neovlivnˆny

ÿXÿOÿR        - logick‚ XOR (v˜hradn¡ nebo)                P©¡znaky:
V˜znam:       [op1] <-- [op1] XOR [op2]               O D I T S Z A P C
                                                      0 - - - * * * * 0
