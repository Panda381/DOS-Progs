\,
\,
\,
\,
\,
\,
\+                         \0S H A R P    M Z - 8 0 0
\,
\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\1P\5ri\1ru\5c\1ka program\5a\1tora\,
\,
\,
        P\5r\1ehled port\5j \1po\5ci\1ta\5c\1e \0SHARP MZ-800\!\,
        \1===================================\"\,
\,
   Mapov\5a\1n\5i \1pam\5w\1ti:\!\,
   \2_______________\"\,
\+
   \1M\5o\1d 700:\!\,
\+
\,
Odpojen\5i \1D-RAM a p\5r\1ipojen\5i \1ROM nebo V-RAM:\,
zap:   OUT(E3)  IN (E0)  OUT(E4)           OUT(E2)  OUT(E5)\,
\.\.\.\.\.\.\.\.\.\.\2;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\. \.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\,
\1Odpojen\5i \1ROM nebo V-RAM a p\5r\1ipojen\5i \1D-RAM\.\.\.\.\.\2;\.\.\.\.\.\.\.\.;\,
\1vyp:   OUT(E1)  IN (E1)     \2;     \1OUT(E0)     \2;    \1[OUT(E6)]\,
  \.\.\.\.\.\.\.\.\2;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\,
\10000   \2u=====o  u=====o  u_____o  u_____o  u_____o  u=====o\,
       ;     ;  ;     ;  | \1ROM \2|  |     |  | \1ROM \2|  ;     ;\,
\11000   \2;     ;  u_____o  j_____k  |     |  n_____,  ;     ;\,
       ;     ;  |\1CGROM\2|  |\1CGROM\2|  |     |  ;     ;  ;     ;\,
\12000   \2;     ;  n_____,  j_____k  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\13000   \2;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\14000   \2;     ;  ;     ;  |     |  |\1D RAM\2|  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\15000   \2;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\16000   \2;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\17000   \2;     ;  ;     ;  |\1D RAM\2|  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\18000   \2;     ;  ;     ;  |     |  n_____,  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  ;     ;  ;     ;  ;     ;\,
\19000   \2;     ;  ;     ;  |     |  ;     ;  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  ;     ;  ;     ;  ;     ;\,
\1A000   \2;     ;  ;     ;  |     |  ;     ;  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  ;     ;  ;     ;  ;     ;\,
\1B000   \2;     ;  ;     ;  |     |  ;     ;  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  ;     ;  ;     ;  ;     ;\,
\1C000   \2;     ;  u_____o  |     |  ;     ;  ;     ;  ;     ;\,
       ;     ;  |\1CGRAM\2|  |     |  ;     ;  ;     ;  ;     ;\,
\1D000   \2u_____o  n_____,  j_____k  ;     ;  ;     ;  u_____o\,
       |\1VRAM \2|  ;     ;  |\1VRAM \2|  ;     ;  ;     ;  |     |\,
\1E000   \2j_____k  ;     ;  j_____k  ;     ;  ;     ;  |     |\,
       |     |  ;     ;  |     |  ;     ;  ;     ;  |\1EXROM\2|\,
\1F000   \2| \1ROM \2|  ;     ;  | \1ROM \2|  ;     ;  ;     ;  |     |\,
       |     |  ;     ;  |     |  ;     ;  ;     ;  |     |\,
\1FFFF   \2n_____,  n=====,  n_____,  n=====,  n=====,  n_____,\,
\+
                                                    \1INH5 p38\,
\"\,
\,
\,
   M\5o\1d 800:\,
\+
\!\,
Odpojen\5i \1D-RAM a p\5r\1ipojen\5i \1ROM nebo V-RAM:\,
zap:   OUT(E3)  IN (E0)  OUT(E4)           OUT(E2)  OUT(E5)\,
\.\.\.\.\.\.\.\.\.\.\2;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\,
\1Odpojen\5i \1ROM nebo V-RAM a p\5r\1ipojen\5i \1D-RAM:\.\.\.\.\2;\.\.\.\.\.\.\.\.;\,
\1vyp:   OUT(E1)  IN (E1)     \2;     \1OUT(E0)     \2;    \1[OUT(E6)]\,
\.\.\.\.\.\.\.\.\.\.\2;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\.\.\.\.\.\.\.\.;\,
\10000   \2u=====o  u=====o  u_____o  u_____o  u_____o  u=====o\,
       ;     ;  ;     ;  | \1ROM \2|  |     |  | \1ROM \2|  ;     ;\,
\11000   \2;     ;  u_____o  j_____k  |     |  n_____,  ;     ;\,
       ;     ;  |\1CGROM\2|  |\1CGROM\2|  |     |  ;     ;  ;     ;\,
\12000   \2;     ;  n_____,  j_____k  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\13000   \2;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\14000   \2;     ;  ;     ;  |     |  |\1D RAM\2|  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\15000   \2;     ;  ;     ;  |\1D RAM\2|  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\16000   \2;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\17000   \2;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  |     |  ;     ;  ;     ;\,
\18000   \2;     ;  u_____o  j_____k  n_____,  ;     ;  ;     ;\,
       ;     ;  |     |  |     |  ;     ;  ;     ;  ;     ;\,
\19000   \2;     ;  |\1VRAM \2|  |\1VRAM \2|  ;     ;  ;     ;  ;     ;\,
       ;     ;  |     |  |     |  ;     ;  ;     ;  ;     ;\,
\1A000   \2;     ;  j _ _ k  j _ _ k  ;     ;  ;     ;  ;     ;\,
       ;     ;  |     |  |     |  ;     ;  ;     ;  ;     ;\,
\1B000   \2;     ;  |\1VRAM?\2|  |\1VRAM?\2|  ;     ;  ;     ;  ;     ;\,
       ;     ;  |     |  |     |  ;     ;  ;     ;  ;     ;\,
\1C000   \2;     ;  n_____,  j_____k  ;     ;  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  ;     ;  ;     ;  ;     ;\,
\1D000   \2;     ;  ;     ;  |\1D RAM\2|  ;     ;  ;     ;  ;     ;\,
       ;     ;  ;     ;  |     |  ;     ;  ;     ;  ;     ;\,
\1E000   \2u_____o  ;     ;  j_____k  ;     ;  ;     ;  u_____o\,
       |     |  ;     ;  |     |  ;     ;  ;     ;  |     |\,
\1F000   \2| \1ROM \2|  ;     ;  | \1ROM \2|  ;     ;  ;     ;  |\1EXROM\2|\,
       |     |  ;     ;  |     |  ;     ;  ;     ;  |     |\,
\1FFFF   \2n_____,  n=====,  n_____,  n=====,  n=====,  n_____,\"\,
                                                    \1INH5 p38\,
\,
\,
   Dal\5si \1porty:\!\,
   \2___________\,
\,
\1B0 \2_ \1B3   I/O   (CSR) \5c\1ip selekt pin 88 GDG (nezapojen)\"\,
                0 \2_ \1data pro RS1\,
                1 \2_ \5ri\1d\5i\1c\5i \1registr pro RS1\,
                2 \2_ \1data pro RS2\,
                3 \2_ \5ri\1d\5i\1c\5i \1registr pro RS2\,
\,
CC        OUT   WRITE FORMAT REGISTR\,
                Re\5z\1im pro zapisov\5a\1n\5i \1dat do VRAM\,
                   7    6    5    4    3    2    1    0\!\,
                 \2u____i____i____i____i____i____i____i____o\,
                 |  \1WRITE MODE  \2|\1B/A \2| \1IV \2|\1III \2| \1II \2| \1I  \2|\,
                 n____m____m____m____m____m____m____m____,\,
                 \10      SINGLE  \2|\1sada\2|    \1r o v i n y\"\,
                 1      EXOR\,
                 2      OR\,
                 3      RESET\,
                 4      REPLACE\,
                 5      \2- \1" \2_\,
                 \16      PSET\,
                 7       \2_ \1" \2_\,
\,
\1CD         OUT  READ FORMAT REGISTER\,
                Re\5z\1im pro \5c\1ten\5i \1dat z VRAM\,
                   7    6    5    4    3    2    1    0\!\,
                 \2u____i____i____i____i____i____i____i____o\,
                 |\1SRSI\2| _  | _  |\1B/A \2| \1IV \2|\1III \2| \1II \2| \1I  \2|\,
                 n____m____m____m____m____m____m____m____,\,
                 \10\2_\1SINGLE       \2|\1sada\2|    \1r o v i n y\"\,
                 1\2_\1SEARCH\,
\,
CE         OUT  DISPLAY MODE REGISTER\,
                Ur\5c\1uje re\5z\1im pro zobrazen\5i \1dat na CRT:\,
                   7    6    5    4    3    2    1    0\!\,
                 \2u____i____i____i____i____i____i____i____o\,
                 | _  | _  | _  | _  |\1DM3 \2|\1DM2 \2|\1DM1 \2|\1DM0 \2|\,
                 n____m____m____m____m____m____m____m____,\,
                                \1OR\"\,
                 320X200   0     4 barvy      I,II         A\,
                           1     4 barvy      III,IV       B\,
                           2     16 barev     I,II,III,IV  A\,
                 640x200   4     2 barvy      I            A\,
                           5     2 barvy      III          B\,
                           6     4 barvy      I,III        A\,
                 MZ\2_\1700    8\2_\1B   DATA,ATR,CGRAM\,
                 ???       C\2_\1F\,\/
\,
CE        IN    STATUS READ REGISTER\,
                Stavov\5e \1slovo videoprocesoru GDG.\,
                   7    6    5    4    3    2    1    0\!\,
                 \2u____i____i____i____i____i____i____i____o\,
                 |\1/RZ \2|\1/SZ \2|\1/RS \2|\1/SS \2| \10  \2| \10  \2|\18/7 \2|\1MEL \2|\,
                 n____m____m____m____m____m____m____m____,\,
                 |\5ra\1dkov\5a  \2|\5ra\1dkov\5e  \2|         |\1ON=0\2|\1frekv.\,
                 \2| \1sn\5i\1mkov\5a\2| \1sn\5i\1mkov\5e\2|         |\1stav\2|\1z E008\,
                 \2|\1synchron.\2|\1zatem\5n\1ov.\2|         |\1p\5r\1ep\5i\1na\5c\1e\2|\,
                                               |\1na zadn\5i\1m\2|\,
                                               |\1panelu   \2|\"\,
\,
\101 CF     OUT   SCROLL OFFSET REG. LOW 8b.\,
\,
02 CF     OUT   SCROLL OFFSET REG. HIGH 2b.\,
                Ur\5c\1uje posun logick\5e \1adresy proti skute\5c\1n\5e\1.\,
                SOF=<0;3E8H>\,
                SOFADR = 8 * SOF   \2_ \1320x200\,
                        16 * SOF   \2_ \1640x200\,
\,
03 CF     OUT   SCROLL WIDTH REG. 7b.    (D7=x)\,
                \5Sir\1ka rolovan\5e \1oblasti.\,
                SW = <5;7DH>\,
                SW = SEA \2_ \1SSA\,
\,
\,
\,
04 CF     OUT   SCROLL START ADRESS 7b.  (D7=x)\,
                Po\5ca\1te\5c\1n\5i \1pozice pro rolov\5a\1n\5i\1.\,
                SSA = <0;78H>\,
                SSA$= 64 * SSA   \2_ \1320x200\,
                     128 * SSA   \2_ \1640x200\,
\,
05 CF     OUT   SCROLL END ADRESS 7b.    (D7=x)\,
                Pozice, kde u\5z \1se nebude rolovat.\,
                SEA = <5;7DH>\,
                SEA$= jako SSA$\,
\,
06 CF     OUT   BORDER COLOR 4b.\,
                Barva okraje na obrazovce.\,
                   7    6    5    4    3    2    1    0\!\,
                 \2u____i____i____i____i____i____i____i____o\,
                 | _  | _  | _  | _  | \1I  \2| \1G  \2| \1R  \2| \1B  \2|\,
                 n____m____m____m____m____m____m____m____,\"\,
\,
\,\/
\107 CF     OUT   SUPERIMPOSE 1b. (D7)      (D6\2_\1D0=x)\,
                P\5r\1ep\5i\1na\5c \1pro vnit\5r\1n\5i \1d\5w\1li\5c\1ku kmito\5c\1tu.\,
\,
D0        OUT   /KEY    port A I8255      mem. E000\,
                   7    6    5    4    3    2    1    0\!\,
                 \2u____i____i____i____i____i____i____i____o\,
                 |\1/RES\2| _  |\1/COB\2|\1/COA\2|\5ci\1slo sloupce kl\5a\1v.\2|\,
                 n____m____m____m____m____m____m____m____,\,
            \1RESET \5c\1as.\2|    | \1strobe  \2|\1pro nastaven\5i \174145\,
            blik\5a\1n\5i   \2|    |   \1JOY   \2|\,
            \1kurzoru   \2|    |\17417+4K7 \2|\"\,
\,
\1D1        IN    /KEY    port B I8255        mem E001\,
                Data z kl\5a\1vesnice. (tla\5ci\1tka+10K na +5V,\,
                                    "0"=stisknuto)\,
\.\.\.\.\.\.\.\.\.\.\.Sloupec (v\5y\1stup):\,
\5Ra\1dek        0    1   2   3   4   5    6     7     8    9\!\,
(vstup):  \2u_____i___i___i___i___i___i_____i_____i_____i____o\,
        \17 \2|\1BLANK\2| \1Y \2| \1Q \2| \1I \2| \1A \2| \11 \2|  \1\\  \2|\1INST \2|\1BREAK\2| \1F1 \2|\,
\.\.\.\.\.\.\.\.\.\.j_____+___+___+___+___+___+_____+_____+_____+____k\,
        \16 \2|\1GRAPH\2| \1Z \2| \1R \2| \1J \2| \1B \2| \12 \2|  \1^  \2| \1DEL \2|\1CTRL \2| \1F2 \2|\,
\.\.\.\.\.\.\.\.\.\.j_____+___+___+___+___+___+_____+_____+_____+____k\,
        \15 \2|  \7$  \2| \1@ \2| \1S \2| \1K \2| \1C \2| \13 \2|  _  |  \4^  \2|     | \1F3 \2|\,
\.\.\.\.\.\.\.\.\.\.j_____+___+___+___+___+___+_____+_____+_____+____k\,
\1bit     4 \2|\1ALPHA\2| \1[ \2| \1T \2| \1L \2| \1D \2| \14 \2|\1SPACE\2|  \4&  \2|     | \1F4 \2|\,
\.\.\.\.\.\.\.\.\.\.j_____+___+___+___+___+___+_____+_____+_____+____k\,\/
        \13 \2| \1TAB \2| \1] \2| \1U \2| \1M \2| \1E \2| \15 \2|  \10  \2| \4__> \2|     | \1F5 \2|\,
\.\.\.\.\.\.\.\.\.\.j_____+___+___+___+___+___+_____+_____+_____+____k\,
        \12 \2|  \1;  \2|   | \1V \2| \1N \2| \1F \2| \16 \2|  \19  \2| \4<__ \2|     |    |\,
\.\.\.\.\.\.\.\.\.\.j_____+___+___+___+___+___+_____+_____+_____+____k\,
        \11 \2|  \1:  \2|   | \1W \2| \1O \2| \1G \2| \17 \2|  \1,  \2|  \1?  \2|     |    |\,
\.\.\.\.\.\.\.\.\.\.j_____+___+___+___+___+___+_____+_____+_____+____k\,
        \10 \2| \1CR  \2|   | \1X \2| \1P \2| \1H \2| \18 \2|  \1.  \2|  \1/  \2|\1SHIFT\2|    |\,
          n_____m___m___m___m___m___m_____m_____m_____m____,\"\,
\,
\1D2        I/O   /KEY    port C I8255          mem E002\,
              7     6     5     4     3     2     1     0\!\,
           \2u_____i_____i_____i_____i_____i_____i_____i_____o\,
           |\1/VBLN\2|     |     |     |     |     |     |     |\,
           n_____m_____m_____m_____m_____m_____m_____m_____,\,
                      \1IN           \2|          \1OUT\,
      vert.zatem.\2|\1vstup\2|\1READ \2| \1"1" \2|\1puls \2| \1"0" \2|\1WRITE\2| \1"1"\,
                 \2|\5c\1as. \2|\1DATA \2|\1dotaz\2|\1p\5r\1ep.\2|\1z\5a\1kaz\2|\1DATA \2|\1povoluje\,
       pro blik.kurzoru\2|\1CASS.\2|\1na   \2|\1motor\2|\1p\5r\1er.\2|\1CASS.\2|\1zvuk\,
                             \2|\1motor\2|     |\1od \5c\1as.\2|   |\1z 8253\"\,
\,
D3        I/O   /KEY    \5ri\1d\5i\1c\5i \1registr I8255   mem E003\,
\,
D4        I/O   /C53    \5ci\1ta\5c \10 I8253          mem E004\,
                CLK  <\2__ \1CKSM (1.1MHz)\,
                GATE <\2__ \153G\,
                OUT  \2__\1> PIO A4, PSG AUDIO IN\,
\,\/
D5        I/O   /C53    \5ci\1ta\5c \11 I8253          mem E005\,
                CLK  <\2__ \1HSYN\,
                GATE <\2__ \1"1"\,
                OUT  \2__\1> CLK2\,
\,
D6        I/O   /C53    \5ci\1ta\5c \12 I8253        mem E006\,
                CLK  <\2__ \1OUT1\,
                GATE <\2__ \1"1"\,
                OUT  \2__\1> AND PC2 8255 \2__\1> INT \2__\1> CPU\,
\,
D7        I/O /C53 \5ri\1d\5i\1c\5i \1registr I8253   mem E007\,
\,
D8        I/O                          mem E008\,
                TEMP, HBLK, GATE0 8253 (D1)\,
\,
                FLOPPY DISK       WD 2795\,
D8        I/O   p\5ri\1kazov\5y \1registr\,
D9        I/O   registr stopy\,
DA        I/O   registr sektoru\,
DB        I/O   registr dat\,
DC        I/O   zapnut\5i\1/vypnut\5i \1mechaniky\,
DD        I/O   p\5ri\1znak vybran\5e \1mechaniky b0\,
\,
EA              RAMDISK vstup/v\5y\1stup dat\,
rB EB     I/O   RAMDISK \5c\1tec\5i\1/zapisovan\5a \1data\,
\,
F0        OUT   PALLET REG.\,
                P\5r\1i\5r\1azov\5a\1n\5i \1barev palet\5a\1m.\,
              7     6     5     4     3     2     1     0\!\,
           \2u_____i_____i_____i_____i_____i_____i_____i_____o\,
           |  \1x  \2| \1SW  \2|  \1PAL reg. \2|  \1I  \2|  \1G  \2|\1R/SW1\2|\1B/SW2\2|\,
           n_____m_____m_____m_____m_____m_____m_____m_____,\"\,
           \1SW=0     0   \5c\1ern\5a           \18   \5s\1ed\5a\,
                    \11   modr\5a           \19   sv\5w\1tle modr\5a\,
                    \12   \5c\1erven\5a         \110  sv\5w\1tle \5c\1erven\5a\,
                    \13   purpurov\5a       \111  sv\5w\1tle purpurov\5a\,
                    \14   zelen\5a          \112  sv\5w\1tle zelen\5a\,
                    \15   azurov\5a         \113  sv\5w\1tle azurov\5a\,
                    \16   \5z\1lut\5a           \114  sv\5w\1tle \5z\1lut\5a\,
                    \17   b\5i\1l\5a            \115  sv\5w\1tle b\5i\1l\5a\,
\,
           \1SW=1     p\5r\1ep\5i\1n\5a \1na aktivn\5i \1blok (SW1, SW2=0\2_\13),\,
                    neaktivn\5i \1se vrac\5i \1na INIT\,
\,\/
F0        IN    /JOY   JOYSTICK 1\,
F1        IN    /JOY   JOYSTICK 2   (vstupy s 4K7 na +5V)\!\,
                             "0" = stisknuto\"\,
              7     6     5     4     3     2     1     0\!\,
           \2u_____i_____i_____i_____i_____i_____i_____i_____o\,
           |  \11  \2|  \11  \2|\1/TRG2\2|\1/TRG1\2|\1/RIGH\2|\1/LEFT\2|\1/DOWN\2| \1/UP \2|\,
           n_____m_____m_____m_____m_____m_____m_____m_____,\"\,
\,
\1F2        OUT   /PSG  zvukov\5y \1gener\5a\1tor\,
              7     6     5     4     3     2     1     0\!\,
           \2u_____i_____i_____i_____i_____i_____i_____i_____o\,
           |  \11  \2|  \1R E G I S T R  \2| \1D3  \2| \1D2  \2| \1D1  \2| \1D0  \2|\,
           n_____m_____m_____m_____m_____m_____m_____m_____,\,
                 |\10 frekv.pro t\5o\1n 0\2|\,
                 |\11 hlasitost t\5o\1n 0\2|\,
                 |\12 frekv.pro t\5o\1n 1\2|\,
                 |\13 hlasitost t\5o\1n 1\2|\,
                 |\14 frekv.pro t\5o\1n 2\2|\,
                 |\15 hlasitost t\5o\1n 2\2|\,
                 |\16 \5ri\1zen\5i s\1umu    \2|\,
                 |\17 hlasitost \5s\1umu \2|\"\,
\,
                \1Pro frekvenci: D0\2_\1D3 + 6b. z dal\5si\1ho bajtu\,
                (D7=0,D6=x) tvo\5ri \110bitov\5e \1slovo [n] frekv.\,
                podle v\5y\1razu:\,
                   frekvence = (3.55 x 1000)/(32 x [n]) kHz\,
\,
                P\5r\1esn\5y \1kmito\5c\1et hodin procesoru=3.546895 MHz\,
                (281.93674 ns).\,
\,
        Pro hlasitost: D0\2_\1D3 = 15   : vypnuto\,
                                     = 0\2_\114 : hlasitost (0 \2_\,
                                              _ \128)dB krok 2\,
\,
                Pro \5s\1um: (D7=1,D6\2_\1D4=6,D3=x) D2=typ \5s\1umu:\,
                D2=0 : synchronizovan\5y s\1um\,
                        D0\2_\1D1 = typ synchr.  0=6.93kHz\,
                        (faktor asi 6.25%)   1=3.47kHz\,
                                             2=1.73kHz\,
                                             3=synch.gener.\,
                                               \5ci\1slo 3\,
                D2=1 : "b\5i\1l\5y\1" \5s\1um\,
\,
F4\2_\1F7     I/O   (SIO) \5c\1ip selekt pin 89 GDG (nezapojen)\,
                F4 \2_ \1data pro kan\5a\1l A\,
                F5 \2_ \5ri\1d\5i\1c\5i \1reg. A\,
                F6 \2_ \1data pro kan\5a\1l B\,
                F7 \2_ \5ri\1d\5i\1c\5i \1reg. B\,\/
\,
F8        IN    SRAM ukazatel na za\5ca\1tek\,
F9        IN    \5c\1ten\5i \1bajtu; ukazatel + 1\,
FA        OUT   z\5a\1pis bajtu; ukazatel +1\,
\,
FC        I/O   /CPR  \5ri\1d\5i\1c\5i \1registr portu A Z80 PIO\,
\,
FD        I/O   /CPR  \5ri\1d\5i\1c\5i \1registr portu B Z80 PIO\,
\,
FE        I/O   /CPR  port A Z80 PIO\,
              7     6     5     4     3     2     1     0\!\,
           \2u_____i_____i_____i_____i_____i_____i_____i_____o\,
           |\1/IRT \2|\1/RDP \2|\1/VBLN\2|\1/OUT0\2|  \10  \2|  \10  \2|\1/RDA \2|\1/STA \2|\,
           n_____m_____m_____m_____m_____m_____m_____m_____,\,
                \1OUT    \2|                \1IN\,
                  vert.zatem.\2|\1vstup od 8253    \2|\1READY\2|\1ERROR\2|\,
                      \1pro interrupt                LPT:\"\,
\,
FF        OUT   /CPR  port B Z80 PIO\,
              7     6     5     4     3     2     1     0\!\,
           \2u_____i_____i_____i_____i_____i_____i_____i_____o\,
           | \1D7  \2| \1D6  \2| \1D5  \2| \1D4  \2| \1D3  \2| \1D2  \2| \1D1  \2| \1D0  \2|\,
           n_____m_____m_____m_____m_____m_____m_____m_____,\"\,
                \1Data pro tisk\5a\1rnu. (7417+1K0 na +5V)\,
\,
Ovl\5a\1d\5a\1n\5i r\1adi\5c\1e displeje:\,
\,
     B/A bit m\5a \1odli\5s\1n\5y \1v\5y\1znam. Kdyby ur\5c\1oval, do kter\5e \1sady\,
se zapisuje, mohl by  b\5y\1t v rozporu  s rovinami definovan\5y\1mi\,
pomoc\5i \1bit\5j \1I. a\5z \1IV. Tento bit svou  nulovou hodnotou zaka-\,
zuje  z\5a\1pis do  roz\5sir\1en\5e \1VRAM, i kdy\5z  \1je nastaven bit III.\,
nebo IV.\,
     V t\5w\1chto 4 re\5z\1imech nez\5a\1le\5zi \1na zvolen\5e\1m DMD. Rozd\5i\1l je\,
jenom mezi m\5o\1dem 320x200 a 640x200, kter\5y  \1vypl\5y\1v\5a \1z odli\5s\1n\5e\,
\1velikosti VRAM a odli\5s\1n\5e\1ho  p\5r\1i\5r\1azen\5i \1adres do fyzick\5e \1VRAM.\,
Proto\5z\1e  existuj\5i \1jen roviny I. a III., bity II. a IV. v re-\,
gistru WF jsou nev\5y\1znamn\5e\1.\,
     Tyto podre\5z\1imy se hod\5i \1p\5r\1edev\5si\1m  pro vyu\5z\1it\5i \1v\5i\1ce \5c\1er-\,
nob\5i\1l\5y\1ch displej\5j\1, navz\5a\1jem se p\5r\1ep\5i\1naj\5i\1c\5i\1ch.\,
\,
SINGLE ..... Jednoduch\5y \1z\5a\1pis, data se zapisuj\5i \1tak, jak le-\,
             \5zi \1a b\5wzi  \1do  VRAM, na  p\5r\1edch\5a\1zej\5i\1c\5i\1m  obsahu\,
             VRAM nez\5a\1le\5zi\1. Roviny, do kter\5y\1ch se nezapisuje\,
\,
XOR ........ Se  zapisovan\5y\1mi  daty a daty ve VRAM se vykon\5a\,
             \1operace XOR. Jedni\5c\1ky zapisovan\5y\1ch dat provedou\,
             inverzi ve VRAM, nuly zachov\5a\1vaj\5i \1p\5j\1vodn\5i \1obsah\,
             VRAM.\,
OR ......... Se  zapisovan\5y\1mi  daty a daty ve VRAM se vykon\5a\,
             \1operace OR. Jedni\5c\1ky  zapisovan\5y\1ch dat se ukl\5a\1-\,
             daj\5i \1jako  jedni\5c\1ky do VRAM, nuly  zapisovan\5y\1ch\,
             dat zachov\5a\1vaj\5i \1p\5j\1vodn\5i \1obsah.\,
RESET ...... Zapisovan\5a  \1data se  neguj\5i \1a vykon\5a \1se operace\,
             AND s daty ve VRAM. D\5j\1sledek je ten, \5z\1e jedni\5c\1-\,
             ky  zapisovan\5y\1ch  dat se  ukl\5a\1daj\5i \1jako nuly do\,
             VRAM, nuly p\5j\1vodn\5i \1obsah zachov\5a\1vaj\5i\1.\,
\,
      Re\5z\1im SINGLE je vyu\5z\1iteln\5y  \1pro p\5ri\1m\5y \1p\5ri\1stup do VRAM.\,
Jako jedin\5y \1je vhodn\5y \1pro  neobrazovkovou  manipulaci s VRAM\,
(nap\5r\1. buffery). Re\5z\1imy XOR, OR a RESET umo\5zn\1uj\5i \1manipulovat\,
jednotliv\5y\1mi body ve  svolen\5y\1ch rovin\5a\1ch. To je mo\5z\1n\5e \1vyu\5zi\1t\,
nap\5r\1. pro realizaci jednoduch\5e \1sprajtov\5e \1grafiky.\,
\,
\,
\,
\,
\,
\,\/
     4.6.2.  Z\5a\1pis v specifikovan\5e \1barv\5w \1(REPLACE, PSET)\,
\,
    D\5w\1l\5i \1se na dva podre\5z\1imy, pro z\5a\1pis textu a pro grafiku.\,
Oba jsou z hlediska  \5ri\1zen\5i  \1toto\5z\1n\5e\1, proto  jsou popisov\5a\1ny\,
spole\5c\1n\5w\1. N\5a\1sleduj\5i\1c\5i \1tabulka ud\5a\1v\5a \1v\5y\1znam bit\5j \1I- IV v jed-\,
notliv\5y\1ch  re\5z\1imech. Plat\5i \1pro  re\5z\1im REPLACE, PSET a SEARCH\,
p\5r\1i \5c\1ten\5i\1:\,
\2u_______i__________i______i______i______i______i______i______o\!\,
| \1re\5z\1im \2|  \1barev   \2|  \1DMD \2|  \1B/A \2|  \1IV. \2|  \1III.\2|  \1II. \2|  \1I.\.\.\2|\,
j_______+__________+______+______+______+______+______+______k\,
|\1320x200\2|  \14 barvy \2|  \10,1 \2|   \10  \2|   \1x  \2|   \1x  \2|  \10/1 \2|  \10/1\.\2|\,
|       |          |      j______+______+______+______+______k\,
|       |          |      |   \11  \2|  \10/1 \2|  \10/1 \2|   \1x  \2|   \1x\.\.\2|\,
|       j__________+______+______+______+______+______+______k\,
|       | \116 barev \2|   \12  \2|   \1x  \2|  \10/1 \2|  \10/1 \2|  \10/1 \2|  \10/1\.\2|\,
j_______+__________+______+______+______+______+______+______k\,
|\1640x200\2|  \12 barvy \2|  \14,5 \2|   \10  \2|   \1x  \2|   \1x  \2|   \1x  \2|  \10/1\.\2|\,
|       |          |      j______+______+______+______+______k\,
|       |          |      |   \11  \2|   \1x  \2|  \10/1 \2|   \1x  \2|   \1x\.\.\2|\,
|       j__________+______+______+______+______+______+______k\,
|       |  \14 barvy \2|   \16  \2|   \1x  \2|   \1x  \2|  \10/1 \2|   \1x  \2|  \10/1\.\2|\,
n_______m__________m______m______m______m______m______m______,\"\,
\,
\,
     \1Bity ozna\5c\1en\5e \1x jsou nezaj\5i\1mav\5e\1, s rovinami  ozna\5c\1en\5y\1mi\,
takto se nic ned\5w\1je. Nem\5w\1nn\5e  \1roviny jsou  obvykle ty, kter\5e\,
\1se nezobrazuj\5i\1. Vhodnou volbou B/A bitu, kter\5y  \1skute\5c\1n\5w \1ur-\,
\5c\1uje  sadu VRAM s kterou se pracuje, je mo\5z\1n\5e \1zapisovat i do\,
neviditeln\5e  \1VRAM a do viditeln\5e  \1nezapisovat. Nikdy se data\,
nezapisuj\5i  \1do obou  rovin sou\5c\1asn\5w\1. V DMD  s pln\5y\1m vyu\5z\1it\5i\1m\,
VRAM se zapisuje do v\5s\1ech rovin.\,
     Bity  ozna\5c\1en\5e \10/1 jsou v\5y\1znamn\5e\1. Jejich konkr\5e\1tn\5i \1v\5y\1z-\,
nam z\5a\1vis\5i \1na WMD. V obou re\5z\1imech je t\5i\1mto bitem specifiko-\,
van\5a \1barva, p\5r\1esn\5w\1ji \5r\1e\5c\1eno k\5o\1d palety, s kter\5y\1m se pracuje.\,
\,
 WMD     re\5z\1im z\5a\1pisu   co se zapisuje, kdy\5z \1bit I a\5z \1IV je:\,
                                1                 0\,
4 nebo 5   REPLACE             WD                 0 (nula)\,
6 nebo 7   PSET             WD + VD        .not.WD.and.VD\,
\,
REPLACE .... Jedni\5c\1ky zapisovan\5y\1ch dat se zapisuj\5i \1jako spe-\,
             cifikovan\5y  \1palete code,  nuly se zapisuj\5i \1jako\,
             k\5o\1d palety 0, t.j. obvykle \5c\1ern\5a\1. V\5y\1sledkem je,\,
             \5z\1e se zm\5w\1n\5i \1cel\5a  \1osmice bod\5j \1bez ohledu na je-\,
             jich p\5r\1edch\5a\1zej\5i\1c\5i \1stav. T\5i\1mto zp\5j\1sobem se jed-\,
             nodu\5s\1e zapisuj\5i \1barevn\5e \1znaky na \5c\1ern\5e\1m pozad\5i\1,\,
             p\5j\1vodn\5i  \1znak  je  p\5r\1ekryt\5y\1. Znaky  na barevn\5e\1m\,
             podklad\5w \1se takto zapisovat nedaj\5i\1.\,\/
PSET ....... Jedni\5c\1ky zapisovan\5y\1ch dat se zapisuj\5i \1jako body\,
             v specifikovan\5e  \1barv\5w\1, nuly VRAM nem\5w\1n\5i\1. Tento\,
             re\5z\1im slou\5zi \1pro rozsv\5i\1cen\5i \1bod\5j \1v ur\5c\1it\5e \1barv\5w\,
             \1tedy pro  grafiku. Texty se v tomto re\5z\1imu p\5isi\,
             \1obt\5iz\1n\5w\1, proto\5z\1e by se znaky  nep\5r\1ekr\5y\1valy, ale\,
             prol\5i\1naly.\,
\,
\,
     4.7.  \5C\1ten\5i \1z VRAM\,
\,
     P\5ri\1stup  do pam\5w\1ti je stejn\5y\1, jako p\5r\1i z\5a\1pisu, t.j. po-\,
moc\5i \1b\5wz\1n\5y\1ch  instrukc\5i \1pro pr\5a\1ci s opera\5c\1n\5i \1pam\5w\1t\5i \1po nama-\,
pov\5a\1n\5i \1VRAM.\,
     P\5r\1e\5c\1ten\5a  \1data  nejsou  p\5r\1esn\5y\1m  obrazem VRAM, ale jsou\,
upravena obvodem GDG podle "read format register" RF (0CDH).\,
V\5y\1znam jeho bit\5j \1je n\5a\1sleduj\5i\1c\5i\1:\,
\,
     7      6      5      4      3      2      1      0\!\,
 \2u______i______i______i______i______i______i______i______o\,
 |\1SRCH/ \2|  \1nevyu\5z\1ito  \2| \1B/A  \2|         \1k\5o\1d  palety       \2|\,
 | \1SING \2|             |      |  \1IV.    III.   II.     I. \2|\,
 n______m______m______m______m______m______m______m______,\"\,
\,
     \1Existuj\5i \1pouze dva re\5z\1imy ur\5c\1en\5e \1bitem SRCH/SING:\,
0 ... "single color data read" - jednoduch\5e c\1ten\5i \1ze zvolen\5e\,
      \1roviny nebo rovin\,
1 ... "specified color search" -  \5c\1ten\5i   \1zvolen\5e  \1barvy  ze\,
      v\5s\1ech definovan\5y\1ch rovin\,
\,
\,
     4.7.1.  Jednoduch\5e c\1ten\5i\,
\,
     \1Odpov\5i\1d\5a \1jednoduch\5e\1mu z\5a\1pisu, bit B/A m\5a \1stejn\5y \1v\5y\1znam.\,
\5C\1ten\5i  \1prob\5i\1h\5a  \1z roviny, jej\5iz  \1bit je v RF jedni\5c\1kov\5y\1. Aby\,
byla p\5r\1e\5c\1ten\5a \1data  jednozna\5c\1n\5a\1, nem\5w\1lo by  se nastavit v\5i\1ce\,
bit\5j \1I-IV. V opa\5c\1n\5e\1m p\5ri\1pad\5w \1jsou bity p\5r\1e\5c\1teny z ka\5z\1d\5e \1spe-\,
cifikovan\5e \1roviny a vykon\5a \1se s nimi AND.\,
     Funkce RF v tomto  re\5z\1imu  nez\5a\1vis\5i \1na DMD, je v\5s\1ak po-\,
t\5r\1ebn\5e \1si uv\5w\1domit odli\5s\1nost  adresov\5a\1n\5i  \1v re\5z\1imech 320x200\,
a 640x200. V re\5z\1imu 640x200 jsou bity II a III nev\5y\1znamn\5e\1.\,
\,
\,
\,
\,\/
     4.7.2.  \5C\1ten\5i \1specifikovan\5e \1barvy\,
\,
     Odpov\5i\1d\5a \1z\5a\1pisu v  specifikovan\5e  \1barv\5w\1. Pro  RF  plat\5i\,
\1stejn\5a  \1tabulka jako  pro WF (4.6.2)  a stejn\5e  \1pozn\5a\1mky pro\,
\5c\1ten\5i \1v jednotliv\5y\1ch DMD.\,
     Z rovin, kde je  v tabulce x se ne\5c\1te v\5j\1bec. Data z ro-\,
vin ozna\5c\1en\5y\1ch 0/1 se p\5r\1e\5c\1tou  a vykon\5a \1se XOR  s p\5ri\1slu\5s\1n\5y\1m\,
bitem v I a\5z \1IV  v RF. V\5y\1sledn\5y  \1bajt  vznikne  operac\5i  \1NOR\,
z t\5w\1chto bajt\5j\1.\,
     V praxi to znamen\5a\1, \5z\1e  se  zji\5st\1uje, kde se  vyskytuje\,
barva specifikovan\5a \1v RF. Tam, kde  tato  barva je, se vrac\5i\,
\1hodnota bitu 1. Tam kde je jak\5a\1koliv jin\5a \1se vrac\5i \10.\,
\,
\,
     4.8.  Pallet\,
\,
     P\5r\1i zobrazov\5a\1n\5i \1na displeji dostane GDG z VRAM pro ka\5z\1-\,
d\5y \1bod kombinaci 1 - 4 bit\5j \1ur\5c\1uj\5i\1c\5i\1ch barvu tohoto bitu. To\,
ale nen\5i \1skute\5c\1n\5a \1barva, jakou  bude  dan\5y \1bod sv\5i\1tit. Je to\,
jenom k\5o\1d palety. Skute\5c\1nou barvu je mo\5z\1n\5e  \1ka\5z\1d\5e\1mu k\5o\1du pa-\,
lety p\5r\1i\5r\1adit libovoln\5w\1. Dv\5w\1ma  r\5j\1zn\5y\1m k\5o\1d\5j\1m je mo\5z\1n\5e \1p\5r\1i\5r\1a-\,
dit stejn\5e \1barvy a t\5i\1m zneviditelnit obsah displeje. Skute\5c\1-\,
n\5e \1barvy maj\5i \1sv\5j\1j k\5o\1d ur\5c\1en\5y \1n\5a\1sleduj\5i\1c\5i \1tabulkou:\,
\,
 0 ... \5c\1ern\5a \1.............. black\,
 1 ... modr\5a \1.............. blue\,
 2 ... \5c\1erven\5a \1............ red\,
 3 ... purpurov\5a \1.......... magenta\,
 4 ... zelen\5a \1............. green\,
 5 ... azurov\5a \1............ cyan\,
 6 ... \5z\1lut\5a \1.............. yellow\,
 7 ... b\5i\1l\5a \1............... white\,
 8 ... \5s\1ed\5a \1............... gray\,
 9 ... sv\5w\1tle modr\5a \1....... light blue\,
10 ... sv\5w\1tle \5c\1erven\5a \1..... light red\,
11 ... sv\5w\1tle purpurov\5a \1... light magenta\,
12 ... sv\5w\1tle zelen\5a \1...... light green\,
13 ... sv\5w\1tle azurov\5a \1..... light cyan\,
14 ... sv\5w\1tle \5z\1lut\5a \1....... light yellow\,
15 ... sv\5w\1tle b\5i\1l\5a \1........ light white\,
\,
\,
\,\/
     P\5r\1i\5r\1azen\5i \1barev je d\5a\1no  obsahem  registru palet (PAL).\,
Jsou to  4 \5c\1ty\5r\1bitov\5e  \1registry  PAL0 - PAL3.  K\5o\1dem  palety\,
z VRAM se adresuje p\5ri\1slu\5s\1n\5y \1PAL, kter\5e\1ho obsah je k\5o\1d barvy\,
p\5ri\1slu\5s\1ej\5i\1c\5i \1dan\5e\1mu k\5o\1du palety.\,
     Toto v\5s\1echno  neplat\5i  \1pro DM2 (16 barev). V tomto m\5o\1du\,
jsou k\5o\1dy palet 0-15, registry  palet jsou v\5s\1ak jen 4. Proto\,
se v tomto m\5o\1du vyu\5zi\1v\5a \1dvoubitov\5y  \1registr SW. Obsah tohoto\,
registru se p\5r\1i zobrazov\5a\1n\5i \1porovn\5a \1s horn\5i\1mi dv\5w\1ma bity k\5o\1-\,
du palety (z rovin III a IV). Mohou nastat tyto p\5ri\1pady:\,
     1) Hodnoty jsou shodn\5e \1- potom spodn\5i \1dva bity (z rovin\,
        I a II) se pou\5z\1ij\5i \1jako adresa PAL, z kter\5e\1ho se vy-\,
        jme p\5ri\1slu\5s\1n\5y \1k\5o\1d barvy.\,
     2) Hodnoty se li\5si \1- k\5o\1d palety z rovin I a\5z \1IV se pou-\,
        \5z\1ije bez transformace jako k\5o\1d barvy.\,
\,
     Z popisu je z\5r\1ejm\5e\1, \5z\1e p\5r\1i\5r\1azov\5a\1n\5i \1k\5o\1d\5j \1barev k\5o\1d\5j\1m pa-\,
let nen\5i u\1pln\5e\1. Proto je  n\5w\1kdy  nejlep\5si  \1d\5a\1t do PAL jejich\,
vlastn\5i \1adresu, do SW  nulu a transformaci nevykon\5a\1vat. Toto\,
p\5r\1i\5r\1azov\5a\1n\5i \1je v\5y\1hodn\5e  \1p\5r\1i psan\5i  \1program\5j \1pro roz\5sir\1enou i\,
neroz\5sir\1enou VRAM.\,
     Z\5a\1pis do PAL a SW se prov\5a\1d\5i \1z\5a\1pisem na port 0F0h. Jed-\,
nou instrukc\5i \1OUT se pln\5i \1jeden registr. Struktura zapisova-\,
n\5e\1ho bajtu je n\5a\1sleduj\5i\1c\5i\1:\,
\,
     7      6      5      4      3      2      1      0\!\,
 \2u______i______i______i______i______i______i______i______o\,
 |   \10  \2|  \1SW  \2| \1adresa PAL  \2|          \1k\5o\1d barvy        \2|\,
 |      | \1bit  \2|   \1registru  \2|   \1I      G    R/SW1  R/SW0\2|\,
 n______m______m______m______m______m______m______m______,\"\,
\,
     \1Pokud je SW bit nulov\5y\1, zap\5is\1e  se k\5o\1d barvy (bity 0-3)\,
do registru pallet ur\5c\1en\5e\1ho adresou.\,
     Pokud je SW bit jedni\5c\1kov\5y\1,  nezapisuje se  do PAL nic,\,
ale zapisuj\5i \1se bity 0-1 do dvoubitov\5e\1ho registru SW.\,
\,
\,
     4.9.  Border\,
\,
     Obrazovka je vyu\5z\1ita jen z \5ca\1sti, na okraje se data ne-\,
zapisuj\5i\1. Tento okraj zvan\5y \1"border" GDG se zobrazuje v jed-\,
n\5e \1specifikovan\5e \1barv\5w\1. Border se zad\5a\1v\5a \1p\5ri\1mo v k\5o\1du barvy,\,
(ne v k\5o\1du palety) na I/O adresu 06CFH - nap\5r\1.:\,
\,
\,\/
        LD   BC,06CFH\,
        LD   A,k\5o\1d barvy 00 a\5z \10FH\,
        OUT  (C),A\,
\,
\,
     4.10.  Status obrazovky\,
\,
     Osmibitov\5y  \1status  obrazovky   se   p\5r\1e\5c\1te   instrukc\5i\,
\1IN A,(0CEH) z portu 0CEH (DMD). Nep\5r\1e\5c\1te se zapsan\5y \1m\5o\1d, ale\,
toto stavov\5e \1slovo:\,
\,
     7      6      5      4      3      2      1      0\!\,
 \2u______i______i______i______i______i______i______i______o\,
 |  \1synchronizace            \2|  \1nevyu\5z\1ito  \2| \1700/ \2| \1mel- \2|\,
 |       \1a zatem\5n\1ov\5a\1n\5i       \2|             |  \1800 \2|  \1syn \2|\,
 n______m______m______m______m______m______m______m______,\"\,
\,
\10.bit ... frekvence shodn\5a \1s frekv. \5c\1tenou z 0E008H v MZ-700\,
1.bit ... stav p\5r\1ep\5i\1na\5c\1e MZ-700 ON na zadn\5i\1m panelu (ON = 0)\,
4.bit ... sn\5i\1mkov\5a \1synchronizace\,
5.bit ... \5ra\1dkov\5a \1synchronizace\,
6.bit ... sn\5i\1mkov\5e \1zatem\5n\1ov\5a\1n\5i\,
\17.bit ... \5ra\1dkov\5e \1zatem\5n\1ov\5a\1n\5i\,
\,
     \1Bity 4 a\5z \17 jsou aktivn\5i \1v nule.\,
\,
\,
     4.11.  Scroll\,
\,
     Proto\5z\1e je kapacita  VRAM  dost vysok\5a  \1a pr\5a\1ce s n\5i \1je\,
pomalej\5si  \1jako  s RAM, nen\5i  \1efektivn\5i  \1vykon\5a\1vat  rolov\5a\1n\5i\,
\1softwarov\5w\1. Za t\5i\1mto \5uc\1elem vykon\5a\1v\5a \1GDG slo\5z\1it\5w\1j\5si \1konverze\,
adres do VRAM podle nastaven\5y\1ch scroll registr\5j\1.\,
\,
\,
     4.11.1.  Scroll registry\,
\,
SSA ... "scroll start adress" (7 bit\5j\1) - ur\5c\1uje m\5i\1sto po\5ca\1t-\,
        ku  rolov\5a\1n\5i \1na obrazovce.  Skute\5c\1n\5a  \1adresa SSA$ se\,
        spo\5c\1te: SSA$ = SSA * 64  v m\5o\1d\5w \1320x200 a  SSA * 128\,
        v m\5o\1d\5w \1640x200 bod\5j\1.\,
SEA ... "scroll end adress" (7 bit\5j\1) - ur\5c\1uje m\5i\1sto na obra-\,
        zovce, kde u\5z \1nebude prob\5i\1hat scroll. Skute\5c\1n\5a \1adre-\,
        sa SEA$ se ur\5ci \1stejn\5w \1jako pro SSA$.\,\/
SW .... "scroll with register" (7 bit\5j\1)  -    ur\5c\1uje   \5sir\1ku\,
        scrollovan\5e\1ho pole - nab\5y\1v\5a \1hodnotu rozd\5i\1lu SEA-SSA.\,
        V\5y\1po\5c\1et skute\5c\1n\5e \1adresy SW$ jako p\5r\1i SSA$, SEA$.\,
SOF ... "scroll offset register" (10 bit\5j\1) - ur\5c\1uje, o kolik\,
        se posunou logick\5e \1(scrollovac\5i\1) adresy oproti adre-\,
        s\5a\1m do VRAM. Skute\5c\1n\5a \1hodnota je SOF * 8 pro 320x200\,
        resp. SOF * 16 pro 640x200.\,
\,
\,
\,
     4.11.2  Pln\5w\1n\5i \1scroll registr\5j\,
\,
     \1Doporu\5c\1ujeme ulo\5z\1it scroll registry v pam\5w\1ti takto:\,
\,
        SREG:   DEFW    SOF\,
                DEFB    SW\,
                DEFB    SSA\,
                DEFB    SEA\,
\,
a fyzicky je plnit jen v pr\5j\1b\5w\1hu sn\5i\1mkov\5e\1ho zatemn\5w\1n\5i \1takto:\,
\,
                LD      C,0CFH\,
                LD      HL,SREG\,
                LD      B,6\,
                OTIR\,
\,
\,
     4.11.3.  Rozd\5w\1len\5i \1obrazovky\,
\,
     Po\5ci\1ta\5c \1disponuje  vertik\5a\1ln\5i\1m i horizont\5a\1ln\5i\1m  rolov\5a\1-\,
n\5i\1m.  Jejich   \5ri\1zen\5i  \1je  rovnocen\5e\1.  Jedn\5a  \1se  o line\5a\1rn\5i\,
\1scrolling, kter\5y \1se za ur\5c\1it\5y\1ch podm\5i\1nek jev\5i \1jako vertik\5a\1l-\,
n\5i\1, horizont\5a\1ln\5i \1nebo sm\5is\1en\5y\1. P\5r\1i scrollu je mo\5z\1n\5e \1rozd\5w\1lit\,
VRAM na oblasti:\,
\,
     (A) - od za\5ca\1tku VRAM po adresu SSA$-1\,
     (B) - od adresy SSA$ po adresu SEA$-1 (roluje)\,
     (C) - od adresy SEA$ do konce VRAM.\,
\,
     Znak $ za n\5a\1zvem registru znamen\5a\1, \5z\1e se uva\5z\1uje ne je-\,
ho p\5ri\1m\5a \1hodnota, ale v\5y\1znam, t.j. adresa do VRAM.\,
\,
\,\/
     4.11.4.  Za\5ca\1tek a konec scroll oblasti\,
\,
     Je z\5r\1ejm\5e\1, \5z\1e adresy SSA$ a SEA$  nemohou nab\5y\1vat libo-\,
voln\5y\1ch  hodnot, ale  jen  n\5a\1sobky  64 resp. 128. Oblast (B)\,
tedy nem\5jz\1e za\5ci\1nat ani kon\5c\1it na kter\5e\1mkoliv grafick\5e\1m \5ra\1d-\,
ku, ale jen na za\5ca\1tku textov\5y\1ch \5ra\1dk\5j \1(ka\5z\1d\5y \1osm\5y \1grafick\5y\1).\,
Tento stav nastane, pokud SEA resp. SSA budou n\5a\1sobkem p\5w\1ti.\,
\5Ci\1slo prvn\5i\1ho textov\5e\1ho  scrollovan\5e\1ho \5ra\1dku je potom SSA/5,\,
\5ci\1slo posledn\5i\1ho  SEA/5-1.\,
\,
     Pokud  nebude  jeden  z  registr\5j  \1n\5a\1sobkem  p\5w\1ti, bude\,
oblast (B) za\5ci\1nat  n\5w\1kde  uvnit\5r  ra\1dku - nem\5a  \1v\5y\1znam  pro\,
praktick\5e \1vyu\5z\1it\5i\1.\,
\,
\,
     4.11.5.  Vykon\5a\1n\5i \1scrollu\,
\,
     Povaha a velikost scrollu je v ka\5z\1d\5e\1m  okam\5z\1iku  ur\5c\1ena\,
hodnotou  SOF z intervalu <0, SW * 8>, pokud je (B) p\5r\1es ce-\,
lou obrazovku, tak je <0, 1000>.\,
     Pokud je SOF  celo\5ci\1seln\5y\1m  n\5a\1sobkem  p\5w\1ti, jedn\5a  \1se o\,
vertik\5a\1ln\5i \1scroll, pokud je men\5si \1me\5z \15, jedn\5a \1se o horizon-\,
t\5a\1ln\5i \1scroll, v ostatn\5i\1ch p\5ri\1padech je to scroll kombinovan\5y\1.\,
\,
\,
     4.11.6.  Rolov\5a\1n\5i \1o \5ra\1dek\,
\,
     Pokud chceme odrolovat o 1 grafick\5y  ra\1dek nahoru, pro-\,
vedeme: SOF = SOF + 5, pokud  dol\5j \1tak SOF = SOF - 5. Samoz-\,
\5r\1ejm\5w\1, \5z\1e se SOF mus\5i \1upravit tak, aby byl men\5si \1ne\5z \1SW * 8.\,
     P\5r\1i rolov\5a\1n\5i \1o textov\5y ra\1dek je SOF = SOF + 40 ( -40 ).\,
\,
\,
        5.  MONITOR 1Z-013B = DOLN\5I \1MONITOR\,
\,
     P\5j\1vodn\5i  \1vstupn\5i  \1bod  monitoru  pou\5zi\1van\5y \1v MZ-700 byl\,
004AH. Tento je pro MZ-800  nepou\5z\1iteln\5y\1, proto\5z\1e se tu jako\,
jedna z v\5w\1c\5i \1p\5r\1i inicializaci  testuje adresa 0E800H a pokud\,
je tu ROM, je na adresu 0E800H  p\5r\1ed\5a\1no  \5ri\1zen\5i\1. V MZ-700 se\,
p\5r\1ed\5a\1valo \5ri\1zen\5i \1p\5ri\1padn\5e\1mu  ROM packu, v MZ-800 je to spu\5s\1-\,
t\5w\1n\5i \1horn\5i\1ho monitoru 9Z-504M.\,
     Pro p\5r\1ed\5a\1n\5i ri\1zen\5i \1do  doln\5i\1ho monitoru je proto vhodn\5e\,
\1pou\5zi\1t ]PRMPT (00ADH), tedy vstup na prompt doln\5i\1ho monitoru.\,\/
\,
     5.1.  P\5r\1ehled p\5ri\1kaz\5j \1doln\5i\1ho monitoru\,
\,
\,
     5.1.1.  J = Jump\,
\,
     Jxxxx p\5r\1ed\5a ri\1zen\5i \1na adresu xxxxH.\,
\,
\,
     5.1.2.  L = Load\,
\,
     P\5r\1e\5c\1te program  z kazety a p\5r\1ed\5a  \1mu \5ri\1zen\5i\1. Ne\5c\1te pro-\,
gram na standardn\5i  \1zav\5a\1d\5w\1c\5i  \1adresy jako horn\5i \1monitor, ale\,
na skute\5c\1n\5e \1zav\5a\1d\5w\1c\5i \1adresy p\5ri\1slu\5s\1n\5e\1ho programu. Program je\,
odstartov\5a\1n jen pokud je jeho adresa v\5w\1t\5si \1nebo rovna 1200H.\,
V opa\5c\1n\5e\1m  p\5ri\1pad\5w \1je p\5r\1ed\5a\1no  \5ri\1zen\5i  \1zp\5w\1t  monitoru. T\5i\1mto\,
p\5ri\1kazem nen\5i \1mo\5z\1n\5e ci\1st programy pod ROMku.\,
\,
\,
     5.1.3.  F = F????\,
\,
     Pokud je obsah adresy 0F00H nuliov\5y\1, tak tam sko\5ci\1, ji-\,
nak se vrac\5i \1na  prompt  monitoru.  V  MZ-800  nem\5a  \1v\5y\1znam.\,
V MZ-700 slou\5zi  \1pravd\5w\1podobn\5w  \1pro p\5r\1ed\5a\1n\5i ri\1zen\5i \1ROM PACKu\,
pro obsluhu FD: resp. QD:.\,
\,
\,
     5.1.4.  B = Beep ON/OFF\,
\,
     Zapne/vypne akustick\5y \1sign\5a\1l po stisku ka\5z\1d\5e \1kl\5a\1vesy.\,
\,
\,
     5.1.5.  $ = Restart\,
\,
     Namapuje v\5s\1ude pam\5wt \1RAM a sko\5ci \1na adresu 0000H. Zni\5ci\,
\1t\5i\1m  oblast pam\5w\1ti od 0FFF0H do 0FFF5H. Efekt je stejn\5y \1jako\,
p\5r\1i CTRL + RESET.\,
\,
\,
\,
\,
\,
\,\/
     5.1.6.  M = Modify\,
\,
     Mxxxx umo\5z\1n\5i \1m\5w\1nit a prohl\5iz\1et  obsah  pam\5w\1ti od adresy\,
xxxxH d\5a\1le. Prov\5a\1d\5w\1n\5i \1se zru\5si  \1SHIFT + BREAK. Pokus o z\5a\1pis\,
nespr\5a\1vn\5e \1hodnoty ignoruje a vy\5z\1aduje spr\5a\1vnou hodnotu.\,
\,
\,
     5.1.7.  P = Printer service\,
\,
     Obsluha ploter printer (MZ-1P16):\,
\,
&L ... p\5r\1epnut\5i \1na 60 znak\5j \1na \5ra\1dek\,
&S ... p\5r\1epnut\5i \1na 80 znak\5j \1na \5ra\1dek\,
&C ... v\5y\1m\5w\1na pera\,
&G ... p\5r\1epnut\5i \1do grafick\5e\1ho re\5z\1imu\,
&T ... p\5r\1epnut\5i \1do textov\5e\1ho re\5z\1imu\,
text . vytiskne text\,
\,
     Povely n\5a\1sleduj\5i  \1t\5w\1sn\5w \1za p\5ri\1kazem P, po povelech &L a\,
&S m\5jz\1e n\5a\1sledovat pouze text, za ostatn\5i\1mi  text nebo dal\5si\,
\1povel. Za textem  nesm\5i \1n\5a\1sledovat povel - byl by vytisknut\5y\,
\1jako sou\5ca\1st textu.\,
     P\5ri\1klad: P&T&C&SAHOJ - p\5r\1epne  do textov\5e\1ho re\5z\1imu, vy-\,
m\5w\1n\5i \1pero a v m\5o\1du 80 znak\5j \1na \5ra\1dek nap\5is\1e AHOJ.\,
\,
\,
     5.1.8.  S = Save\,
\,
     Ulo\5z\1en\5i \1souboru na p\5a\1sku. Typ  je  v\5z\1dy 01H (tedy OBJ).\,
Na jm\5e\1no, po\5ca\1te\5c\1n\5i\1, kone\5c\1nou a startovac\5i \1adresu se pt\5a\1.\,
\,
\,
     5.1.9.  D = Dump\,
\,
     Dxxxxyyyy vyp\5is\1e obsah pam\5w\1ti od xxxxH do yyyyH ve tvaru\,
HEXA + ASCII. Pokud nen\5i \1uvedeno yyyy, uva\5z\1uje se 160 B.\,
\,
\,
\,
\,
\,
\,
\,\/
     5.2. N\5w\1kter\5e \1podprogramy monitoru\,
\,
\,
     5.2.1.  [HLHEX 013DH\,
\,
     Zprost\5r\1edkuje  vol\5a\1n\5i  \1podprogramu  HLHEX  (0410H). P\5r\1i\,
chybov\5e\1m n\5a\1vratu p\5ri\1mo odevzd\5a ri\1zen\5i \1na prompt monitoru.\,
\,
\,
     5.2.2.  [GETL  012FH\,
\,
     Zavol\5a \1GETL (0003H) s nastaven\5y\1m  standartn\5i\1m pracovn\5i\1m\,
prostorem IOBUF (11A3H). Pokud  zjist\5i \1ukon\5c\1en\5i \1vstupu textu\,
kl\5a\1vesou SHIFT+BREAK, odevzd\5a ri\1zen\5i \1monitoru.\,
\,
\,
     5.2.3.  [PCHAR 018FH\,
\,
     Tisk znaku na tisk\5a\1rnu. Na BREAK n\5a\1vrat do monitoru.\,
\,
\,
     5.2.4.  [PTEXT 01A5H\,
\,
     Tisk textu na tisk\5a\1rnu. Text za\5ci\1n\5a \1na adrese DE a kon-\,
\5ci \1znakem <CR> (0DH), kter\5y \1ji\5z \1netiskne. Chr\5a\1n\5i \1v\5s\1echny re-\,
gistry. BREAK kon\5ci \1v doln\5i\1m monitoru.\,
\,
\,
\,
        6.  OBRAZOVKA\,
\,
\,
     6.1.  P\5r\1ipojen\5i \1CRT\,
\,
     O \5ri\1zen\5i \1zobrazov\5a\1n\5i \1se v MZ-800 star\5a \1z\5a\1kaznick\5y \1obvod\,
GDG (100-pin single chip LSI), kter\5y  \1zaji\5st\1uje  t\5ez  \1memory\,
management.\,
     Programov\5e \1vybaven\5i \1v ROM pracuje s obrazovkou t\5i\1m nej-\,
jednodu\5ssi\1m  zp\5j\1sobem, v MZ-700 m\5o\1du,  kdy je VRAM alfanume-\,
rick\5a \1a obsahuje  gener\5a\1tor  znak\5j\1. Ten je tam p\5r\1i instalaci\,
okop\5i\1rov\5a\1n ze sv\5e\1ho vzoru v ROM.\,
\,
\,\/
     6.2.  Uspo\5ra\1d\5a\1n\5i \1VRAM v MZ-700 m\5o\1du\,
\,
     Obrazovka v MZ-700 m\5o\1du m\5a \125 \5ra\1dek a 40 znak\5j \1na \5ra\1dek.\,
Ka\5z\1d\5e\1mu m\5i\1stu p\5ri\1slu\5si \12 bajty ve VRAM, jeden v textov\5e ca\1s-\,
ti od D000H a druh\5y \1v \5ca\1sti atribut\5j \1od D800H. Ob\5w ca\1sti za-\,
uj\5i\1maj\5i \11000 bajt\5j\1, jsou ve VRAM ulo\5z\1eny souvisle po \5ra\1dc\5i\1ch.\,
Zb\5y\1vaj\5i\1c\5i\1ch 1048 bajt\5j  \1v textov\5e \1a v  atributov\5e ca\1sti nen\5i\,
\1vyu\5z\1ito. Syst\5e\1m je v\5s\1ak ma\5z\1e s celou obrazovkou.\,
\,
0000H   \2u_______________o\!\,
        |               |\,
        | \1nen\5i \1vyu\5z\1ito  \2|\,
        |               |\,
\12000H   \2j_______________k \1- - - - C000H\,
        \2| \1gener\5a\1tor     \2|\,
        |       \1znak\5j   \2|\,
\13000H   \2j_______________k \1- - - - D000H\,
        \2|   \1t e x t     \2|\,
        j_______________k \1- - - - D800H\,
        \2|   \1atributy    \2|\,
\13FFFH   \2n_______________, \1- - - - DFFFH\"\,
\,
\,
     6.2.1. Tvar atributu\,
\,
     Ka\5z\1d\5e\1mu  znaku  na obrazovce  je mo\5z\1n\5e  \1nadefinovat dv\5w\,
\1barvy: barvu pop\5r\1ed\5i \1a barvu pozad\5i\1. V MZ-700 m\5o\1du je k dis-\,
pozici v\5y\1b\5w\1r z osmi barev s n\5a\1sleduj\5i\1c\5i\1mi k\5o\1dy:\,
\,
- - -  ...  0 ... \5c\1ern\5a\,
\1- - B  ...  1 ... modr\5a\,
\1- R -  ...  2 ... \5c\1erven\5a\,
\1- R B  ...  3 ... purpurov\5a \1(\5c\1erven\5a \1+ modr\5a\1)\,
G - -  ...  4 ... zelen\5a\,
\1G - B  ...  5 ... azurov\5a \1(zelen\5a \1+ modr\5a\1)\,
G R -  ...  6 ... \5z\1lut\5a \1(\5c\1erven\5a \1+ zelen\5a\1)\,
G R B  ...  7 ... b\5i\1l\5a\,
\,
     \17      6      5      4      3      2      1      0\!\,
 \2u______i______i______i______i______i______i______i______o\,
 |\1gene- \2|                    |      |                    |\,
 |\1r\5a\1tor \2|   \1k\5o\1d barvy znaku  \2|      |  \1k\5o\1d barvy pozad\5i  \2|\,
 |\1znak\5j \2|   \1G      R      B  \2|      |   \1G      R      B  \2|\,
 n______m______m______m______m______m______m______m______,\"\,
\,
\,
\,
\,\/
     \16.3.  Gener\5a\1tor znak\5j\,
\,
     \1Gener\5a\1tor znak\5j \1CGROM zauj\5i\1m\5a \14 KB pam\5w\1ti ROM namapova-\,
n\5e \1na adresy 1000H - 1FFFH.\,
\,
\,
     6.3.1.  Struktura gener\5a\1toru\,
\,
     Ka\5z\1d\5y \1znak je v gener\5a\1toru  reprezentovan\5y  \1osmi bajty.\,
Tyto bajty tvo\5ri \1matici 8x8 bod\5j\1, do kter\5y\1ch  se rozkresluje\,
ka\5z\1d\5y \1znak. Bajty se ukl\5a\1daj\5i \1na CRT horizont\5a\1ln\5w\1, zhora do-\,
l\5j \1s opa\5c\1n\5y\1m sledem bit\5j \1(7.bit je vpravo). Jedni\5c\1ka v gene-\,
r\5a\1toru znamen\5a \1bod p\5ri\1slu\5s\1ej\5i\1c\5i \1znaku, nula je pozad\5i\1.\,
     Nap\5r\1.: znak  0F1H  z  1.gener\5a\1toru  (pseudografick\5y \1bod\,
v lev\5e\1m horn\5i\1m rohu) je v gener\5a\1toru  ulo\5z\1en jako 7,7,7,0,0,\,
0,0,0.\,
\,
\,
     6.3.2.  Obsah gener\5a\1toru\,
\,
     Gener\5a\1tor se skl\5a\1d\5a  \1ze dvou sad po 256 znac\5i\1ch, celkem\,
je tam tedy  512 znak\5j\1. Znaky  nejsou  ulo\5z\1eny  v gener\5a\1toru\,
podle k\5o\1du  ASCII, ale podle  tzv. display k\5o\1du. P\5r\1esto v\5s\1ak\,
gener\5a\1tor  obsahuje v\5s\1echny znaky ASCII a nav\5i\1c \5u\1plnou pseu-\,
dografiku 80x50 bod\5j\1.\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,\/
\,
\,
Tabulky gener\5a\1toru znak\5j\1:\,
\,
\,
\,
Prvn\5i \1sada (z\5a\1kladn\5i\1) :\,
\,
    \2u___i___i___i___i___i___i___i___i___i___i___i___i___i___i___i___o\!\,
    | \10 \2| \11 \2| \12 \2| \13 \2| \14 \2| \15 \2| \16 \2| \17 \2| \18 \2| \19 \2| \1A \2| \1B \2| \1C \2| \1D \2| \1E \2| \1F \2|\,
u___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___o\,
| \10 \2|   | \1A \2| \1B \2| \1C \2| \1D \2| \1E \2| \1F \2| \1G \2| \1H \2| \1I \2| \1J \2| \1K \2| \1L \2| \1M \2| \1N \2| \1O \2| \10 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \11 \2| \1P \2| \1Q \2| \1R \2| \1S \2| \1T \2| \1U \2| \1V \2| \1W \2| \1X \2| \1Y \2| \1Z \2|   |   |   |   |   | \11 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \12 \2| \10 \2| \11 \2| \12 \2| \13 \2| \14 \2| \15 \2| \16 \2| \17 \2| \18 \2| \19 \2|   |   |   |   |   |   | \12 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \13 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \13 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \14 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \14 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \15 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \15 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \16 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \16 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \17 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \17 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \18 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \18 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \19 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \19 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1A \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1A \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1B \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1B \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1C \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1C \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1D \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1D \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1E \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1E \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1F \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1F \2|\,
n___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___,\,
    | \10 \2| \11 \2| \12 \2| \13 \2| \14 \2| \15 \2| \16 \2| \17 \2| \18 \2| \19 \2| \1A \2| \1B \2| \1C \2| \1D \2| \1E \2| \1F \2|\,
    n___m___m___m___m___m___m___m___m___m___m___m___m___m___m___m___,\"\,
\,
\,
\,
\,
\,
\,
\,
\,
\,
\,\/
\,
\-\1Druh\5a \1sada:
\,
    \2u___i___i___i___i___i___i___i___i___i___i___i___i___i___i___i___o\!\,
    | \10 \2| \11 \2| \12 \2| \13 \2| \14 \2| \15 \2| \16 \2| \17 \2| \18 \2| \19 \2| \1A \2| \1B \2| \1C \2| \1D \2| \1E \2| \1F \2|\,
u___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___o\,
| \10 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \10 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \11 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \11 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \12 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \12 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \13 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \13 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \14 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \14 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \15 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \15 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \16 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \16 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \17 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \17 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \18 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \18 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \19 \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \19 \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1A \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1A \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1B \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1B \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1C \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1C \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1D \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1D \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1E \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1E \2|\,
j___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___k\,
| \1F \2|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | \1F \2|\,
n___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___+___,\,
    | \10 \2| \11 \2| \12 \2| \13 \2| \14 \2| \15 \2| \16 \2| \17 \2| \18 \2| \19 \2| \1A \2| \1B \2| \1C \2| \1D \2| \1E \2| \1F \2|\,
    n___m___m___m___m___m___m___m___m___m___m___m___m___m___m___m___,\"\,
\,
     \16.3.3.  Gener\5a\1tor znak\5j \1CGRAM\,
\,
     Na po\5ci\1ta\5c\1i MZ-700  CGRAM nebyla. Z\5a\1kaznick\5y \1obvod pra-\,
coval p\5ri\1mo s CGROM. U\5z\1ivatel si nemohl znaky m\5w\1nit.\,
     MZ-800 pou\5zi\1v\5a \1CGROM jenom jako vzor. Vlastn\5i \1gener\5a\1tor\,
je v CGRAM. Mapuje se  na adresy C000-CFFFH  t\5w\1sn\5w \1pod VRAM.\,
Po inicializaci se p\5r\1enese obsah CGROM do CGRAM. U\5z\1ivatelsk\5e\,
\1programy si potom mohou znaky v CGRAM m\5w\1nit. CGRAM m\5a \1stejnou\,
strukturu jak CGROM. Software se v MZ-700  m\5o\1du o rozkreslo-\,
v\5a\1n\5i \1nestar\5a\1, tuto \5c\1innost p\5r\1ep\5i\1r\5a  \1obvod GDG  podle display\,
k\5o\1du znaku nalezen\5e\1ho ve VRAM a podle CGRAM. Kter\5a \1sada zna-\,
k\5j \1se pou\5z\1ije, je ur\5c\1eno 7.bitem atributu.\,
     V re\5z\1imu MZ-800 je CGRAM vyu\5zi\1v\5a\1na  jako  sou\5ca\1st VRAM.\,
U\5z\1ivatel si mus\5i \1znaky  rozkreslovat s\5a\1m z CGROM nebo pou\5zi\1t\,
vlastn\5i \1gener\5a\1tor znak\5j\1.\,\/
     6.4.  Podprogramy pro pr\5a\1ci s CRT\,
\,
     Vstupn\5i  \1vektor MZ-700  obsahuje celou sadu podprogram\5j\,
\1pro  v\5y\1stup  znaku a textu. V\5s\1echny  tyto podprogramy chr\5a\1n\5i\,
\1registry  krom\5w \1AF. P\5r\1edpokl\5a\1daj\5i  \1namapov\5a\1n\5i \1VRAM od D000H.\,
Gener\5a\1tor znak\5j \1nem\5w\1n\5i \1a ani to nedovedou. P\5r\1esto\5z\1e hardware\,
dovoluje pou\5zi\1t a\5z \1osm barev, rutiny v ROM pou\5zi\1vaj\5i \1jen dv\5w\,
\1- b\5i\1l\5e \1znaky na modr\5e\1m podklad\5w\1.\,
     Podprogramy  vyu\5zi\1vaj\5i  \1tabulku  !ATBLN  (1137H), kter\5a\,
\1spojuje fyzick\5e ra\1dky  na obrazovce do logick\5y\1ch. Tabulka m\5a\,
\1d\5e\1lku odpov\5i\1daj\5i\1c\5i \1po\5c\1tu \5ra\1dk\5j\1. Nula v p\5ri\1slu\5s\1n\5e\1m \5ra\1dku zna-\,
men\5a\1, \5z\1e \5ra\1dek je zahajovac\5i\1, jedni\5c\1ka  indikuje pokra\5c\1ov\5a\1n\5i\,
ra\1dku (m\5a \1v\5y\1znam pro INSERT, DELETE, SCROLL, @GETL). Spojen\5e\,
\1mohou v\5y\1t max. dva \5ra\1dky. Spojen\5i \1se  dos\5a\1hne  z\5a\1pisem znaku\,
do posledn\5i\1ho sloupce obrazovky.\,
\,
\,
     6.4.1.  @LETNL 0006H               ni\5ci \1AF\,
\,
     Provede p\5r\1echod na nov\5y  ra\1dek obrazovky. V p\5ri\1pad\5w \1po-\,
t\5r\1eby odroluje.\,
\,
\,
     6.4.2.  @IFNL? 0009H               ni\5ci \1AF\,
\,
     Pokud je kurzor  na nult\5e  \1pozici v \5ra\1dku, neud\5w\1l\5a \1nic.\,
Pokud je kdekoliv jinde, provede LETNL.\,
\,
\,
     6.4.3.  @PRNTS 000CH       ni\5ci \1AF\,
\,
     Vytiskne mezeru.\,
\,
\,
     6.4.4.  @TAB 000FH                 ni\5ci \1AF\,
\,
     Tabeluje na dal\5si \1tabela\5c\1n\5i \1pozici (po 10 znac\5i\1ch podle\,
logick\5e\1ho ukazatele).\,
\,
     6.4.5.  @PRNTC 0012H               ni\5ci \1F\,
\,
     Vytiskne znak, kter\5y  \1je v registru A v ASCII k\5o\1du. Pro\,
\5ri\1d\5i\1c\5i \1znaky zavol\5a \1DPCT. Obnov\5i \1obsah registru A.\,\/
     6.4.6.  @MSG 0015H                 chr\5a\1n\5i \1v\5s\1echny reg.\,
\,
     Vytiskne  \5r\1et\5w\1zec  znak\5j\1, kter\5y  \1za\5ci\1n\5a  \1na adrese DE a\,
kon\5ci \1znakem <CR> (0DH). Text  m\5jz\1e  obsahovat \5ri\1d\5i\1c\5i \1znaky,\,
kter\5e \1se vykonaj\5i\1.\,
\,
\,
     6.4.7.  @RST18 0018H               chr\5a\1n\5i \1v\5s\1echny reg.\,
\,
     Jako MSG, \5ri\1d\5i\1c\5i \1znaky se v\5s\1ak neprovedou, ale zobraz\5i\1.\,
\,
\,
     6.4.8.  @?DPCT 0DDCH               chr\5a\1n\5i \1v\5s\1echny reg.\,
\,
     Na tyto \5ri\1d\5i\1c\5i  \1k\5o\1dy  vykon\5a  \1n\5a\1sleduj\5i\1c\5i \1akce, ostatn\5i\,
\1k\5o\1dy se ignoruj\5i\1:\,
\,
C0 .... SCROLL\,
C1 .... CURSOR DOWN\,
C2 .... CURSOR UP\,
C3 .... CURSOR RIGHT\,
C4 .... CURSOR LEFT\,
C5 .... HOME\,
C6 .... CLEAR SCREEN\,
C7 .... DELETE\,
C8 .... INSERT\,
C9 .... SET ALPHANUMERIC MODE\,
CA .... SET GRAPHIC MODE\,
CB .... NEVYU\5Z\1ITO\,
CC .... NEVYU\5Z\1ITO\,
CD .... CARRIAGE RETURN\,
CE .... NEVYU\5Z\1ITO\,
CF .... NEVYU\5Z\1ITO\,
\,
\,
     6.4.9.  @BTHEX 03C3H               ni\5ci \1AF\,
\,
     Vyp\5is\1e obsah registru A v \5s\1estn\5a\1ctkov\5e \1soustav\5w\1.\,
\,
     6.4.10.  @MHEX 03B1H               ni\5ci \1AF\,
\,
     Vyp\5is\1e obsah pam\5w\1ti adresovan\5e \1HL  v \5s\1estn\5a\1ctkov\5e \1sous-\,
tav\5w \1a mezeru. V registru A vrac\5i \1hodnotu, kterou tisknul.\,\/
     6.4.11.  @HLHEX 03BAH              ni\5ci \1AF\,
\,
     Vyp\5is\1e obsah  registrov\5e\1ho p\5a\1ru HL  v \5s\1estn\5a\1ctkov\5e \1sou-\,
stav\5w\1.\,
\,
\,
     6.4.12.  @?NLHL 05FAH\,
\,
     Zavol\5a  \1IFNL? a HEXHL. Vyp\5is\1e  obsah HL  v \5s\1estn\5a\1ctkov\5e\,
\1soustav\5w \1na nov\5y ra\1dek.\,
\,
\,
     6.4.13.  @?POINT 0FB1H             ni\5ci \1HL\,
\,
     Vr\5a\1t\5i \1v HL adresu kurzoru (fyzick\5a \1adresa ve VRAM). Lo-\,
gick\5a \1adresa je ulo\5z\1ena  na adrese 1171H a 1172H v tvaru \5ra\1-\,
dek/sloupec.\,
\,
\,
     6.4.14.  @?ACUR 0FB4H\,
\,
     O\5c\1ek\5a\1v\5a \1v HL pozici kurzoru  v tvaru H-\5ra\1dek L-sloupec,\,
a vrac\5i \1v HL tuto  adresu  p\5r\1epo\5c\1tenou  na skute\5c\1nou  adresu\,
ve VRAM.\,
\,
\,
     6.4.15.  @CURON 0B92H\,
\,
     Zobraz\5i \1kurzor a znak, kter\5y \1byl pod n\5i\1m uklid\5i \1do sys-\,
t\5e\1mov\5y\1ch prom\5w\1nn\5y\1ch na adresu AKCHAR (118EH).\,
\,
\,
     6.4.16.  @CUROF  05F0H\,
\,
     Na m\5i\1sto  kurzoru  zobraz\5i \1spr\5a\1vn\5y \1znak z adresy AKCHAR\,
(118EH).\,
\,
\,
     6.4.17.  @BLIKC  09E3H\,
\,
     Podle stavu PC6 I8255 dosad\5i \1na m\5i\1sto  kurzoru bu\5d \1znak\,
kurzoru nebo znak, kter\5y \1tam m\5a \1b\5y\1t (blik\5a\1n\5i \1s kurzorem).\,
\,\/
     6.4.18.  @AVRAM  0DB5H\,
\,
     Zapisuje obsah registru A do VRAM a  posune  kurzor o 1\,
znak doprava (vyu\5zi\1v\5a \1rutinu CURSOR RIGHT z DPCT).\,
\,
\,
     6.4.19.  @?ADCN  0BB9H             ni\5ci \1AF\,
\,
     P\5r\1evede znak v registru A z ASCII k\5o\1du do k\5o\1du displeje.\,
\,
\,
     6.4.20.  @?DACN  0BCEH             ni\5ci \1AF\,
\,
     P\5r\1evede znak v registru A z k\5o\1du dipleje do ASCII k\5o\1du.\,
\,
\,
     6.4.21.  @PRNTA  096CH\,
\,
     Pomoc\5i \1AVRAM zobraz\5i \1znak a posune CSRH (1194H)-logick\5a\,
\1pozice znaku na \5ra\1dku.\,
\,
\,
     6.4.22.  @ICSRH  096FH\,
\,
     Posune CSRH, p\5r\1i  p\5r\1ekro\5c\1en\5i  \1maxim\5a\1ln\5i \1d\5e\1lky logick\5e\1ho\,
\5ra\1dku (80 znak\5j\1) ho vynuluje.\,
\,
\,
        7. KL\5A\1VESNICE\,
\,
     7.1.  P\5r\1ipojen\5i \1kl\5a\1vesnice\,
\,
     KL\5a\1vesnice je p\5r\1ipojena p\5r\1es obvod I8255, z kter\5e\1ho vy-\,
u\5zi\1v\5a \1bity PA0-PA3 pro  v\5y\1b\5w\1r  \5ra\1dku  matice  kl\5a\1ves a celou\,
br\5a\1nu B pro vstup dat. Strobe kl\5a\1vesnice je p\5r\1iveden\5y \1z PA0-\,
-PA3 na vstup obvodu pro v\5y\1b\5w\1r 1 z 10 a a\5z \1potom  na v\5y\1stupu\,
tohoto obvodu je matice kl\5a\1vesnice. Bity PA4-PA7 se mus\5i \1p\5r\1i\,
strobe  nastavit na jedni\5c\1ku, proto\5z\1e slou\5zi \1k ovl\5a\1d\5a\1n\5i \1joy-\,
sticku. Z tohoto  d\5j\1vodu je t\5ez  \1vhodn\5e  \1nastavovat PA  p\5r\1ed\,
ka\5z\1d\5y\1m \5c\1ten\5i\1m z PB. Nen\5i  \1mo\5z\1n\5e \1se spol\5e\1hat na to, \5z\1e nebude\,
zm\5w\1n\5w\1n\5y\1. Data p\5r\1e\5c\1ten\5e \1z PB odpov\5i\1daj\5i \1stavu kl\5a\1ves vybran\5e\1-\,
ho sloupce v okam\5z\1iku \5c\1ten\5i\1. Logika  je na tomto portu nega-\,
tivn\5i\1, jedni\5c\1ka odpov\5i\1d\5a \1nestisknut\5e \1kl\5a\1vese, nula stisknut\5e\1.\,\/
     PA je na adrese 0D0H resp. E000H, PB na 0D1H resp.E001H.\,
Podprogram  pro zi\5s\1t\5w\1n\5i\1, zda je stisknuta  kl\5a\1vesa v sloupci\,
II a na \5ra\1dku JJ by mohl vypadat takto:\,
\,
                OUT     (0D0H),II.or.11110000B\,
                IN      A,(0D1H)\,
                BIT     JJ,A\,
                JP      Z,kl\5a\1vesa stisknuta\,
\!\,
\-
     7.2. Sch\5e\1ma uspo\5ra\1d\5a\1n\5i \1kl\5a\1vesnice\"\,
   \.\.\.\.\.\.\.\5Ci\1slo sloupce (v\5y\1stup na port E000H/D0H, bity 0 a\5z \13):\,
         0     1     2     3     4     5     6     7     8     9\!\,
\-
      \2u_____i_____i_____i_____i_____i_____i_____i_____i_____i_____o\,
\1bit 7 \2|\1blank\2|  \1Y  \2|  \1Q  \2|  \1I  \2|  \1A  \2|  \11  \2|  \1\\  \2|\1INST \2|\1BREAK\2| \1F1  \2|\,
      j_____+_____+_____+_____+_____+_____+_____+_____+_____+_____k\,
\1bit 6 \2|\1GRAPH\2|  \1Z  \2|  \1R  \2|  \1J  \2|  \1B  \2|  \12  \2|  \1^  \2| \1DEL \2|\1CTRL \2| \1F2  \2|\,
      j_____+_____+_____+_____+_____+_____+_____+_____+_____+_____k\,
\1bit 5 \2|  \7$  \2|  \1@  \2|  \1S  \2|  \1K  \2|  \1C  \2|  \13  \2|  \1-  \2|  \4^  \2|     | \1F3  \2|\,
      j_____+_____+_____+_____+_____+_____+_____+_____+_____+_____k\,
\1bit 4 \2|\1ALPHA\2|  \1[  \2|  \1T  \2|  \1L  \2|  \1D  \2|  \14  \2|\1space\2|  \4&  \2|     | \1F4  \2|\,
      j_____+_____+_____+_____+_____+_____+_____+_____+_____+_____k\,
\1bit 3 \2| \1TAB \2|  \1]  \2|  \1U  \2|  \1M  \2|  \1E  \2|  \15  \2|  \10  \2|  \4>  \2|     | \1F5  \2|\,
      j_____+_____+_____+_____+_____+_____+_____+_____+_____+_____k\,
\1bit 2 \2|  \1;  \2|     |  \1V  \2|  \1N  \2|  \1F  \2|  \16  \2|  \19  \2|  \4<  \2|     |     |\,
    \.\.j_____+_____+_____+_____+_____+_____+_____+_____+_____+_____k\,
\1bit 1 \2|  \1:  \2|     |  \1W  \2|  \1O  \2|  \1G  \2|  \17  \2|  \1,  \2|  \1?  \2|     |     |\,
      j_____+_____+_____+_____+_____+_____+_____+_____+_____+_____k\,
\1bit 0 \2| \1CR  \2|     |  \1X  \2|  \1P  \2|  \1H  \2|  \18  \2|  \1.  \2|  \1/  \2|\1SHIFT\2|     |\,
      n_____m_____m_____m_____m_____m_____m_____m_____m_____m_____,\,
\-\1-vstup z portu E001H/D1H
\,
\-
        8.  MAGNETOFON\"\,
\,
\,
     8.1. P\5r\1ipojen\5i \1magnetofonu\,
\,
     Magnetofon je p\5r\1ipojen p\5r\1es 4 bity portu C obvodu I8255\,
(I/O adresa PC je  0D2H resp. 0E002H, CWR je  na adrese 0D3H)\,
\,
\,
        11.  MONITOR 9Z-504M = HORN\5I \1MONITOR\,
\,
     Horn\5i \1monitor obsahuje krom\5w \1p\5ri\1kaz\5j  \1shodn\5y\1ch s doln\5i\1m\,
monitorem t\5ez \1obsluhu  RD:, FD: a QD:.  V\5w\1t\5s\1ina  podprogram\5j\,
\1pro realizaci p\5ri\1kaz\5j \1je stejn\5a \1jako v doln\5i\1m monitoru. Pro-\,
to nejsou v horn\5i ca\1sti duplicitn\5i  \1rutiny podrobn\5w \1komento-\,
v\5a\1ny.\,
     Nejsou pops\5a\1ny \5za\1dn\5e  \1z\5a\1le\5z\1itosti t\5y\1kaj\5i\1c\5i \1se QD:. M\5a\1me\,
pro to mnoho r\5j\1zn\5y\1ch d\5j\1vod\5j\1, ale pokud by n\5w\1kdo c\5i\1til pot\5r\1e-\,\/
bu m\5i\1t  v tomto textu  koment\5ar  \1k t\5e\1to fantastick\5e \1jednotce\,
s obrovskou kapacitou a fantastickou  p\5ri\1stupovou  rychlost\5i\,
\1(64KB, pr\5j\1m\5w\1rn\5w  \18 sekund, ale klidn\5w \1a\5z \120), tak  n\5a\1m  m\5jz\1e\,
napsat a my je dopln\5i\1me do tohoto souboru.\,
     Horn\5i \1monitor je stav\5w\1n\5y \1s ujasn\5w\1nou  koncepc\5i \1ovl\5a\1d\5a\1n\5i\,
\1perifern\5i\1ch za\5ri\1zen\5i\1. V\5s\1echny soubory  jsou standardn\5w \1zav\5a\1-\,
d\5w\1n\5e \1od  MGBASE (1200H) a dost\5a\1vaj\5i  \1p\5r\1i sv\5e\1m  spu\5s\1t\5w\1n\5i \1v BC\,
informaci o za\5ri\1zen\5i\1, z kter\5e\1ho byly odstartov\5a\1ny.\,
\,
     BC         periferie\,
\,
     0000H      RD:     s\5e\1riov\5a \1pam\5wt\,
     \10100H      CMT:    magnetofon\,
     0200H      FD:     floppy disk\,
     0300H      QD:     quick disk\,
\,
     K spu\5s\1t\5w\1n\5i \1programu slou\5zi \1rutina ]GOPGM (0ECFCH). O\5c\1e-\,
k\5a\1v\5a \1v HL registru adresu tabulky souboru, kter\5a  \1mus\5i \1obsa-\,
hovat d\5e\1lku, zav\5a\1d\5w\1c\5i  \1adresu a startovac\5i  \1adresu. V BC' je\,
hodnota, kter\5a \1se m\5a \1odevzdat do spu\5s\1t\5w\1n\5e\1ho programu.\,
     Program mus\5i \1b\5y\1t  ulo\5z\1en od MGBASE. Pokud se m\5a \1program\,
prov\5a\1d\5w\1t na jin\5e  \1adrese  ne\5z \1MGBASE, je tam p\5r\1ed  spu\5s\1t\5w\1n\5i\1m\,
p\5r\1esunut.\,
\,
\,
     11.1.  P\5r\1ehled p\5ri\1kaz\5j \1horn\5i\1ho monitoru\,
\,
     11.1.1.  J = Jump\,
\,
     Jxxxx odevzd\5a ri\1zen\5i \1na adresu xxxxH.\,
\,
\,
     11.1.2.  G = Gosub\,
\,
     Gxxxx ulo\5zi \1do z\5a\1sobn\5i\1ku n\5a\1vratovou  adresu do monitoru\,
a odevzd\5a ri\1zen\5i \1na adresu xxxxH.\,
\,
\,
     11.1.3.  L = Load\,
\,
     P\5r\1e\5c\1te program z CMT:  a odevzd\5a  \1mu \5ri\1zen\5i\1. Program se\,
ukl\5a\1d\5a \1od MGBASE (1200H)  a potom  vol\5a \1standardn\5i \1spou\5s\1t\5w\1c\5i\,
\1rutinu, kter\5a \1se postar\5a \1o jeho um\5i\1st\5w\1n\5i \1v pam\5w\1ti a spu\5s\1t\5w\1n\5i\1.\,\/
     11.1.4.  F = Floppy disk\,
\,
     Pokus\5i \1se  p\5r\1e\5ci\1st  z diskety  a spustit program, jeho\5z\,
\1n\5a\1zev za\5ci\1n\5a \1IPLPRO... a jeho\5z \1hlavi\5c\1ka je na za\5ca\1tku diske-\,
ty (jde vlastn\5w \1o BOOT p\5ri\1slu\5s\1n\5e\1ho diskov\5e\1ho opera\5c\1n\5i\1ho sys-\,
t\5e\1mu).\,
\,
\,
     11.1.5.  B = Beep ON/OFF\,
\,
     Zapne nebo vypne akustick\5y \1sign\5a\1l  po stisku ka\5z\1d\5e \1kl\5a\1-\,
vesy.\,
\,
\,
     11.1.6.  M = Modify\,
\,
     Mxxxx umo\5z\1n\5i \1m\5w\1nit a prohl\5iz\1et  obsah pam\5w\1ti  od adresy\,
xxxx d\5a\1le. Prov\5a\1d\5w\1n\5i \1se zru\5si \1BREAK. Pokus o z\5a\1pis nespr\5a\1vn\5e\,
\1hodnoty je ignorov\5a\1n a je o\5c\1ek\5a\1v\5a\1n vstup spr\5a\1vn\5e \1hodnoty.\,
\,
\,
     11.1.7.  S = Save\,
\,
     Ulo\5z\1en\5i \1programu na p\5a\1sku. Typ je 01, tedy OBJ.\,
\,
\,
     11.1.8.  V = Verify\,
\,
     Porovn\5a\1n\5i \1obsahu souboru se skute\5c\1n\5y\1m stavem pam\5w\1ti.\,
\,
\,
     11.1.9.  D = Dump\,
\,
     Dxxxxyyyy v\5y\1pis pam\5w\1ti v \5s\1estn\5a\1ctkov\5e \1soustav\5w \1a ASCII.\,
Pokud nen\5i \1uvedeno yyyy, pak se uva\5z\1uje yyyy=xxxx+00A0H.\,
\,
\,
     11.1.10. ES = SRAM disk save\,
\,
     P\5r\1e\5c\1ten\5i \1programu z CMT: v standardn\5i\1m form\5a\1tu a ulo\5z\1e-\,
n\5i \1do s\5e\1riov\5e \1pam\5w\1ti. Hlavi\5c\1ka se redukuje na 8 bajt\5j\1: d\5e\1lka,\,
zav\5a\1d\5w\1c\5i \1adresa, startovac\5i \1adresa  a  CRC hlavi\5c\1ky. Bezpro-\,
st\5r\1edn\5w \1za n\5i \1n\5a\1sleduje program ukon\5c\1en\5y \1kontroln\5i\1m sou\5c\1tem.\,\/
Program je z CMT: \5c\1ten  od  adresy MGBASE (1200H) a a\5z \1potom\,
ulo\5z\1en do SRAM.\,
\,
\,
     11.1.11.  EB = SRAM disk load\,
\,
     p\5r\1e\5c\1te program ze s\5e\1riov\5e \1pam\5w\1ti zaveden\5y \1p\5ri\1kazem ES a\,
spust\5i \1ho.\,
\,
\,
     11.1.12.  QL = QD: load\,
\,
     P\5r\1e\5c\1ten\5i \1a spu\5s\1t\5w\1n\5i \1programu z QD:.\,
\,
\,
     11.1.13.  QS = QD: save\,
\,
     Ulo\5z\1en\5i \1programu na QD:.\,
\,
\,
     11.1.14.  QF = QD: formatting\,
\,
     Form\5a\1tov\5a\1n\5i \1QD:.\,
\,
\,
     11.1.15.  QD = QD: directory\,
\,
     V\5y\1pis adres\5ar\1e QD:.\,
\,
\,
     11.1.16. QX a QC\,
\,
     N\5w\1jak\5e \1kop\5i\1rov\5a\1n\5i \1soubor\5j\1.\,
\,
\,
        12. IPL LOADER\,
\,
     IPL loader je um\5i\1st\5w\1n  od adresy E800H a po zapnut\5i \1po-\,
\5ci\1ta\5c\1e nebo po RESET je  aktivov\5a\1n  jako  prvn\5i\1. Vykon\5a \1p\5ri\1-\,
slu\5s\1n\5e  \1inicializace  perifern\5i\1ch  obvod\5j  \1a  nastav\5i  \1re\5z\1im\,
MZ-700.\,
     Pokud zjist\5i\1, \5z\1e je stisknuta kl\5a\1vesa CTRL, tak namapu-\,
je RAM p\5r\1es celou pam\5wt \1a provede JP 0000.\,\/
     Jinak nab\5i\1dne M jako p\5r\1echod  do  monitoru a C jako na-\,
hr\5a\1t\5i \1a spu\5s\1t\5w\1n\5i \1programu z CMT:. Pokud  je  p\5r\1ipojen QD: je\,
nab\5i\1dnuta i varianta Q pro spu\5s\1t\5w\1n\5i \1programu z QD:.\,
     Pokud je p\5r\1ipojen FD: je automaticky  proveden  pokus o\,
p\5r\1e\5c\1ten\5i \1programu, n\5a\1zev kter\5e\1ho za\5ci\1n\5a \1IPLPRO.\,
\,
\,
     12.1.  Slu\5z\1by pro kop\5i\1rov\5a\1n\5i \1program\5j\,
\,
\,
     \112.1.1.  @COPYL  E807H\,
\,
     P\5r\1e\5c\1te soubor z CMT: a ulo\5zi \1ho od  standardn\5i \1zav\5a\1d\5w\1c\5i\,
\1adresy MGBASE (1200H).\,
\,
\,
     12.1.2.  @COPYS  E80AH\,
\,
     Zap\5is\1e p\5r\1e\5c\1ten\5y \1soubor zp\5w\1t na CMT:.\,
POZOR - nen\5i \1mo\5z\1n\5e \1aktivovat dvakr\5a\1t  bezprost\5r\1edn\5w \1po sob\5w\1.\,
COPYS naru\5si \1tabulku adres v hlavi\5c\1ce souboru. Ka\5z\1d\5w\1mu vol\5a\1-\,
n\5i \1COPYS mus\5i \1tedy p\5r\1edch\5a\1zet vol\5a\1n\5i \1COPYL.\,
\,
\,
     12.1.3.  @COPYV\,
\,
     Provede verify mezi programem ulo\5z\1en\5y\1m od MGBASE a pro-\,
gramem na p\5a\1sce.\,
\,
\,
        13.  FLOPPY DISK\,
\,
\,
     13.1.  P\5r\1ipojen\5i \1FD:\,
\,
     Z rozboru softwaru vypl\5y\1v\5a\1, \5z\1e disk  je  p\5r\1ipojen  p\5r\1es\,
\5r\1adi\5c \1WD 2795 nebo podobn\5y\1. Ovl\5a\1d\5a \1se p\5r\1es tyto porty:\,
\,
     D8 .... p\5ri\1kazov\5y \1registr\,
     D9 .... registr stopy\,
     DA .... registr sektoru\,
     DC .... zap\5i\1n\5a\1n\5i \1a vyp\5i\1n\5a\1n\5i \1mechaniky\,
     DD .... p\5ri\1znak vybran\5e \1strany diskety v nult\5e\1m bitu\,\/
     13.2.  Logick\5y \1form\5a\1t\,
\,
     @FDBOOT vy\5z\1aduje, aby byla v prvn\5i\1m sektoru nult\5e \1stopy\,
standardn\5i  \1hlavi\5c\1ka souboru typu 03 = BSD, s n\5a\1zvem za\5ci\1na-\,
j\5i\1c\5i\1m IPLPRO. Na adrese  FDHEAD+30 mus\5i \1b\5y\1t \5ci\1slo bloku, kde\,
za\5ci\1n\5a \1program na disket\5w\1.\,
     <Blok> = <stopa> x 16 + <sektor> - 1\,
     Dal\5si ri\1zen\5i \1diskov\5y\1ch  operac\5i  \1mus\5i  \1p\5r\1evz\5i\1t  nahran\5y\,
\1program IPLPRO..., kter\5y \1mus\5i \1p\5r\1izp\5j\1sobit logick\5y \1form\5a\1t pro\,
jak\5y\1koliv diskov\5y \1opera\5c\1n\5i \1syst\5e\1m.\,
\,
\,
     13.3.  Podprogramy pro pr\5a\1ci s FD:\,
\,
     V\5s\1echny  podprogramy  mus\5i  \1m\5i\1t  na  standardn\5i  \1adrese\,
FDARET (CEFEH) nastavenu  adresu  podprogramu  pro  o\5s\1et\5r\1en\5i\,
\1chyb. Provede t\5ez \1inicializaci z\5a\1sobn\5i\1ku.\,
\,
     Struktura standardn\5i \1tabulky pro pr\5a\1ci s FD:\,
\,
     1 bajt ... \5ci\1slo disku\,
     2 bajty .. \5ci\1slo bloku od za\5ca\1tku disku\,
     2 bajty .. d\5e\1lka \5c\1ten\5y\1ch dat v bajtech\,
     2 bajty .. zav\5a\1d\5w\1c\5i \1adresa\,
     1 bajt ... \5ci\1slo aktu\5a\1ln\5i \1stopy\,
     1 bajt ... \5ci\1slo aktu\5a\1ln\5i\1ho sektoru\,
     1 bajt ... po\5ca\1te\5c\1n\5i \1stopa\,
     1 bajt ... po\5ca\1te\5c\1n\5i \1sektor\,
\,
     Adresa t\5e\1to tabulky se podprogram\5j\1m odevzd\5a \1v IX reg.\,
\,
\,
     13.3.1.  @FDBOOT  0E44AH\,
\,
     Provede BOOT standardn\5i\1ho programu z FD: a p\5r\1ed\5a \1mu \5ri\1-\,
zen\5i\1. Pokud na disket\5w \1nenajde  program  IPLPRO..., vr\5a\1t\5i \1se\,
s chybov\5y\1m hl\5as\1en\5i\1m do monitoru. Program, kter\5e\1mu  bylo p\5r\1e-\,
d\5a\1no \5ri\1zen\5i \1m\5jz\1e pou\5zi\1t instrukce RET pro n\5a\1vrat do monitoru.\,
\,
     13.3.2.  @FDREAD\,
\,
     P\5r\1e\5c\1te soubor z FD:, podle informac\5i \1ulo\5z\1en\5y\1ch v tabul-\,
ce, jej\5iz \1adresu o\5c\1ek\5a\1v\5a \1v registru IX. Nechr\5a\1n\5i \1registry.\,\/
     13.3.3.  @FDON  0E517H\,
\,
     Zapne motor disketov\5e  \1mechaniky a po\5c\1k\5a \1asi 960 ms. Do\,
prom\5w\1nn\5e \1FDON? (0CEF5H) ulo\5zi \1jedni\5c\1ku, jako p\5ri\1znak zapnut\5i\,
\1disku.\,
\,
\,
     13.3.4.  @FDSEL  0E4DCH\,
\,
     Vybere a zapne  disk, jeho\5z  ci\1slo  o\5c\1ek\5a\1v\5a  \1na  adrese\,
IX+0. Informace o tom, kter\5y \1disk  je  vybran\5y  \1jsou ulo\5z\1eny\,
v tabulce !FDRES (0CEF6H). Nechr\5a\1n\5i \1registry.\,
\,
\,
     13.3.5.  @FDDESL  0E530H\,
\,
     Vypne  a odpoj\5i  \1v\5s\1echny  disketov\5e  \1mechaniky.  Chr\5a\1n\5i\,
\1v\5s\1echny registry.\,
\,
\,
     13.3.6.  @FDTR0  0E548H\,
\,
     Vystav\5i \1hlavi\5c\1ku na 0.stopu.\,
\,
\,
     13.3.7.  @FDSTOP  0E658H\,
\,
     Ukon\5ci \1operaci na FD:\,
\,
\,
     13.3.8.  @FDTR  0E61BH\,
\,
     Nastaven\5i \1stopy podle registru A.\,
\,
\,
     13.3.9.  @FDSEC  0E62BH\,
\,
     Nastaven\5i \1sektoru a stopy  podle  tabulky, jej\5iz \1adresu\,
o\5c\1ek\5a\1v\5a \1v registru IX.\,
\,
\,
\,
\,\/
     13.3.10.  @FDSEEK  0E528H\,
\,
     Provede p\5ri\1kaz SEEK \5r\1adi\5c\1e, mus\5i \1b\5y\1t  spr\5a\1vn\5w \1nastaven\5y\,
\1registr stopy a registr dat.\,
\,
\,
     13.3.11.  @FDTR?  0E696H\,
\,
     Podle \5u\1daj\5j \1z tabulky, jej\5iz \1adresa se p\5r\1ed\5a\1v\5a \1v regis-\,
tru IX, se provede v\5y\1po\5c\1et po\5ca\1te\5c\1n\5i\1ho \5ci\1sla stopy (vrac\5i \1se\,
v H) a sektoru (vrac\5i \1se v L) a ulo\5zi  \1na p\5ri\1slu\5s\1n\5e \1m\5i\1sto do\,
tabulky.\,
\,
\,
     13.3.12.  @FDNEXT  0E63CH\,
\,
     Zv\5w\1t\5si  ci\1slo  stopy  a pokud  detekuje, \5z\1e je nastaven\,
sektor \5ci\1slo 17, vybere sektor \5ci\1slo 1. V IX je adresa tab.\,
\,
\,
     13.3.13.  @FDCMD  0E555H\,
\,
     Vy\5s\1le z registru A p\5ri\1kaz  \5r\1adi\5c\1i FD a po\5c\1k\5a \1s time-out\,
na potvrzen\5i \1o dokon\5c\1en\5i \1operace.\,
\,
\,
     13.3.14.  @FDSTRT  0E64EH\,
\,
     Vy\5s\1le z registru A p\5ri\1kaz  \5r\1adi\5c\1i FD a po\5c\1k\5a \1s time-out\,
na potvrzen\5i \1o zah\5a\1jen\5i \1operace.\,
\,
\,
     13.3.15.  @FDWT1  0E568H\,
\,
     \5C\1eka na FD ready.\,
\,
\,
     13.3.16.  @FDWT2\,
\,
     \5C\1ek\5a \1na FD not ready.\,
\,
\,
\,\/
     13.3.17.  ???FD  0E8D5H\,
\,
     Otestuje, zda jsou p\5r\1ipojeny disky. Vrac\5i \1Z=0 pokud ne.\,
\,
\,
        14. SRAM: S\5E\1RIOV\5A \1PAM\5WT\,
\,
\,
     \114.1.  P\5r\1ipojen\5i \1SRAM\,
\,
     SRAM: se m\5jz\1e  nach\5a\1zet na I/O adres\5a\1ch od 0F8H nebo na\,
adres\5a\1ch od 0a8H. V dal\5si\1m textu  p\5r\1edpokl\5a\1d\5a\1me adresy 0F8H.\,
     SRAM: se pln\5i \1a \5c\1te pouze sekven\5c\1n\5w\1, je mo\5z\1n\5e  \1pou\5zi\1vat\,
I/O instrukce nebo t\5ez \1instrukce INIR a OTIR.\,
\,
IN    A,(0f8h) ... rewind nebo nastaven\5i  \1ukazatele sou\5c\1asn\5e\,
                   \1pozice na za\5ca\1tek SRAM:.\,
OUT   (0FAH),A ... z\5a\1pis  bajtu z registru A do SRAM: na po-\,
                   zici ukazatele, ukazatel se zv\5w\1t\5si \1o 1.\,
IN    A,(0F9H) ... \5c\1ten\5i \1bajtu z SRAM:, kter\5y  \1je  na pozici\,
                   ukazatele, ukazatel se zv\5ysi \1o 1.\,
\,
\,
     14.2.  Podprogramy pro pr\5a\1ci se SRAM:\,
\,
     V ROM je n\5w\1kolik podprogram\5j \1a to t\5w\1ch, kter\5e \1jsou pou-\,
\5z\1ity p\5ri\1kazy ES a EB monitoru.\,
     V\5s\1echny  podprogramy  o\5c\1ek\5a\1vaj\5i \1v registru C adresu I/O\,
SRAM: (0F8H nebo 0A8H).\,
\,
\,
     14.2.1.  @???RD  0E7BAH\,
\,
     Zjist\5i\1, zda je p\5r\1ipojena SRAM:, pokud ne, nastav\5i \1CY.\,
\,
\,
     14.2.2.  @RDCRC  0E70EH\,
\,
     Vypo\5ci\1t\5a  \1kontroln\5i \1sou\5c\1et  bloku s adresou DE a d\5e\1lkou\,
BC. Vr\5a\1t\5i \1jej v registru HL. Tento podprogram zni\5ci \1i druhou\,
sadu registr\5j\1.\,
\,
\,\/
     14.2.3.  @?HEAD  0E729H\,
\,
     Zjist\5i\1, zda je v SRAM: hlavi\5c\1ka  se spr\5a\1vn\5y\1m kontroln\5i\1m\,
sou\5c\1tem. Pokud je, vr\5a\1t\5i \1Z = 1, jinak vrac\5i \1Z = 0.\,
\,
\,
     14.2.4.  @RDLOAD\,
\,
     P\5r\1e\5c\1te  program ze SRAM:  na adresu 1200H a spust\5i \1jej.\,
Pokud tam nen\5i\1, vrac\5i \1Z = 0.\,
\,
\,
        15. PODPORA BASICU\,
\,
\,
     Interpreter Basicu MZ-800 nen\5i u\1pln\5w \1samostatn\5y \1a nez\5a\1-\,
visl\5y \1na obsahu ROM. Z doln\5i  ca\1sti monitoru  vyu\5zi\1v\5a \1rutiny\,
ADCN a DACN, d\5a\1le t\5ez \1tabulky kl\5a\1vesnice !KBD, !KBDC, !KBDG,\,
!KBDGS.  Horn\5i ca\1st ROM  od adresy 0F400H do konce je ur\5c\1ena\,
v\5y\1hradn\5w \1pro pou\5z\1it\5i \1Basicem. Obsahuje tyto rutiny:\,
\,
- pr\5a\1ce s bufferovanou tisk\5a\1rnou\,
- p\5ri\1stup k RD:\,
- nastaven\5i \1a \5c\1ten\5i \1re\5a\1ln\5e\1ho \5c\1asu\,
- obsluha joysticku (i simulovan\5e\1ho kl\5a\1vesnic\5i\1)\,
- podprogram pro p\5ri\1m\5y \1v\5y\1stup na tisk\5a\1rnu.\,
\,
     Podprogramy  p\5r\1edpokl\5a\1daj\5i\1, \5z\1e  budou pracovat v re\5z\1imu\,
MZ-800. Pr\5a\1ce  se simulovan\5y\1m  joystickem a  s re\5a\1ln\5y\1m \5c\1asem\,
nen\5i \1v re\5z\1imu MZ-700 v\5j\1bec provozuschopn\5y\1.\,
     Od adresy 0FDA0H do konce pam\5w\1ti jsou  um\5i\1st\5w\1ny chybov\5e\,
\1zpr\5a\1vy Basicu. Jednotliv\5e \1textov\5e r\1et\5w\1zce  navazuj\5i \1t\5w\1sn\5w \1na\,
sebe. Za\5ca\1tek \5r\1et\5w\1zce je indikov\5a\1n nastaven\5i\1m 8.bitu prvn\5i\1ho\,
znaku. Texty obsahuj\5i \1jen velk\5a \1p\5i\1smena, pro p\5r\1echod od vel-\,
k\5y\1ch p\5i\1smen  k mal\5y\1m je  v \5r\1et\5w\1zci  za\5r\1azen  znak 05H. Ka\5z\1d\5e\,
\1chybov\5e \1zpr\5a\1v\5w  \1je p\5r\1i\5r\1azeno  \5ci\1slo chyby  toto\5z\1n\5e \1s po\5r\1ad\5i\1m\,
zpr\5a\1vy v seznamu (po\5ci\1t\5a\1no od 1).\,
\,
\,
\,
\,
\,
\,\/
        16.  TISK\5A\1RNA\,
\,
\,
     16.1.  P\5r\1ipojen\5i \1tisk\5a\1rny\,
\,
     Tisk\5a\1rna je  p\5r\1ipojena  p\5r\1es Z80-PIO. Port A je vyu\5z\1it\5y\,
\1pro \5ri\1d\5i\1c\5i \1sign\5a\1ly tisk\5a\1rny, port B pro p\5r\1enos dat. P\5r\1i p\5r\1e-\,
vzet\5i \1znaku tisk\5a\1rnou je mo\5z\1n\5e \1vyvolat  p\5r\1eru\5s\1en\5i  \1prost\5r\1ed-\,
nictv\5i\1m obvodu PIO v libovoln\5e\1m p\5r\1eru\5s\1ovac\5i\1m re\5z\1imu proceso-\,
ru. Toto p\5r\1eru\5s\1en\5i \1obvykle  vede k vysl\5a\1n\5i  \1dal\5si\1ho znaku na\,
tisk\5a\1rnu z v\5y\1stupn\5i \1fronty.\,
\,
\,
     16.2.  Obslou\5z\1en\5i \1chyb\,
\,
     P\5r\1i pr\5a\1ci s tisk\5a\1rnou m\5jz\1e  doch\5a\1zet k chybov\5y\1m stav\5j\1m.\,
Proto kazd\5y \1program  p\5r\1ed vol\5a\1n\5i\1m d\5a\1le  popisovan\5y\1ch podpro-\,
gram\5j \1mus\5i  \1nastavit adresu  podprogram\5j \1pro obsluhu chyb na\,
adresu ERRSP (12A8H).  Po  chybov\5e\1m  n\5a\1vratu  m\5a  \1SP hodnotu\,
12AAH, proto je vhodn\5e \1nejd\5ri\1ve z\5a\1sobn\5i\1k obnovit.\,
     Rutina obsluhy chyb  dostane  na adrese  ERRFLG (13D9H)\,
typ chyby:\,
\,
0FFH ... to je  skute\5c\1n\5a \1chyba, jej\5i  ci\1slo  je v registru A\,
         (shodn\5w \1s \5ci\1slov\5a\1n\5i\1m chyb v Basicu).\,
 01H ... detekov\5a\1no  stisknut\5i   \1kl\5a\1ves   SHIFT + BREAK  p\5r\1i\,
         @HCOPY, jin\5y \1podprogram na break nereaguje.\,
 02H ... tento n\5a\1vrat nastane z p\5ri\1kazu INIT "LPT:M2", pokud\,
         byl ji\5z  \1nastaven  bufferovan\5y \1tisk. Obsluhu tohoto\,
         parametru si ji\5z \1mus\5i \1ud\5w\1lat volaj\5i\1c\5i \1program s\5a\1m.\,
\,
\,
     16.3.  Podprogramy pro pr\5a\1ci s LPT:\,
\,
     Vstupn\5i \1vektor  na adrese 0F400H obsahuje v\5s\1echny d\5j\1le-\,
\5z\1it\5e \1podprogramy pro pr\5a\1ci s bufferovanou tisk\5a\1rnou. Podpro-\,
gramy v\5w\1t\5s\1inou chr\5a\1n\5i \1v\5s\1echny  registry krom\5w \1AF, jak je pa-\,
trno z v\5y\1pisu program\5j\1. D\5a\1le popisujeme i n\5w\1kter\5e \1podprogra-\,
my, kter\5e \1nejsou obsa\5z\1en\5e \1ve vstupn\5i\1m vektoru, ale mohou b\5y\1t\,
u\5z\1ite\5c\1n\5e\1. Bez RD: nen\5i \1mo\5z\1n\5e \1bufferovan\5y \1tisk pou\5zi\1t.\,
\,
\,
\,\/
     16.3.1.  @INLPT  0F418H\,
\,
     Inicializa\5c\1n\5i  \1rutina tisk\5a\1rny. Na adresu HLPAR (12AEH)\,
o\5c\1ek\5a\1v\5a  \1adresu zbytku \5r\1et\5w\1zce p\5ri\1kazu INIT "LPT:...". Para-\,
metry M a S jsou pops\5a\1ny v Owner's manual, parametr Q m\5a \1n\5a\1-\,
sleduj\5i\1c\5i \1v\5y\1znam:\,
\,
\,
\,
0. bit = 1 ... po odesl\5a\1n\5i  \1znaku na tisk\5a\1rnu se ne\5c\1ek\5a\1, ne\5z\,
               \1tisk\5a\1rna znak p\5r\1evezme.\,
       = 0 ... \5c\1ek\5a \1se na p\5r\1evzet\5i \1znaku tisk\5a\1rnou (i v p\5r\1e-\,
               ru\5s\1ovac\5i \1rutin\5w\1)\,
1. bit = ..... logika sign\5a\1lu IRT : 0 = negat., 1 = pozit.\,
2. bit = ..... logika sign\5a\1lu RDP : 0 = negat., 1 = pozit.\,
\,
     Pokud je  v p\5ri\1kazu  pou\5z\1it  parametr  Q nebo M0, dojde\,
k inicializaci v\5y\1stupn\5i \1fronty.\,
\,
\,
     16.3.2.  @INICF  0F41EH\,
\,
     Inicializuje  v\5y\1stupn\5i  \1frontu tisk\5a\1rny. Adresu za\5ca\1tku\,
fronty  nalezne na adrese 0 a 1 v RAM disku, konec fronty je\,
v\5z\1dy 0FFFFH.\,
\,
\,
     16.3.3.  @PSTR  0F8F1H\,
\,
     Vy\5s\1le \5r\1et\5w\1zec znak\5j  \1na  tisk\5a\1rnu. Rutina  m\5a \1speci\5a\1ln\5i\,
\1vol\5a\1n\5i\1:\,
\,
CALL   @PSTR\,
DEFB   <po\5c\1et bajt\5j\1>\,
DEFB   <1.bajt>,<2.bajt>....<n.bajt>\,
\,
\,
     16.3.4.  PCHR1,PCHR2  0F412H, 0F415H\,
\,
     V\5y\1stup znak\5j \1na tisk\5a\1rnu  s konverz\5i \1podle typu tisk\5a\1r-\,
ny. Ob\5w  \1vol\5a\1n\5i \1se  takm\5wr \1neli\5si\1. V p\5ri\1pad\5w  \1tisku na ASCII\,
tisk\5a\1rnu se o\5c\1ek\5a\1v\5a \1v IY registru adresa  rutiny  pro p\5r\1evod\,
znak\5j \1do ASCII. N\5a\1vrat z t\5e\1to  u\5z\1ivatelsk\5e \1rutiny se provede\,\/
instrukc\5i \1JP (IX). To m\5a \1tu v\5y\1hodu, \5z\1e je mo\5z\1n\5e \1pou\5zi\1t ruti-\,
ny v ROM pro jakoukoliv tisk\5a\1rnu.\,
\,
\,
     16.3.5.  @CRLPT  0F41BH\,
\,
     Vy\5s\1le znak CR definovan\5y \1rutinou INLPT na tisk\5a\1rnu.\,
\,
\,
     16.3.6.  @SLPT  0F634H\,
\,
     Vy\5s\1le mezeru na LPT.\,
\,
\,
     16.3.7.  @BTLPT  0F41BH\,
\,
     Znak z registru A bez jak\5e\1koliv  konverze vy\5s\1le na LPT,\,
nebo jej ulo\5zi \1do v\5y\1stupn\5i \1fronty. V\5s\1echny vy\5ssi \1popsan\5e \1ru-\,
tiny volaj\5i \1pro vlastn\5i \1v\5y\1stup znaku tento podprogram.\,
\,
\,
     16.3.8.  @BTLP1  0F636H\,
\,
     Chov\5a \1se jako BTLPT, ale neukl\5a\1d\5a \1registry do z\5a\1sobn\5i\1ku.\,
\,
\,
     16.3.9. @BTLP2  0F637H\,
\,
     Vy\5s\1le znak z registru B na LPT:, chr\5a\1n\5i \1jen indexreg.\,
\,
\,
     16.3.10.  @INTP  0F400H\,
\,
     Rutina  obsluhy  p\5r\1eru\5s\1en\5i \1od LPT.  Pokud  je ve front\5w\,
\1znak a pokud nen\5i \1tisk  pozastaven rutinou @SSLPT, vy\5s\1le jej\,
na LPT: a o\5c\1ek\5a\1v\5a \1dal\5si \1p\5r\1eru\5s\1en\5i\1. Nechr\5a\1n\5i \1registry.\,
\,
\,
     16.3.11.  @INTPX  0F6BEH\,
\,
     Obslu\5z\1n\5a \1rutina tisk\5a\1rny s ochrannou registr\5j\1.\,
\,
\,\/
     16.3.12.  @LPTSS  0F421H\,
\,
     Pozastav\5i \1v\5y\1stup znak\5j \1z bufferu na tisk\5a\1rnu.\,
\,
\,
     16.3.13.  @LPTGO  0F424H\,
\,
     Obnov\5i \1tisk pozastaven\5y \1podprogramem @LPTSS.\,
\,
\,
     16.3.14.  @SSGO  0F427H\,
\,
     Pozastav\5i \1nebo obnov\5i \1tisk v z\5a\1vislosti na p\5r\1edch\5a\1zej\5i\1-\,
c\5i\1m stavu.\,
\,
\,
     16.3.15.  @NOBUF  0F42AH\,
\,
     Bufferovan\5y  \1tisk  p\5r\1epne  na  nebufferovan\5y\1.  Znaky ve\,
front\5w \1vystupuj\5i \1d\5a\1le na tisk\5a\1rnu  mezi  nov\5y\1mi znaky. Proto\,
je pot\5r\1ebn\5e \1po zavol\5a\1n\5i \1@NOBUF po\5c\1kat,a\5z \1se fronta vypr\5a\1zdn\5i\1.\,
\,
\,
     16.3.16.  @PLNA?  0F6B0H\,
\,
     Nastav\5i \1se CY, kdy\5z \1nen\5i \1m\5i\1sto v bufferu tisk\5a\1rny. V o-\,
pa\5c\1n\5e\1m p\5ri\1pad\5w \1ho nuluje.\,
\,
\,
     16.3.17.  @BTISK  0F6F0H\,
\,
     Vy\5s\1le znak na tisk\5a\1rn\5w \1p\5ri\1mo z registru A. P\5r\1edpokl\5a\1d\5a\1,\,
\5z\1e tisk\5a\1rna je zapnut\5a \1a p\5r\1ipravena p\5r\1ijat data.\,
\,
\,
     16.3.18.  @PSTB0  0F705H\,
\,
     Nuluje sign\5a\1l "data platn\5a\1".\,
\,
\,
\,
\,
\,\/
     16.3.19.  @PSTB 0F706H\,
\,
     Nastav\5i \1nebo nuluje  sign\5a\1l  "data platn\5a\1".  Respektuje\,
pozitivn\5i \1nebo  negativn\5i  \1logiku  nastavenou  parametrem  Q\,
v p\5ri\1kazu INIT.\,
\,
\,
     16.3.20.  @PSTAT  070FH\,
\,
     Zajist\5i\1, aby tisk\5a\1rna byla  p\5r\1ipravena  p\5r\1ijmout  znak.\,
Pokud se tisk\5a\1rna do tolikati sekund, kolik je  nadefinov\5a\1no\,
prom\5w\1nnou PTO (1094H) neozve, kon\5ci \1chybou.\,
\,
\,
     16.3.21.  @HCOPY  0F40FH\,
\,
     Op\5is\1e obsah  obrazovky  v  re\5z\1imu  MZ-800  na  tisk\5a\1rnu\,
MZ-80P5. Jinou tisk\5a\1rnu ignoruje.\,
\,
\,
     16.3.22.  @PBYTE  0F436H\,
\,
     Vy\5s\1le bajt z registru A p\5ri\1mo na tisk\5a\1rnu.  Pokud  nen\5i\,
\1tisk\5a\1rna schopna pracovat, vr\5a\1t\5i \1v registru  A hodnotu 0FFH,\,
pokud tisk\5a\1rna znak p\5r\1evezme, vr\5a\1t\5i \1nulu.\,
     Tato rutina je celkem samostatn\5a\1.  Nesouvis\5i \1s v\5ys\1e po-\,
psan\5y\1mi rutinami, nespolupracuje s v\5y\1stupn\5i\1m bufferem, para-\,
metr Q v p\5ri\1kaze INIT nem\5a \1na \5ci\1nnost tohoto  programu vliv.\,
Logika \5ri\1d\5i\1c\5i\1ch sign\5a\1l\5j \1se mus\5i \1nastavit  p\5r\1ep\5i\1na\5c\1i na zadn\5i\,
\1st\5w\1n\5w \1po\5ci\1ta\5c\1e.\,
\,
\,
        17. RAM DISK PRO BASIC\,
\,
\,
     Rutiny pro pr\5a\1ci s bufferovanou tisk\5a\1rnou pou\5zi\1vaj\5i \1pro\,
sv\5j\1j buffer RD:. Kapacita tohoto  m\5e\1dia je 64 KB, p\5ri\1stupov\5a\,
\1doba k jednomu bytu je n\5w\1kolik mikrosekund.  Doln\5i  ca\1st RD:\,
se vyu\5zi\1v\5a \1na soubory Basicu,  v horn\5i ca\1sti  je buffer tis-\,
k\5a\1rny. Mezn\5i \1adresa (adresa prvn\5i\1ho bajtu bufferu) je na ad-\,
rese 0 v RD:. Zde popisovan\5e \1rutiny  jsou  vyu\5z\1ity  jen  pro\,
LPT:, v Basicu jsou naps\5a\1ny identick\5e  \1rutiny  pro  pr\5a\1ci se\,
soubory.\,\/
\,
     17.1.  P\5r\1ipojen\5i \1RD:\,
\,
     0EBH ... registr doln\5i ca\1sti  adresy, horn\5i ca\1st adresy\,
              se pos\5i\1l\5a \1p\5r\1i adresaci portu 0EBH v horn\5i ca\1s-\,
              ti adresov\5e \1sb\5w\1rnice  procesoru. Proto se mus\5i\,
              \1RD: adresovat p\5r\1es BC registr.\,
     0EAH ... port pro vstup a v\5y\1stup dat z a na RD:\,
\,
\,
     17.1.1.  @RDOA  0F743H\,
\,
     V\5y\1stup bajtu z registru A na adresu HL.\,
\,
\,
     17.1.2.  @RD1A  0F74EH\,
\,
     Vstup bajtu z adresy HL do registru A.\,
\,
\,
     17.1.3.  @RDODE  0F759H\,
\,
     V\5y\1stup slova z registru DE na adresu HL.\,
\,
\,
     17.1.4.  @RDIDE  0F759H\,
\,
     Vstup slova z adresy HL do registru DE.\,
\,
\,
\,
        18.  NASTAVEN\5I \1RE\5A\1LN\5E\1HO \5C\1ASU\,
\,
\,
     \5C\1as se nastavuje  do  obvodu  I8253  zp\5j\1sobem  popsan\5y\1m\,
v kapitole "Re\5a\1lny \5c\1as". Rozd\5i\1l je v adresov\5a\1n\5i \1I8253. V n\5a\1-\,
sleduj\5i\1c\5i\1ch rutin\5a\1ch se pou\5zi\1v\5a \1adresov\5a\1n\5i \1instrukcemi vstup\,
a v\5y\1stup. Proto je nen\5i \1mo\5z\1no pou\5zi\1t v re\5z\1imu MZ-700.\,
\,
     Form\5a\1t nastavovan\5e\1ho a \5c\1ten\5e\1ho \5c\1asu:\,
DE = \5c\1as v sekund\5a\1ch od za\5ca\1tku p\5j\1ldne\,
A  = p\5ri\1znak dopoledne/odpoledne = 0/1\,
\,\/
     Nastavovan\5y c\1as se ulo\5zi \1do t\5ri\1bajtov\5e\1ho prostoru v RAM.\,
I8253 za\5ci\1n\5a ci\1tat od nuly. Ulo\5z\1en\5y c\1as se  potom pou\5z\1ije ke\,
korekci p\5r\1i  \5c\1ten\5i c\1asu. Tento  syst\5e\1m  m\5a \1tu  v\5y\1hodu, \5z\1e je\,
mo\5z\1n\5e \1bez probl\5e\1m\5j \1n\5i\1t k dispozici n\5w\1kolik \5c\1as\5j\1.\,
\,
\,
     18.0.1.  @TMSTX  0F433H\,
\,
     Nastav\5i \1re\5a\1ln\5y c\1as. V  HL o\5c\1ek\5a\1v\5a \1adresu t\5ri\1bajtov\5e \1po-\,
lo\5z\1ky v RAM pro ulo\5z\1en\5i c\1asu.\,
\,
\,
     18.0.2.  @TMGTX  0F436H\,
\,
     \5C\1ten\5i c\1asu. V HL je to stejn\5e \1jako p\5r\1i @TMSTX.\,
\,
\,
     18.0.3.  @TMSET  0F436H\,
\,
     Nastav\5i c\1as. Adresa \5u\1schovy \5c\1asu je 1366H.\,
\,
\,
     18.0.4.  @TMGET  0F406H\,
\,
     Z\5i\1sk\5a c\1as. Na adrese  1366H je  po\5ca\1te\5c\1n\5i c\1as,  ulo\5z\1en\5y\,
\1podprogramem @TMSET.\,
\,
\,
\,
        19.  OBSLUHA JOYSTICKU\,
\,
     19.1.  P\5r\1ipojen\5i \1joysticku\,
\,
     Joysticky jsou  k  po\5ci\1ta\5c\1i  p\5r\1ipojeny  prost\5r\1ednictv\5i\1m\,
port\5j \1s adresami  0F1H  resp. 0F2H.  Po  vykon\5a\1n\5i  \1instrukce\,
IN A,(port) dostaneme do registru A obraz stisknut\5y\1ch sp\5i\1na-\,
\5cj\1. Jedni\5c\1ka odpov\5i\1d\5a \1sepnut\5e\1mu sp\5i\1na\5c\1i.\,
\,
     bit 0 ... dol\5j\,
     \1bit 1 ... nahoru\,
     bit 2 ... doprava\,
     bit 3 ... doleva\,
     bit 4 ... trigger\,\/
\,
     Aby mohl b\5y\1t joystick otestovan\5y\1, mus\5i \1b\5y\1t  vybran\5y \1bi-\,
tem A5 resp. A6 I8255.\,
\,
\,
     19.2.  Podprogramy pro joystick\,
\,
     Podprogramy v ROM jsou p\5ri\1mou  vazbou na p\5ri\1kazy Basicu\,
STICK a STRIG. V registru  A o\5c\1ek\5a\1v\5a  ci\1slo  joysticku  jako\,
v Basicu:\,
\,
     0 ... simulovan\5y \1na kl\5a\1vesnici\,
     1 ... joystick \5c\1.1 (I/O adresa 0F0H)\,
     2 ... joystick \5c\1.2 (I/O adresa 0F1H)\,
\,
\,
     19.2.1.  @STICK  0F409H\,
\,
     V registru A vrac\5i \1stav joysticku 0 a\5z \18 podle n\5a\1sledu-\,
j\5i\1c\5i\1ho sch\5e\1matu. Kdy\5z \1je ovl\5a\1dac\5i \1p\5a\1ka v klidu, vrac\5i \10.\,
\,
                     1\!\,
\-                     \2I
                 \18 \2U   O \12\,
\-
               7  \2J  \10  \2K  \13\,
\-
                 6 \2N   < \14\,
\-                     \2M
                     \15\"\,
\,
     Data p\5r\1e\5c\1ten\5a  \1z portu  jsou ale  v jin\5e\1m  form\5a\1tu. Pro\,
konverzi se po\5zi\1v\5a \116-ti bajtov\5a \1tabulka !JOY12 (0FA1DH) pro\,
skute\5c\1n\5y \1joystick nebo !JOY0 (0FA2DH) pro simulovan\5y\1.\,
\,
\,
     19.2.2.  [STRIG  0F49CH\,
\,
     V registru A vrac\5i \1stav tla\5ci\1tka "trigger".\,
\,
     0 ... trigger nestisknut\5y\,
     \11 ... triger stisknut\5y\,
\,
\,
\,
\,
\,\/
     \119.2.3.  @JOYIN  0F9FFH\,
\,
     P\5r\1e\5c\1te bajt z portu 0F0H resp. 0F1H  pokud  je  hodnota\,
registru A = 1 nebo 2. Simulovan\5y  \1joystick  (\5ci\1slo 0) neob-\,
sluhuje.\,
\,
\,
     19.2.4.  @KBLIN  0FA15H\,
\,
     P\5r\1e\5c\1te sloupec  matic kl\5a\1vesnice. V registru  A o\5c\1ek\5a\1v\5a\,
ci\1slo tohoto sloupce  v spodn\5i\1ch  \5c\1ty\5r\1ech  bitech.  P\5r\1e\5c\1ten\5y\,
\1bajt vrac\5i \1v registru A (vyu\5zi\1v\5a \1se pro simulovan\5y \1joystick).\,
\,
\,
\,
        20.  V\5S\1EOBECN\5W \1U\5Z\1ITE\5C\1N\5E \1PODPROGRAMY NAD 0F400H\,
\,
\,
     20.0.1.  @BEEPD  0F430H\,
\,
     Akustick\5y \1sign\5a\1l s frekvenc\5i \1545 Hz a d\5e\1lkou v registru\,
D. <d\5e\1lka v milisekund\5a\1ch> = D * 2.3\,
\,
\,
     20.0.2.  @NUMB  0F76H\,
\,
     P\5r\1evede \5ci\1slo zapsan\5e \1v ASCII v dekadick\5e \1nebo \5s\1estn\5a\1ct-\,
kov\5e \1soustav\5w \1do vnit\5r\1n\5i\1ho bin\5a\1rn\5i\1ho vyj\5a\1d\5r\1en\5i\1. Adresa s \5r\1e-\,
t\5w\1zcem \5ci\1sel je v registru HL, v\5y\1sledek se ulo\5zi \1do registru\,
DE. HL potom ukazuje na n\5a\1sleduj\5i\1c\5i  \1bajt za \5ci\1slem. V\5s\1echny\,
mezery se ignoruj\5i\1.\,
\,
\,
     20.0.3.  @NIBLH  0F7BAH\,
\,
     P\5r\1evede hexa \5ci\1slici v ASCII  v registru A do bin\5a\1rn\5i\1ho\,
k\5o\1du.\,
\,
\,
     20.0.4.  @SKIP  0F7CAH\,
\,
     P\5r\1esko\5ci \1v\5s\1echny mezery v \5r\1et\5w\1zci s adresou HL.\,
\,\/
     20.0.5.  @FNDA  0F737H\,
\,
     Vol\5a\1n\5i \1:   CALL FNDA\,
                DEFB <znak>\,
\,
\,
     Prvn\5i \1nemezerov\5y \1znak  v \5r\1et\5w\1zci HL porovn\5a  \1se zadan\5y\1m\,
znakem a nastav\5i \1p\5ri\1znaky. Kdy\5z \1se znaky  neshoduj\5i\1, ukazuje\,
HL na tento znak, p\5r\1i shod\5w \1ukazuje na n\5a\1sleduj\5i\1c\5i \1znak.\,
\,
\,
     20.0.6.  @OUTY 0F940H\,
\,
     Vy\5s\1le B bajt\5j \1na porty podle tabulky  s adresou HL. Ta-\,
bulka m\5a \1d\5e\1lku 2 * B bajt\5j \1a n\5a\1sleduj\5i\1c\5i \1strukturu:\,
\,
     DEFB  <data1>,<port1>\,
     DEFB  <data2>,<port2>\,
     ....   .....   .....\,
     DEFB  <dataB>,<portB>\,
\,
     Po ukon\5c\1en\5i \1podprogramu ukazuje HL za tabulku.\,
\,
\,
     20.0.7.  @SUBDE  0F9D2H\,
\,
     Pokud je HL v\5w\1t\5si  \1ne\5z \1DE,  pak  ode\5c\1te  HL od DE. V\5z\1dy\,
p\5r\1epne nutl\5y \1bit  registru A  (pou\5zi\1van\5e \1v podprogramech pro\,
re\5a\1ln\5y c\1as).\,
\,
\,
     20.0.8.  @ADDHL\,
\,
     HL <-----  HL  +  A\,
\,
\,
     20.0.9.  @PUSHA\,
\,
     Ukl\5i\1z\5i \1registry v\5c\1etn\5w \1AF.\,
\,
     20.0.10.  @PUSH\,
\,
     Ukl\5i\1z\5i \1registry s vyj\5i\1mkou AF.\,
\=
