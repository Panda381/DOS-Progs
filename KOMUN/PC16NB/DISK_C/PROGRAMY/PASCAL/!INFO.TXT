





                         T u r b o  P a s c a l  v.5



          OBSAH :

          1. Ovl d n¡ Turbo Pascalu a direktivy p©eklada‡e..........4
             1.1. Popis menu Turbo Pascalu..........................4
                1.1.1. Struktura menu...............................4
                   1.1.1.1. P©¡kazy.................................4
                   1.1.1.2. Okna....................................4
                   1.1.1.3. Funk‡n¡ kl vesy.........................5
                1.1.2. V˜bˆr jednotliv˜ch p©¡kaz–...................6
                1.1.3. Z kladn¡ p©¡kazy.............................6
                   1.1.3.1. P©¡kaz FILE.............................6
                   1.1.3.2. P©¡kaz EDIT.............................7
                   1.1.3.3. P©¡kaz RUN..............................8
                   1.1.3.4. P©¡kaz COMPILE..........................9
                   1.1.3.5. P©¡kaz OPTIONS.........................10
                   1.1.3.6. P©¡kaz DEBUG...........................14
                   1.1.3.7. P©¡kaz BREAK/WATCH.....................15
                1.1.4. P©¡kazy pro pr ci s editorem Turbo Pascalu..16
                   1.1.4.1. Z kladn¡ p©¡kazy pro pohyb kursoru.....16
                   1.1.4.2. Roz¨i©uj¡c¡ p©¡kazy pro pohyb kursoru..17
                   1.1.4.3. P©¡kazy pro zmˆnu textu................17
                   1.1.4.4. P©¡kazy pro pr ci s bloky..............17
                   1.1.4.5. Ostatn¡ p©¡kazy........................18
             1.2. Direktivy p©eklada‡e.............................18
                1.2.1. P©ep¡na‡e...................................19
                1.2.2. Parametrov‚ direktivy.......................21
                1.2.3. Podm¡nkov‚ direktivy........................23
          2. Popis jazyka..........................................26
             2.1. Z kladn¡ prvky jazyka............................26
             2.2. Struktura programu...............................27
             2.3. Standardn¡ typy dat..............................27
                2.3.1. Celo‡¡seln˜ typ.............................27
                2.3.2. Typy re ln˜ch ‡¡sel.........................27
                2.3.3. Typ Char....................................27
                2.3.4. Typ string..................................28
                2.3.5. Typ Boolean.................................28
             2.4. U‘ivatelsky definovan‚ typy......................28
                2.4.1. Vyjmenovan˜ typ.............................28
                2.4.2. Typ interval................................29
                2.4.3. Typ ukazatel................................29
                2.4.4. Typ pole....................................30
                2.4.5. Typ z znam..................................30
                2.4.6. Typ mno‘ina.................................31
                2.4.7. Typ soubor..................................31
                2.4.8. Typov  zmˆna hodnoty........................31
                2.4.9. Typov  zmˆna promˆnn‚.......................31
             2.5. Konstanty s udan˜m typem.........................32
                2.5.1. Konstanty s jednoduch˜m typem...............32

                                                                   1






                         T u r b o  P a s c a l  v.5

                2.5.2. Konstanty s typem string....................33
                2.5.3. Konstanty s typem pole......................33
                2.5.4. Konstanty s type z znam.....................33
                2.5.5. Konstanty s typem mno‘ina...................34
                2.5.6. Konstanty s typem ukazatel..................34
             2.6. P©¡kazy..........................................34
                2.6.1. V˜razy......................................34
                   2.6.1.1. Aritmetick‚ oper tory..................45
                   2.6.1.2. Bitov‚ a logick‚ oper tory.............36
                   2.6.1.3. Boolean oper tory......................36
                   2.6.1.4. žetˆzcov‚ oper tory....................36
                   2.6.1.5. Mno‘inov‚ oper tory....................37
                   2.6.1.6. Rela‡n¡ oper tory......................37
                   2.6.1.7. Adresn¡ oper tory......................37
                2.6.2. Jednoduch‚ p©¡kazy..........................38
                   2.6.2.1. P©i©azovac¡ p©¡kaz.....................38
                   2.6.2.2. Vol n¡ procedury.......................39
                   2.6.2.3. P©¡kaz GOTO............................39
                2.6.3. Strukturovan‚ p©¡kazy.......................39
                   2.6.3.1. Slo‘en˜ p©¡kaz.........................39
                   2.6.3.2. P©¡kaz if..............................39
                   2.6.3.3. P©¡kaz case............................40
                   2.6.3.4. P©¡kaz repeat..........................40
                   2.6.3.5. P©¡kaz while...........................40
                   2.6.3.6. P©¡kaz for.............................41
                   2.6.3.7. P©¡kaz with............................42
             2.7. Procedury a funkce...............................42
             2.8. Programov‚ jednotky..............................43
                2.8.1. Struktura programov˜ch jednotek.............44
                2.8.2. Pou‘it¡ programov˜ch jednotek...............45
             2.9. Standardn¡ procedury a funkce....................46
                2.9.1. Procedury Exit, Halt a RunError.............47
                2.9.2. Procedury a funkce pro dynamickou alokaci...47
                2.9.3. Konverzn¡ funkce............................48
                2.9.4. Aritmetick‚ funkce..........................49
                2.9.5. Ordin ln¡ procedury a funkce................50
                2.9.6. Procedury a funkce pro pr ci s ©etˆzci......52
                2.9.7. Funkce pracuj¡c¡ s adresami a ukazateli.....52
                2.9.8. R–zn‚ procedury a funkce....................52
             2.10. Vstup a v˜stup..................................54
                2.10.1. Standardn¡ procedury a funkce pro
                         v¨echny soubory...........................54
                2.10.2. Procedury a funkce pro soubory typu text...56
                2.10.3. Procedury a funkce pro netextov‚ soubory...58
          3. Standardn¡ programov‚ jednotky........................60
             3.1. Standardn¡ programov  jednotka System............60
             3.2. Standardn¡ programov  jednotka Printer...........62
             3.3. Standardn¡ programov  jednotka Dos...............62
                3.3.1. Konstanty, typy a promˆnn‚ jednotky Dos.....62
                3.3.2. Procedury spr vy p©eru¨en¡..................66

                                                                   2






                         T u r b o  P a s c a l  v.5

                3.3.3. Procedury data a ‡asu.......................66
                3.3.4. Funkce stavu disku..........................67
                3.3.5. Procedury spr vy soubor–....................67
                3.3.6. Procedury a funkce spr vy proces–...........69
                3.3.7. Procedury a funkce pro operace s
                        promˆnn˜mi MS-DOSu.........................69
             3.4. Standardn¡ programov  jednotka Crt...............70
                3.4.1. Soubory Input a Output......................70
                3.4.2. Okna........................................71
                3.4.3. Speci ln¡ znaky.............................71
                3.4.4. Vstup © dku.................................71
                3.4.5. Konstanty a promˆnn‚........................72
                3.4.6. Procedury a funkce..........................73
             3.5. Standardn¡ programov  jednotka Graph.............75
                3.5.1. K¢dy ukon‡en¡ grafick˜ch operac¡............76
                3.5.2. Procedury a funkce grafiky..................77
             3.6. Standartn¡ programov  jednotka Overlay...........91
                3.6.1. K¢dy ukon‡en¡ p©ekryvn˜ch operac¡...........91
                3.6.2. Procedury a funkce umo‘¤uj¡c¡ p©ekr˜v n¡....91
          4. Srovn n¡ Turbo Pascalu se standardn¡m Pascalem........93
             4.1. Omezen¡ proti standardu..........................93
             4.2. Roz¨¡©en¡ proti standardu........................94





























                                                                   3






                         T u r b o  P a s c a l  v.5

          1. Ovl d n¡ Turbo Pascalu a direktivy p©eklada‡e
          1.1. Popis menu Turbo Pascalu
          1.1.1. Struktura menu
          1.1.1.1.   P©¡kazy

               Na prvn¡m © dku obrazovky je uvedeno  pˆt  z kladn¡ch
          p©¡kaz–:

               File
          Pr ce   se   soubory,adres ©i,ukon‡en¡   programu,vyvol n¡
          syst‚mu.
               Edit
          Zalo‘en¡ a oprava  souboru  pomoc¡  vestavˆn‚ho  textov‚ho
          editoru.
               Run
          Automatick˜ p©eklad sestaven¡ a spu¨tˆn¡ programu.
               Compile
          P©eklad programu, vytvo©en¡ spustiteln‚ho souboru.
               Options
          Mo‘nost ur‡it podm¡nky p©ekladu, volba nov˜ch adres ©–.
               Debug
          Ur‡en¡ zp–sobu trasov n¡ bˆhu programu
               Break/Watch
          Mo‘nost zastaven¡ bˆhu programu a v˜pisu nebo zmˆny hodnot
          promˆnn˜ch

               Podrobnˆj¨¡   popis  tˆchto  zakladn¡ch  funkc¡  bude
          uveden v n sleduj¡c¡ch kapitol ch.


          1.1.1.2.  Okna
               Obrazovkov‚ menu je  rozdˆleno na  dvˆ  okna  (Edit a
          Watch)
          Okno Edit je vyu‘¡v no pro:
          + vytv ©en¡ nov˜ch soubor–
          + zav dˆn¡ a opravy existuj¡c¡ch soubor–
          + ukl d n¡ soubor–
          + v˜bˆr souboru ze z pisn¡ku (Pick file).
          Okno  Watch  je  vyu‘¡v no pro v˜pis hodnot promˆnn˜ch p©i
          ladˆn¡ programu.
          Stisknut¡m kl vesy  F5  je  mo‘n‚  okno  Watch  vymazat  a
          ponechat je okno Edit.
          Dal¨¡m oknem, kter‚ je v¨ak bˆ‘nˆ v pozad¡ je okno Output.
          Uschov vaj¡  se  v nˆm v˜sledky programu.  Na obrazovce se
          uk ‘e po stisknut¡ kombinace Alt-F5.






                                                                   4






                         T u r b o  P a s c a l  v.5

          1.1.1.3 Funk‡n¡ kl vesy.

               Funk‡n¡ kl vesy
          1. HELP ...... text HELPu k dan‚ situaci
          2. SAVE ...... ulo‘en¡ aktu ln¡ verze programu na disk
          3. LOAD ...... nahr ni programu z disku do editoru
          4. GO TO ..... spust¡ program (p©¡padnˆ v bˆhu pokra‡uje)
             CURSOR      a zastav¡ se a‘ p©ed vykon n¡m © dky, na
                         kter‚ je kurzor
          5. ZOOM ...... p©ep¡n n¡ mezi obrazovkami EDIT, WATCH a
                         OUTPUT
          6. SWITCH .... p©ep¡n  mezi aktivn¡m a naposledy aktivn¡m
                         (editovan˜m) souborem
          7. TRACE ..... provede jeden p©¡kaz, pokud jde o vol n¡
              INTO       procedury, sko‡¡ do n¡ a d le krokuje
                         bˆh uvnit©
          8. STEP ...... tot‚‘, jen p©eskakuje vykon v n¡ procedur a
             OVER        funkc¡ (vykon  je ale jejich pr–bˆh
                         nekrokuje)
          9. MAKE ...... p©elo‘¡ program v‡etnˆ prohled n¡ v¨ech
                         pou‘it˜ch knihoven
          10. MENU ..... kurzor sko‡¡ do horn¡ho menu, ve kter‚m se
                         lze pohybovat pomoc¡ ¨ipek

               Funk‡n¡ kl vesy ve spojen¡ s kl vesou CTRL.
          1. HELP ON ... v˜pis popisu p©¡kazu, kl¡‡ov‚ho slova nebo
             KEYWORD     procedury, na kter‚m je postaven kurzor
          2. PROGRAM RESET ... ukon‡¡ trasov n¡ programu
          3. CALL ...... v˜pis cesty, po kter‚ se program dostal do
             STACK       pr vˆ aktivn¡ho m¡sta programu v‡etnˆ
                         v˜pisu parametr– v¨ech vol n¡ na  cestˆ
          4. EVALUATE .. umo‘¤uje v˜pis dan‚ promˆnn‚, p©¡padnˆ jej¡
                         zmˆnu. D le se d  z v˜hodou pou‘¡t p©i
                         v˜po‡tu arit. v˜raz–.
          7. ADD WATCH . p©id n¡ v˜razu do obrazovky WATCH a p©i
                         ka‘d‚m zastaven¡ programu (pomoc¡ F7, F8
                         nebo na breakpointu) se vyp¡¨e hodnota
                         v˜razu
          8. TOGGLE .... zv˜raznˆn¡ © dky programu, na kter‚m je
             BREAKPOINT  postaven kurzor. Na tomto m¡stˆ se
                         program p©i bˆhu v‘dy zastav¡.V p©¡padˆ,
                         ‘e na tomto m¡stˆ breakpoint u‘ byl,
                         odstran¡ se.
          9. RUN ....... spust¡ program







                                                                   5






                         T u r b o  P a s c a l  v.5

               Funk‡n¡ kl vesy ve spojen¡ s ALT.
          1. LAST HELP . v˜pis naposledy zobrazen‚ho HELPu
          3. PICK FILE . takto lze jednodu¨e nahr t libovoln˜ z
                         doposavad pou‘it˜ch program–.
          5.USER ....... zobraz¡ obrazovku v˜sledk– (OUTPUT) a ‡ek 
            SCREEN       na stisk libovoln‚ho tla‡¡tka
          6.SWAP ....... v˜mˆna souboru aktivn¡ho za soubor
            FILES        naposledy pou‘¡van˜ v editoru
          9.COMPILE .... p©eklad programu


          1.1.2.  V˜bˆr jednotliv˜ch p©¡kaz–
                Na   prvn¡  © dku  z kladn¡ho  p©¡kazov‚ho  menu  se
          u‘ivatel   dostane  stisknut¡m  kl vesy  F10.   Jednotliv‚
          p©¡kazy je pak mo‘n‚ vyb¡rat stiskem kl vesy  odpov¡daj¡c¡
          prvn¡mu    p¡smenu      dan‚ho   p©¡kazu   nebo posouv n¡m
          svˆteln‚ho  ukazatele  a  stisknut¡m  Enter  po   nalezen¡
          spr vn‚ho p©¡kazu.
               P©¡kazy  lze  vyvolat  tak‚  stisknut¡m Alt a prvn¡ho
          p¡smene p©¡kazu,  i kdy‘ u‘ivatel nen¡ v  z kladn¡m  menu.
          Zvolen‚ menu se zru¨¡ kl vesou Esc.


          1.1.3.  Z kladn¡ p©¡kazy.

          1.1.3.1.  P©¡kaz FILE.


               P©¡kaz File m  n sleduj¡c¡ funkce:


             Load
             Pick
             New
             Save
             Write to
             Directory
             Change dir
             OS shell
             Quit

               Load   F3
              Pomoc¡  tohoto  p©¡kazu nahraje Turbo Pascal soubor do
          pamˆti  po‡¡ta‡e.U‘ivatel  si  m–‘e   nechat   vypsat   na
          obrazovku  libovoln˜ adres © a pomoc¡ svˆteln‚ho ukazatele
          zvolit pot©ebn˜ soubor.  Implicitnˆ nastaven˜  adres ©  je
          *.PAS.




                                                                   6






                         T u r b o  P a s c a l  v.5

               Pick   Alt-F3
               Dovoluje   vybrat  soubor  ze  seznamu  osmi  soubor–
          naposled  zpracovan˜ch  editorem.   Seznam  je  ulo‘en   v
          z pisn¡kov‚m  souboru (Pick file).  Z pisn¡kov˜  soubor je
          ulo‘en na disketˆ    pod  n zvem  TURBO.PCK.  U‘ivatel  m 
          mo‘nost    si    toto    jm‚no    zmˆnit    (viz    p©¡kaz
          Options/Directories/Pick file name).

               New
               U‘ivatel pou‘ije tuto funkci,  jestli‘e chce  zalo‘it
          nov˜   soubor.   Editor   p©i©ad¡   tomuto  souboru  jm‚no
          NONAME.PAS.  POzdˆji p©i ukl d n¡ souboru na disk je mo‘n‚
          toto jm‚no zmˆnit.

               Save   F2
              Ulo‘¡  soubor  z  editoru na disk.  Jestli‘e se soubor
          jmenuje NONAME.PAS umo‘n¡ ho p©ejmenovat.

               Write to
               Zap¡¨e na disk soubor z  editoru  pod  nov˜m  jm‚nem,
          kter‚ si u‘ivatel zvol¡.

               Directory
              Zobraz¡  aktu ln¡  adres ©.  Kl vesa F4 umo‘¤uje v˜bˆr
          jin‚ho adres ©e.

               Change dir
               Vyp¡¨e adres © a dovoluje zmˆnit specifikaci za©¡zen¡
          i adres ©.

               OS Shell
               U‘ivatel  m–‘e  opustit  Turbo  Pascal,   pracovat  v
          syst‚mu  DOS  a p©¡kazem  EXIT se opˆt vr tit do prost©ed¡
          p©eklada‡e.   Tato funkce tak umo‘¤uje pracovat s  p©¡kazy
          DOSu bez ukon‡en¡ pr ce p©eklada‡e.

               Quit   Alt-X
               Kon‡¡ pr ci p©eklada‡e a vrac¡ u‘ivatele do syst‚mu.

          1.1.3.2.  P©¡kaz EDIT

               P©¡kazem  se  vyvol   vestavˆn˜  obrazovkov˜  editor.
          Popis ©¡d¡c¡ch p©¡kaz– editoru je uveden v kapitole 1.1.4.








                                                                   7






                         T u r b o  P a s c a l  v.5

          1.1.3.3  P©¡kaz Run

          P©¡kaz Run m  n sleduj¡c¡ funkce:

             Run
             Program reset
             Go to cursor
             Trace into
             Step over
             User screen

               Run   Ctrl-F9
               Spu¨tˆn¡ v˜po‡tu.  P©¡padn‚ parametry je nutn‚  zadat
          p©edem v p©¡kaze Options/Parameters.

               Program reset   Ctrl-F2
               Pokud  je bˆh programu zastaven uprost©ed,  pokra‡uje
          v˜po‡et po  stisku  Run  od  tohoto  m¡sta.  Po  proveden¡
          Program reset se m–‘e spustit v˜po‡et opˆt od po‡ tku.

               Go to cursor   F4
               Program prov d¡ v˜po‡et a zastav¡ se na m¡stˆ, kde je
          um¡stˆn kurzor.

               Trace into   F7
               Program  provede p©¡kaz,  na kter‚m se p©i p©edchoz¡m
          bˆhu zastavil a nastav¡ se na dal¨¡ p©¡kaz. Pokud je tento
          p©¡kaz vol n¡m procedury, nastav¡ se dovnit© procedury.

               Step over   F8
               Tot‚‘ jako Trace into s t¡m rozd¡lem, ‘e procedury se
          vykon vaj¡ v r mci jednoho stisku F8.

               User screen   Alt-F5
               Tento p©¡kaz zobraz¡ posledn¡ stav  v˜stupu  programu
          p©ed p©eru¨en¡m nebo ukon‡en¡m bˆhu.















                                                                   8






                         T u r b o  P a s c a l  v.5

          1.1.3.4.  P©¡kaz COMPILE


               Pomoc¡  funkc¡  tohoto  p©¡kazu  m–‘e  u‘ivatel ur‡it
          zp–sob a podm¡nky p©ekladu.


            Compile
            Make
            Build
            Destination   Memory
            Find error
            Primary file:
            Get info


               Compile   Alt-F9
               P©elo‘¡ soubor, kter˜ je ulo‘en v editoru.

               Make   F9
               Jestli‘e u‘ivatel ve  funkci    Primary  file    zad 
          jm‚no souboru, p©ekl d  se p©i vyvol n¡ Make tento soubor,
          jinak  se p©ekl d  soubor ulo‘en˜ v editoru.  Turbo Pascal
          testuje  v¨echny  soubory  a  programov‚  jednotky,  kter‚
          p©ekl dan˜ program obsahuje a p©ekl d  znovu jen ty, kter‚
          byly editov ny.

               Build
               Na  rozd¡l  od funkce Make p©ekl d  v¨echny soubory i
          programov‚ jednotky znovu.

               Destination
               Specifikuje zda m  b˜t p©elo‘en˜ soubor (.EXE) ulo‘en
          na disk nebo do pamˆti.

               Find error
               Vyp¡¨e adresu pamˆti,  kde vznikla p©i v˜po‡tu chyba.
          Adresa pamˆti je zaps na form tem seg:ofs.

                Primary file
               Tato funkce se vyu‘¡v  k ur‡en¡ souboru, kter˜ m  b˜t
          p©elo‘en funkc¡ Make nebo Build.

               Get info
               Zobraz¡  informace o souboru,  se kter˜m Turbo Pascal
          pr vˆ pracuje, d‚lku zdrojov‚ho programu, d‚lku v˜sledn‚ho
          .EXE nebo .TPU souboru, volnou pamˆt,  informace o chyb ch
          a j.



                                                                   9






                         T u r b o  P a s c a l  v.5

          1.1.3.5.  P©¡kaz OPTIONS.

               Pomoc¡  jednotliv˜ch  funkc¡ Options m–‘eme definovat
          podm¡nky pro p©eklad a pr ci s Turbo Pascalem.

            Compiler
            Linker
            Environment
            Directories
            Parameters
            Load Options
            Save Options

               Compiler

               U‘ivatel m–‘e  mˆnit  podm¡nky  p©ekladu.  Stisknut¡m
          kl vesy  Enter  p©ep¡n   podm¡nku  on  nebo  off.   Stejn‚
          podm¡nky m–‘e  specifikovat    ve    zdrojov‚m    programu
          u‘it¡m direktiv p©ekladu.
                Prvn¡   p¡smeno   Compiler   Menu   koresponduje   s
          ekvivalentn¡ direktivou. (Range-checking odpov¡d  $R).

          + Range-checking:   On-testuje indexy pol¡, ©etˆzc– a
                                  promˆnn‚ skal rn¡ho  typu, aby
                                  nep©ekro‡ily dan˜  rozsah. 
                              Off-testov n¡ se neprov d¡
                                  (ekvivalentn¡  direktivˆ $R).
          + Stack checking:   On-testuje p©ed vyvol n¡m procedur
                                  nebo funkc¡, zda m  v z sobn¡ku
                                  dost m¡sta pro lok ln¡ promˆnn‚.
                              Off- testov n¡ se neprov d¡
                                  (ekvivalentn¡.  direktivˆ $S).
          + I/O checking:     On-testuje ka‘dou I/O operaci
                              Off- testov n¡ se neprov d¡, u‘ivatel
                                   m–‘e testovat I/O chyby pomoc¡
                                   funkce  IOResult  (ekvivalentn¡
                                  direktivˆ $I)
          + Force far calls:  On-generuje 'far' model vol n¡ v¨ech
                                  funkc¡ a procedur.
                              Off- generuje 'near' model vol n¡ pro
                                  procedury a funkce zdrojov‚ho
                                  programu, pro ostatn¡ 'far' model
                                  (ekvivalentn¡ direktivˆ $F).


          + Overlays alloved: pokud se nastav¡ na On, kompil tor
                                  p©ekl d  units jako p©ekryvn‚
                                  strukrury.
          + Align data      : pokud je nastaveno na word, kompil tor
                                  zarovn v  v¨echny promˆnn‚ na

                                                                  10






                         T u r b o  P a s c a l  v.5

                                  hranici slova. Tento zp–sob
                                  ukl d n¡ zabere v¡ce pamˆti ale
                                  pr ce s promˆnn˜mi je rychlej¨¡.
                               P©i nastaven¡ na byte je zaru‡eno
                                  optim ln¡ vyu‘it¡ pamˆti.
          + Var-string checking: Strict-p©eklada‡ porovn v 
                                  deklarovanou d‚lku promˆnn‚ typu
                                  string se skute‡n˜m parametrem.
                                  Jestli‘e  deklarovan   d‚lka
                                  skute‡n‚ho parametru je men¨¡ ne‘
                                  form ln¡ho p©eklada‡ hl s¡ chybu.
                              Relaxed- test se neprov d¡
                                  ekvivalentn¡ direktivˆ $V).
          + Boolean evaluation: Short-circuit p©eklada‡ p©estane
                                  vyhodnocovat v˜raz Boolean mezi
                                  operandy and nebo or jakmile je
                                  zn m  jeho hodnota.
                              Full-v¨echny prvky cel‚ho v˜razu jsou
                                 vyhodnoceny (ekvivalentn¡ direktivˆ
                                  $B).
          + Numeric processing: Software - je povolen pouze
                                  standardn¡ 6-byte typ Real data.
                              8087/80287 - vyu‘¡v   matem.
                                  koprocesoru a dovoluje pracovat s
                                  promˆnn˜mi typu single, double,
                                  extended, comp (ekvivalentn¡
                                  direktivˆ $N).
          + Emulation       : p©i nastaven¡ On generuje kompil tor
                                  emula‡n¡ rutiny matematick‚ho
                                  koprocesoru. Pokud je EXE soubor
                                  pou‘it za p©¡tomnosti matem. kop.,
                                  vyu‘¡v  ho, jinak pou‘¡v  tyto
                                  rutiny.
          + Debug information: On-p©eklada‡ generuje informace
                                  pot©ebn‚ pro ladˆn¡ programu.
          + Local symbols:    Pokud je tento p©ep¡na‡ nastaven na
                                  On,je mo‘n‚ se p©i ladˆn¡ programu
                                  dotazovat i na lok ln¡ promˆn‚
                                  vnit©n¡ch procedur, co‘ jinak nen¡
                                  mo‘n‚.
          + Conditional defines: Definuje symboly, kter‚ m–‘e
                                 u‘ivatel uplatnit  v  podm¡nkov˜ch
                                 direktiv ch p©eklada‡e ve sv‚m
                                 programu. Pokud definuje v¡ce
                                 symbol–,  oddˆluj¡ se  ';' (p©:
                                 Test;Debug).
          + Memory sizes: Dovoluje u‘ivateli mˆnit konfiguraci
                                 pamˆti
                  Stack size:-dovoluje specifikovat velikost
                              stack segmentu v rozmez¡ 16Kb a‘ 64Kb.

                                                                  11






                         T u r b o  P a s c a l  v.5

                  Low heap limit: - dovoluje specifikovat doln¡
                              hranici pamˆti (implicitnˆ 0b).
                  High heap limit: - dovoluje specifikovat horn¡
                              hranici pamˆti (implicitnˆ 655360b).

          + Linker
          M  n sleduj¡c¡ dvˆ funkce:
          + Map file
               Off          kompil tor nebude vytv ©et informace pro
                              ladˆn¡ (TP.MAP)
               Segments     generuj¡ se jen informace o segmentech
                              pamˆti
               Publics      generuj¡ se informace o glob ln¡ch
                               promˆnn˜ch a o promˆnn˜ch v ‡ sti
                               interface pou‘it˜ch programov˜ch
                               jednotek-units.
               Detailed     tot‚‘  jako  publics a  segments  spolu
                               s adresami jednotliv˜ch © dk–.
          + Link buffer
               Disk         sestavovaci program - linker bude
                               pou‘¡vat jako pracovn¡ oblast  disk -
                               pomal‚ ale u¨et©¡ pamˆ‹ v r mci
                               p©ekladu.
               Memory        pracovn¡ oblast je um¡stˆna do pamˆti


               Environment

               Tato funkce ur‡uje podm¡nky pro  hled n¡  a  ukl d n¡
          soubor– a pro prost©ed¡, ve kter‚m u‘ivatel pracuje.

          + Config auto save: On -zmˆn¡ konfigura‡n¡ soubor p©i
                              v˜stupu z Turbo Pascalu podle podm¡nek
                               nastaven˜ch ve funkci Compiler nebo
                              Environment.
          + Edit auto save: On - p©i vyvol n¡ p©¡kazu Run nebo
                               funkce OS shell automaticky ukl d  na
                               disk program, kter˜ je v editoru
                               (byl-li modifikov n).
          + Backup  files: On -  Turbo Pascal automaticky
                               vytv ©¡ kopii programu stejn‚ho jm‚na
                               a typu  .BAK p©i pou‘it¡ funkce Save.
          + Tab size: Nastavuje velikost tabel toru v editoru. M–‘e
                               b˜t v rozmez¡ 2 a‘ 16 (implicitnˆ
                               nastaven  hodnota je 8).
          + Zoom windows: On - roz¨i©uje okno Edit,Watch nebo Output
                               na celou obrazovku Je mo‘n‚ okna
                               p©ep¡nat, ale na obrazovce je v‘dy
                               jen jedno.
                          Off - zobrazuje se v‘dy okno Edit spolu s

                                                                  12






                         T u r b o  P a s c a l  v.5

                               oknem Watch nebo Output.
          + Screen size: Dovoluje vyb¡rat mezi 25-ti © dkovou
                               standardn¡ obrazovkou,43 © dkovou EGA
                               a 50-ti © dkovou VGA Pro tento v˜bˆr
                               v¨ak mus¡ m¡t hardwarovou podporu.


               Directories

               Umo‘¤uje  p©ejmenovat  r–zn‚  adres ©e  a  jm‚no Pick
          file.

           +Turbo directory:Tohoto adres ©e vyu‘¡v  Turbo Pascal ke
                               hled n¡  konfigura‡n¡ho  souboru
                              TURBO.TP a souboru TURBO.HLP.
          + EXE & TPU directory: .EXE soubory jsou ukl d ny do
                              bˆ‘n‚ho adres ©e nebo do tohoto
                              adres ©e.
          + Include directories: Specifikuje adres ©e obsahuj¡c¡
                              standardn¡ vkl dan‚ soubory. Tyto
                              soubory jsou specifikovan‚ p©ekladovou
                              direktivou {$I filename}. Jednotliv‚
                              adres ©e jsou oddˆleny ';'.
          + Unit directories: Specifikuje adres ©e, kter‚ obsahuj¡
                              programov‚ jednotky. Jednotliv‚
                              adres ©e se oddˆluj¡ ';'.
          + Object directories:Ur‡uje adres ©e .OBJ soubor–.Pokud je
                              v p©ekl dan‚m programu direktiva {$L
                              filemane}, Turbo Pascal prohl¡‘¡
                              nejprve bˆ‘n˜ adres © a potom adres ©e
                              uveden‚ zde.
          + Pick  file  name:  Definuje jm‚no a um¡stˆn¡ pick file.                    
          Jestli‘e u‘ivatel zvolil jin‚ jm‚no ne‘
                              TURBO.PCK mus¡ b˜t toto jm‚no  ulo‘eno
                              do konfigura‡n¡ho souboru.
          + Current pick file: Ukazuje jm‚no a um¡stˆn¡ aktu ln¡ho
                              pick file

               Parameters

               Umo‘¤uje   u‘ivateli   dodat   spu¨tˆn‚mu    programu
          parametry  (nebo  argumenty)  pro  v˜po‡et,   uveden‚  p©i
          vyvol n¡ t‚to funkce

               Save Options

               Ukl d  v¨echny  u‘ivatelem  zmˆnˆn‚  podm¡nky  funkc¡
          Compiler,  Environment,  a  Directories  do  kofigura‡n¡ho
          souboru (TURBO.TP).


                                                                  13






                         T u r b o  P a s c a l  v.5

               Retrieve Options

               Nahraje do pamˆti konfigura‡n¡ soubor  ulo‘en˜  d©¡ve
          na disk pomoc¡ Save Options.


          1.1.3.6. P©¡kaz Debug.

          P©¡kaz Debug m  n sleduj¡c¡ funkce:

            Evaluate
            Call stack
            Find function
            Integrated debugging
            Standalone debugging
            Display swapping
            Refresh display

               Evaluate   Ctrl-F4
               Pomocn‚  okno  umo‘¤uj¡c¡  v˜po‡et libovoln‚ho v˜razu
          p©¡pustn‚ho pro Turbo Pascal.  Lze v  nˆm  pou‘¡vat  v  t‚
          chv¡li zn m‚ promˆnn‚ a d–le‘it‚ funkce. Lze rovnˆ‘ pou‘¡t
          pro v˜pis promˆnn˜ch a jejich zmˆnu.



          P©i z pisu je mo‘n‚ pou‘¡vat tzv.  form t–, kter‚ umo‘¤uj¡
          vypsat tot‚‘ v r–zn‚ formˆ :
          C        jako znaky
          D        jako ‡¡sla typu Integer
          Fn       jako re ln  ‡¡sla, kde n je po‡et viditeln˜ch
                        m¡st ‡¡sla.
          H/X      jako hexadcim ln¡ ‡¡slo
          M        v˜pis pamˆti, v˜raz mus¡ b˜t adresou. M–‘e se
                        pou‘¡t v kombinaci s D,C,S,X nebo H
          P        jako adresu ve form tu Seg:Offs. Lze pou‘¡t jen
                        pro adresy
          R        jako vˆtu. Zad  se ukazov tko na vˆtu, vyp¡¨e
                        jm‚na prvk– v‡etnˆ hodnot. Lze kombinovat s
                        X,D,H - pro zobrazen¡ prvk–
          S        jako string
          Form t n sleduje v˜raz a je od nˆho oddˆlen ‡ rku.

          P©¡klad:
          Pro n sleduj¡c¡ deklarace .......
          type NamePtr = ^NameRec;
               NameRec = record
                            Next : NamePtr;
                            Count : Integer;
                            Name : string [32];

                                                                  14






                         T u r b o  P a s c a l  v.5

                         end;
          var List : array [1..10] of Integer;
              P : NamePtr;

          ....... je mo‘n‚ pou‘¡t dan‚ v˜razy :
          List : (10,20,30,40,50,60,70,80,90,100)
          List[6],3X : $3C,$46,$50
          P : PTR ($3EA0,$C)
          P,P : 3EA0:000C
          P^ : (PTR($3EF0,$2),412,'John')
          p^.Next^,RX : (NEXT:NIL;COUNT:$19C;NAME:'Joe')
          Mem[$40:0],8M : F8 03 F8 02 00 00 00 00
          Mem[$40:0],8MD : 248 3 248 2 0 0 0 0

               Call stack
               Bˆhem trasov n¡ je mo‘n‚ vypsat  cestu  do  aktivn¡ho
          podprogramu.

               Call function
               Nalezne   zdrojov˜  text  zadan‚ho  podprogramu  i  v
          p©¡padn˜ch  programov˜ch jednotk ch - units.

               Integrated debugging
               Jestli‘e je nastaveno na On,  je  umo‘nˆno  trasov n¡
          programu.  V˜sledn˜ modul v‘dy p©ekl dejte s nastaven¡m na
          Off z d–vodu rychlosti.

               Standalone debugging
               Jestli‘e ja nastaveno na On a Compile/Destination  je
          nastaveno na Disk,  informace pro trasov n¡ jsou p©id ny k
          .EXE  souboru.   Jestli‘e  je  nastaveno   na   Off   nebo
          Compile/Destination  je  nastaveno  na Memory,  nem  ‘ dn˜
          efekt.

               Display swapping
               Refresh display

               1.1.3.7. P©¡kaz Break/Watch.
          1.1.3.7. P©¡kaz Break/Watch
               P©¡kaz m  n sleduj¡c¡ funkce :

            Add watch
            Delete watch
            Edit watch
            Remove all watches
            Toggle breakpoint
            Clear all breakpoints
            View next breakpoint

               Add watch   Ctrl-F7

                                                                  15






                         T u r b o  P a s c a l  v.5

               Do okna Watch se p©id  dal¨¡  v˜raz,  kter˜  se  bude
          vypo‡¡t vat  a  zobrazovat v‘dy p©i zastaven¡ programu p©i
          trasov n¡.

               Delete watch
               V˜maz v˜razu z okna Watch,  kter˜ je ozna‡en po  lev‚
          stranˆ.

               Edit watch
               Zobraz¡ ozna‡en˜ v˜raz tak, aby se dal opravit.

               Remove all watches
               V˜maz v¨ech v˜raz– v oknˆ Watch.

               V¨echny  tyto  operace  souvisej¡c¡  s oknem Watch je
          mo‘n‚ prov dˆt i jednodu‘¨¡m zp–sobem tak, ‘e se dostaneme
          do okna Watch (pomoc¡ F6 z okna Edit) a na doln¡m menu  se
          zobraz¡ seznam povolen˜ch operac¡:

          Ins - odpov¡d  Add watch
          Del - odpov¡d  Delete watch
          Enter - odpov¡d  Edit watch
          vertik. ¨ipky - umo‘¤uj¡ v˜bˆr v˜razu

               Toggle breakpoint   Ctrl-F8
               P©¡kaz zv˜razn¡ © dek, na kter‚m je pr vˆ kurzor a na
          toto m¡sto se nastav¡ breakpoint (m¡sto, kde se program po
          spu¨tˆn¡ zastav¡). Pokud na tomto © dku u‘ breakpoint byl,
          vyma‘e ho.

               Clear all breakpoints
               V˜maz v¨ech breakpoint–.

               View next breakpoint
               Nastav¡  kurzor  na  n sleduj¡c¡  breakpoint.   Tento
          p©¡kaz nespust¡ program,  jen uk ‘e um¡stˆn¡ n sleduj¡c¡ho
          breakpointu.

          1.1.4.  P©¡kazy pro pr ci s editorem Turbo Pascalu.


          1.1.4.1.   Z kladn¡ p©¡kazy pro pohyb kursoru

               Pro  pohyb  kursoru  lze  pou‘¡vat  jednak kl vesy se
          ¨ipkami v obvykl‚m v˜znamu a jednak kombinace CTRL kl vesy
          s ur‡en˜m p¡smenem.  V tabulce uv d¡me v‘dy obˆ mo‘nosti (
          pokud existuj¡ ).

          CTRL-S  resp. J                     posun o znak vlevo
          CTRL-D  resp. K                     posun o znak vpravo

                                                                  16






                         T u r b o  P a s c a l  v.5

          CTRL-A                              posun o slovo vlevo
          CTRL-F                              posun o slovo vpravo
          CTRL-X  resp. M                     posun o © dek dolu
          CTRL-E  resp. I                     posun o © dek nahoru
          CTRL-R  resp. PgUp                  posun o obrazovku
                                                nahoru
          CTRL-C  resp. PgDn                  posun o obrazovku
                                                dolu

          1.1.4.2.  Roz¨i©uj¡c¡ p©¡kazy pro pohyb kursoru.

          CTRL-Q-S  resp. Home                posun na za‡ tek © dku
          CTRL-Q-D  resp. End                 posun na konec © dku
          CTRL-Q-E                            posun na za‡ tek
                                                obrazovky
          CTRL-Q-X                            posun na konec
                                                obrazovky
          CTRL-Q-R                            posun na za‡ tek
                                                souboru
          CTRL-Q-C                            posun na konec souboru
          CTRL-Q-B                            posun na za‡ tek bloku
          CTRL-Q-K                            posun na konec bloku
          CTRL-Q-P                            posun na posledn¡
                                                pracovn¡ posici

          1.1.4.3.  P©¡kazy pro zmˆnu textu.

          CTRL-V  resp. Ins                   p©ep¡na‡ INSERT modu
          CTRL-G  resp. Del                   v˜maz znaku nad
                                                kursorem
                                                a posun zbyl‚ho
                                                textu doleva
          CTRL-H  resp. J                  v˜maz znaku vlevo od
                                             kursoru
          CTRL-T                           v˜maz slova vpravo od
                                             kursoru
          CTRL-N  resp. G                  vlo‘en¡ znaku CR na
                                             posici kursoru (vlo‘en¡
                                             © dku)
          CTRL-Y                           v˜maz aktu ln¡ © dky
          CTRL-Q-Y                         v˜maz © dky vpravo od
                                                kursoru

          1.1.4.4.  P©¡kazy pro pr ci s bloky.

          CTRL-K-B                         ozna‡en¡ za‡ tku bloku
          CTRL-K-K                         ozna‡en¡ konce bloku
          CTRL-K-H                         zru¨en¡ konce bloku
          CTRL-K-T                         ozna‡en¡ jednoho slova
                                             jako blok

                                                                  17






                         T u r b o  P a s c a l  v.5

          CTRL-K-C                         kop¡rov n¡ bloku na m¡sto
                                             ur‡en‚ kursorem
          CTRL-K-V                         p©enos bloku na m¡sto
                                             ur‡en‚ kursorem
          CTRL-K-Y                         vymaz n¡ bloku
          CTRL-K-R                         ‡ten¡ bloku z disku
          CTRL-K-W                         z pis bloku na disk

          1.1.4.5.  Ostatn¡ p©¡kazy.

          CTRL-K-D                         ukon‡en¡ editace
          CTRL-K-S                         ukon‡en¡ editace a
                                             ulo‘en¡ na disk
          CTRL-I                           tabel tor
          CTRL-Q-I                         p©ep¡na‡ automatick‚
                                             tabelace
          CTRL-Q-F                         vyhled n¡ ©etˆzce
          CTRL-Q-A                         n hrada ©etezce
          CTRL-L                           opakov n¡ posledn¡ho
                                             CTRL-Q-F resp. CTRL-Q-A
          CTRL-U                           p©eru¨en¡ p©¡kaz– CTRL-QF
                                             resp. CTRL-Q-A
          Ctrl-F1                          zobraz¡ Help na kl¡‡ov‚
                                             slovo, na kter‚m je
                                             nastavem kurzor.
          Ctrl-O O                         ulo‘¡ na po‡ tek souboru
                                             pr vˆ aktivn¡ direktivy
                                             p©eklada‡e

              Pro hled n¡ ©etˆzce se zad vaj¡ n sleduj¡c¡ podm¡nky:
                    B       hled n¡ nazpˆt
                    G       prohled v n¡ cel‚ho souboru
                    m       m-t˜ v˜skyt ©etˆzce
                    U       nerozli¨uj¡ se mal  a velk  p¡smena
                    W       hled n¡ pouze cel˜ch slov
                    N       p©i z mˆnˆ ©etˆzce se editor nept  na
                            ka‘dou z mˆnu
                    L       lok ln¡ hled n¡


          1.2.   Direktivy p©eklada‡e.

               Nˆkter‚  kompila‡n¡  vlastnosti  Turbo  Pascalu  jsou
          kontrolov ny   direktivami   p©eklada‡e.   Direktivy  jsou
          uv dˆny ve zdrojov‚m programu jako koment ©e se  speci ln¡
          syntax¡.  Jsou  shodn‚  s podm¡nkami,  kter‚ m–‘e u‘ivatel
          volit v p©¡kazech Option/Compiler nebo Option/Environment.
               Do programu se direktivy zapisuj¡ znakem $, za kter˜m
          n sleduje po‡ te‡n¡ p¡smeno pop©. parametry direktivy.


                                                                  18






                         T u r b o  P a s c a l  v.5

               {$B+}
               {$I FILE.INC}
               {$U C:\UNITS\MEM}
               {$DEFINE Debug}

               Direktivy m–‘eme rozdˆlit do 3 skupin:

          .  P©ep¡na‡e  mˆn¡ vlastnosti p©ekladu p©epnut¡m  on  nebo
          off    specifikovan‚  znam‚nky   +  nebo  -  n sleduj¡c¡mi
          bezprost©ednˆ za jm‚nem direktivy {$R-}.

          .  Parametrov‚ direktivy  specifikuj¡  parametry  p©ekladu
          (jm‚no souboru, velikost pamˆti a j.)

          .  Podm¡nkov‚  direktivy    kontroluj¡  podm¡nky  p©ekladu
          ‡ st¡  zdrojov‚ho  programu  zalo‘en‚   na      u‘ivatelem
          definovan˜ch podm¡nkov˜ch symbolech.

          1.2.1   P©ep¡na‡e

               Tyto  direktivy jsou glob ln¡ nebo lok ln¡.  Glob ln¡
          plat¡ pro cel˜ program  a  mus¡  b˜t  um¡stˆny  p©ed  jeho
          deklara‡n¡  ‡ st¡.  Lok ln¡  direktivy mohou b˜t kdekoli v
          programu  nebo  jednotce.   Jejich  platnost  kon‡¡  nov˜m
          z pisem t‚‘e direktivy.

          Boolean Evaluation

          Syntaxe:  {$B+}  {$B-}
          Implicitnˆ:  {$B-}
          Typ:  lok ln¡
          Ekvivalentn¡ p©¡kaz:  Options/Compiler/Boolean evaluation

               {$B+} - prov d¡ se celkov‚ vyhodnocen¡ v˜razu
          {$B-}  -  vyhodnocen¡  v˜razu  kon‡¡ jakmile je zn ma jeho
          hodnota

          Debug Information

          Syntaxe:  {$D+}  {$D-}
          Implicitnˆ:  {$D+}
          Typ:  glob ln¡
          Ekvivalentn¡ p©¡kaz:  Options/Compiler/Debug information

               {$D+}- zp–sob¡ generov n¡ informac¡ pro  ladˆn¡.  Pro
          programov‚ jednotky jsou tyto informace zaznamen ny v .TPU
          souborech. U soubor– p©ekl dan˜ch do pamˆti jsou ulo‘eny v
          pamˆti,  p©i  p©ekladu  na  disk  jsou zaznamen ny do .TPM
          souboru, jestli‘e je po‘adov no jeho generov n¡. Informace
          pro ladˆn¡ nemˆn¡ d‚lku ani rychlost v˜po‡tu .EXE soubor–.

                                                                  19






                         T u r b o  P a s c a l  v.5


          Force Far Calls

          Syntaxe:  {$F+}  {$F-}
          Implicitnˆ:  {$F+}
          Typ:  lok ln¡
          Ekvivalentn¡ p©¡kaz:  Options/Compiler/Force far calls

               {$F-} - Turbo Pascal automaticky vyb¡r  pro procedury
          a funkce deklarovan‚ v interface sekci jednotek far  model
          vol n¡ a pro ostatn¡ near.
          {$F+}  -  pro  v¨echny  procedury a funkce je model vol n¡
          far.

          Input/Output Checking

          Syntaxe:  {$I+}  {$I-}
          Implicitnˆ:  {$I+}
          Typ:  lok ln¡
          Ekvivalentn¡ p©¡kaz:  Options/Compiler/I/O checking

               {$I+}  -  automaticky  testuje  v˜sledky  vol n¡  I/O
          procedur  Je-li nastaveno {$I-} mus¡ u‘ivatel s m testovat
          chyby I/O operac¡ u‘it¡m funkce IOResult.

          Link Buffer

          Syntaxe:  {$L+}  {$L-}
          Implicitnˆ:  {$L+}
          Typ:  glob ln¡
          Ekvivalentn¡ p©¡kaz:  Options/Compiler/Link buffer

               Vestavˆn˜  sestavovac¡  program  je   dvojpr–chodov˜.
          Nejprve
          proch z¡  .TPU  soubory  a ozna‡uje procedury,  kter‚ bude
          sestavovat.  P©i druh‚m pr–chodu generuje  .EXE  soubor  a
          vyb¡r  ozna‡en‚ procedury z .TPU soubor–.
          {$L+} - .TPU soubory jsou v pamˆti p©i obou pr–chodech. To
          znamen ,  ‘e  sestaven¡  je  rychlej¨¡,  ale  zab¡r   v¡ce
          pamˆti.   Proto  velk‚  programy  je  t©eba  sestavovat  s
          p©ep¡na‡em {$L-}.

          Numeric Processing

          Syntaxe:  {$N+}  {$N-}
          Implicitnˆ:  {$N+}
          Typ:  glob ln¡
          Ekvivalentn¡ p©¡kaz:  Options/Compiler/Numeric processing

               {$N-}  -  pro  v¨echny  v˜po‡ty s re ln˜mi promˆnn˜mi

                                                                  20






                         T u r b o  P a s c a l  v.5

          jsou vol ny knihovn¡ podprogramy.
               {$N+} - pro v˜po‡ty s re ln˜mi promˆnn˜mi se  vyu‘¡v 
          numerick˜ koprocesor 8087.

          Range checking.

          Syntaxe:  {$R+}  {$R-}
          Implicitnˆ:  {$R+}
          Typ:  lok ln¡
          Ekvivalentn¡ p©¡kaz:  Options/Compiler/Range-checking

               {$R+} - v¨echna pole a ©etˆzcov‚ indexov‚ v˜razy jsou
          testov ny,   zda  nep©es hly  definovan‚  meze.   U  v¨ech
          skal rn¡chpromˆnn˜ch a interval–  je  testov n  definovan˜
          rozsah.  Testov n¡  zpomaluje  v˜po‡et  a  zvˆt¨uje  d‚lku
          programu. Proto je dobr‚ vyu‘¡t tuto podm¡nku p©i ladˆn¡ a
          vyzkou¨en˜ program ji‘ netestovat.

          Stack Overflow Checking

          Syntaxe:  {$S+}  {$S-}
          Implicitnˆ:  {$S+}
          Typ:  lok ln¡
          Ekvivalentn¡ p©¡kaz:  Options/Compiler/Stack checking

               {$S+} - p©eklada‡ testuje na za‡ tku ka‘d‚  procedury
          nebo funkce,  jestli m  v z sobn¡ku dost m¡sta pro lok ln¡
          promˆnn‚. Jestli‘e se testov n¡ neprov d¡ {$S-} m–‘e doj¡t
          k nedefinovateln˜m chyb m.

          Var-string Checking

          Syntaxe:  {$V+}  {$V-}
          Implicitnˆ:  {$V+}
          Typ:  lok ln¡
          Ekvivalentn¡ p©¡kaz:  Options/Compiler/Var-String Checking

          {$V+} - kontroluje  ©etˆzcov‚  promˆnn‚,  zda  form ln¡  a
          skute‡n‚  parametry  jsou identick‚ ©etˆzcov‚ typy.  Je-li
          {$V-},   je  povolena  jako  skute‡n˜  parametr  ©etˆzcov 
          promˆnn ,  i  kdy‘  jej¡  maxim ln¡ deklarovan  d‚lka nen¡
          stejn  jako u form ln¡ho parametru.

          1.2.2.  Parametrov‚ direktivy

          Include File

          Syntaxe: {$I filename}
          Typ: lok ln¡
          Ekvivalentn¡      p©¡kaz:      Options/Directories/Include

                                                                  21






                         T u r b o  P a s c a l  v.5

          directories

               P©eklada‡  vlo‘¡  do  programu soubor uveden‚ho jm‚na
          (implicitn¡ typ je .PAS).  Nen¡-li ur‡en˜ adres ©,  pak po
          prohled n¡ aktu ln¡ho adres ©e Turbo Pascal hled  soubor v
          adres ©¡ch               specifikovan˜ch          p©¡kazem
          Options/Directories/  Include  directories.  Turbo  Pascal
          povoluje   otev©en¡   pˆti   vstupn¡ch  soubor–  najednou.
          Vkl dan˜ soubor nem–‘e b˜t specifikov n  uvnit©  p©¡kazov‚
          ‡ sti programu.

          Link Object File

          Syntaxe: {$L filename}
          Typ: lok ln¡
          Ekvivalentn¡       p©¡kaz:      Options/Directories/Object
          directories

               Direktiva  za©¡d¡  sestaven¡  jmenovan‚ho  souboru  s
          programem nebo jednotkou v Turbo Pascalu. Vkl dan‚ soubory
          (procedury  a  funkce) jsou ps ny v assembleru a p©elo‘en‚
          do formy .OBJ. V programu nebo jednotce,  kam se vkl daj¡,
          mus¡ b˜t deklarov ny jako external.
               P©:  function LoCate(Ch:char):char;external;
               Pokud nen¡ hledan˜ soubor v bˆ‘n‚m adres ©i, hled  ho
          Turbo  Pascal  v  adres ©¡ch  uveden˜ch v p©¡kazu Options/
          Directories/Object Directories.

          Memory Allocation Sizes

          Syntaxe: {$M stacksize,heapmin,heapmax}
          Implicitnˆ: {$M 16384,0,655360}
          Typ: glob ln¡
          Ekvivalentn¡ p©¡kaz: Options/Compiler/Memory sizes

          Direktiva  specifikuje  rozdˆlen¡  pamˆti   pro   program.
          Stacksize  je velikost z sobn¡kov‚ho segmentu a mus¡ b˜t v
          rozmez¡ 1024 a‘ 65520, doln¡ mez pamˆti heapmin mus¡ b˜t v
          rozmez¡ 0 a‘ 655360 a horn¡ mez heapmax v rozmez¡  heapmin
          a‘ 655360.
          Direktiva  $M  pou‘it   v  programov‚  jednotce nem  ‘ dn˜
          v˜znam.

          Unit File Name

          Syntaxe: {$U filename}
          Typ: lok ln¡
          Ekvivalentn¡ p©¡kaz: Options/Directories/Unit directories

          Direktiva dovoluje specifikovat jm‚no  zdrojov‚ho  souboru

                                                                  22






                         T u r b o  P a s c a l  v.5

          programov‚  jednotky,  v  p©¡padˆ,  ‘e  jm‚na  jednotky  a
          souboru jsou rozd¡ln .


          1.2.3.  Podm¡nkov‚ direktivy

               Podm¡nkov‚ direktivy umo‘¤uj¡ vylou‡it ‡ st  programu
          z   p©ekladu   v   z vislosti  na  zvolen˜ch  podm¡nkov˜ch
          symbolech.
               U‘ivatel si m–‘e vybrat jednu  ze  dvou  podm¡nkov˜ch
          konstrukc¡:
                  {$IF   }  ...   {$ENDIF}
                  {$IF   }  ...   {$ELSE}  ...   {$ENDIF}

               Podm¡nkov‚ symboly

               Podm¡nkov‚  symboly  se definuj¡ a ru¨¡ n sleduj¡c¡mi
          direktivami:
               {$DEFINE name}       definuje symbol
               {$UNDEF name}        ru¨¡ definici symbolu

               Turbo Pascal m  nadefinovan‚ tyto standardn¡ symboly:
          VER50      indikuje versi Turbo Pascalu
          MSDOS      indikuje opera‡n¡ syst‚m
          CPU86      indikuje mikroprocesor
          CPU87      definuje p©¡tomnost koprocesoru 8087

               Dal¨¡ symboly m–‘e u‘ivatel definovat pomoc¡  uveden‚
          direktivy   nebo   p©¡kazem   Options/Compiler/Conditional
          defines.

               Podm¡nky

               Podm¡nky  pro  p©eklad  ‡ sti   programu   oddˆlen‚ho
          podm¡nkov˜mi direktivami jsou n sleduj¡c¡:

               {$IFDEF symbol} p©ekl d  n sleduj¡c¡ text,
                               jestli‘e je symbol definov n
               {$IFNDEF symbol}    p©ekl d  n sleduj¡c¡ text,
                               jestli‘e    symbol   nen¡   definov n
          {$IFOPT switch}     p©ekl d  n sleduj¡c¡ text podle
                               nastaven¡ p©ep¡na‡e (+ nebo -)
               {$ELSE}             p©ep¡n  mezi textem p©ed a za
                                   t¡mto p©¡kazem
               {$ENDIF}            ukon‡uje podm¡nku






                                                                  23






                         T u r b o  P a s c a l  v.5

             P©:{$IFDEF CPU87}
                  {$N+}
                  type
                    real = double;
          {$ELSE}
                {$N-}
                   type
                    single = real;
                    double = real;
                    extended = real;
                    comp = real;
                {$ENDIF}







































                                                                  24






                         T u r b o  P a s c a l  v.5

          2. Popis jazyka

               V n sleduj¡c¡ch kapitol ch bude  pops n  jazyk  Turbo
          Pascal  a  jeho  odli¨nosti  od  standardu.  Omezen¡ proti
          standardu jsou zd–raznˆna ve zvl ¨tn¡ kapitole. Vzhledem k
          velk‚mu  po‡tu  roz¨¡©en¡  jazyka  nejsou  tato  roz¨¡©en¡
          zvl ¨‹ popisov na a jsou sou‡ st¡ dal¨¡ch kapitol.

          2.1. Z kladn¡ prvky jazyka.

               Z kladn¡  symboly  jazyka  jsou  p¡smena,  ‡¡slice  a
          speci ln¡ znaky. P¡smena jsou
              A a‘ Z,a a‘ z a podtr‘en¡ _
                 ’¡slice
              0 a‘ 9
                  a speci ln¡ symboly
               + - * / = ^ < > ( ) [ ] { } . , : ; ' # $ @
               P©eklada‡ nerozli¨uje ( kromˆ pou‘it¡ v  ©etˆzcech  )
          mal   a velk  p¡smena.  Pro nˆkter‚ oddˆlova‡e a oper tory
          jsou vyhra‘eny dvojice speci ln¡ch symbol–. Jsou to
               :=  <>  <=  >=  ..  (.  .)  (*  *)

               V jazyku TURBO Pascal jsou vyhrazena tzv. reservovan 
          slova,  kter‚ program tor nesm¡ pou‘¡t k jin˜m £‡el–m.Tato
          rezervovan  slova jsou

            absolute      and            array          begin
            case          const          div            do
            downto        else           end            external
            file          for            forward        function
            goto          if             implementation in
            inline        interface      interrupt      label
            mod           nil            not            of
            or            packed         procedure      program
            record        repeat         set            shl
            shr           string         then           to
            type          unit           until          uses
            var           while          with           xor

               Program  v jazyce Turbo Pascal je tvo©en posloupnost¡
          identifik tor–,   reservovan˜ch  slov,   ‡¡sel,   mezer  a
          speci ln¡ch  symbol–.  Ka‘d  dvojice bezprost©ednˆ po sobˆ
          jdouc¡ch identifik tor–,  reservovan˜ch  slov  nebo  ‡¡sel
          mus¡ b˜t oddˆlena alespo¤ jednou mezerou nebo p©echodem na
          novou © dku nebo koment ©em ( jak˜koliv text uzav©en˜ mezi
          symboly  (*  a  *) nebo mezi { a } ).  Identifik tory mus¡
          za‡¡nat p¡smenem a rozli¨uje se prvn¡ch 63 znak–.
               Kromˆ reservovan˜ch slov m  Turbo Pascal  je¨tˆ  ©adu
          standardn¡ch   identifik tor–.    Pou‘ije-li   program tor
          nˆkter˜ ze

                                                                  25






                         T u r b o  P a s c a l  v.5

          standardn¡ch identifik tor– ve vlastn¡m kontextu,  zast¡n¡
          t¡m jejich p–vodn¡ v˜znam,  nap©. m–‘e p©edefinovat funkci
          sin.
               Maxim ln¡ d‚lka  © dky  zdrojov‚ho  programu  je  127
          znak–, znaky za touto posic¡ jsou ignorov ny.

          2.2. Struktura programu.

               Program   v   Turbo  Pascalu  m   strukturu  obdobnou
          standardn¡mu Pascalu  s  nˆkolika  vyj¡mkami.  V  hlavi‡ce
          programu  nemus¡  b˜t  uvedeny  pou‘it‚ soubory,  hlavi‡ka
          programu  nemus¡b˜t  dokonce  ani  uvedena  a   m    pouze
          dokumenta‡n¡  charakter.  Po  hlavi‡ce  programu n sleduje
          seznam pou‘it˜ch programov˜ch jednotek,  kter˜  je  uveden
          za rezervovan˜m slovem uses. Seznam
          je ukon‡en st©edn¡kem.  Automaticky se do ka‘d‚ho programu
          zahrnuje   programov    jednotka   System.   Tento   n zev
          programov‚ jednotky se v tomto seznamu neuv d¡. Nevyu‘¡v -
          li  program  ‘ dnou  programovou  jednotku,  je  tato ‡ st
          vynech na v‡etnˆ £vodn¡ho uses.
               Po t‚to ‡ sti n sleduj¡ definice a deklarace n vˆ¨t¡,
          typ–, promˆnn˜ch, funkc¡ a procedur. Tyto jednotliv‚ £seky
          v¨ak nemaj¡ p©edepsan‚ pevn‚ po©ad¡ a mohou b˜t dokonce  i
          nˆkolikr t  opakov ny  (  viz  p©¡klad  ).  Je pouze t©eba
          dodr‘et pravidlo,  ‘e p©ed ka‘d˜m pou‘it¡m  objektu,  mus¡
          b˜t tento objekt definov n nebo deklarov n.

          P©.:     Program ukazka;
                   uses Graph3;
                   Const max=100;
                   Var a : array[1..max] of real;
                       i : integer;
                   Const header = 'Zakladni skola ';

               Po  deklara‡n¡ ‡ sti n sleduje slo‘en˜ p©¡kaz,  kter˜
          tvo©¡ tˆlo programu. Za z vˆre‡n˜m p©¡kazem end je uvedena
          te‡ka.  Obdobnou  strukturu  maj¡  i  deklarace  funkc¡  a
          procedur.  V    deklaraci  funkc¡ a procedur nen¡ povolena
          sekce uses.












                                                                  26






                         T u r b o  P a s c a l  v.5

          2.3. Standardn¡ typy dat.

          2.3.1. Celo‡¡seln˜ typ.

               Z kladn¡ typ Integer dovoluje pracovat s promˆnn˜mi v
          rozsahu -Maxint+1 a‘  Maxint,  kde  Maxint  je  konstanta,
          definovan   jazykem  Pascal  a  pro  Turbo Pascal je rovna
          32767. Promˆnn  typu Integer zauj¡m  2 byty pamˆti.  Turbo
          Pascal nab¡z¡ ‡ty©i dal¨¡ typy celo‡¡seln˜ch promˆnn˜ch  a
          to
          ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
              TYP                  ROZSAH               PO’ET SLABIK
          ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
             byte                 0..255                    1
             shortint           -128..127                   1
             integer           -32768..32767                2
             word                0..65535                   2
             longint       -2147483648..2147483647          4

          Je povolen z pis ‡¡sel v hexadecim ln¡ notaci,  ‡¡slo mus¡
          p©edch zet znak $ ( nap©. $16 = 22 des¡tkovˆ ).

          2.3.2. Typy re ln˜ch ‡¡sel.

               Z kladn¡ typ Real m  rozsah ‡¡sel 10-38 a‘ 1038     s
          p©esnost¡  na 11 platn˜ch ‡¡slic a je um¡stˆn na 6 bytech.
          Je-li k dispozici  matematick˜  koprocesor  8087,  jsou  k
          dispozici typy podle n sleduj¡c¡ tabulky.

          ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
          Typ         Rozsah         Platn‚ ‡¡slice      Po‡et slabik
          ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
          Real       10-38..1038           11                  6
          Single     10-38..1038            7                  4
          Double     10-38..1038           15                  8
          Extended   10-4931..104931       19                 10

          2.3.3. Typ Char

               Promˆnn   typu  Char  je  ur‡ena  k  pr ci se znaky a
          obsahuje ,pr vˆ jeden znak v ASCII  kodu.  Konstanty  typu
          Char   jsou   uzav©eny   mezi  dvojici  apostrof–,   nap©.
          'd','D',''''. Zde si v¨imnˆme faktu, ‘e 'd' je rozd¡ln‚ od
          'D' a znak apostrof mus¡me vyj d©it  jako  dvojici.  Turbo
          Pascal  umo‘¤uje definovat i tzv.©¡d¡c¡ znaky pomoc¡ znak–
          ^ a #.  Nap©.  #65 je stejn‚ jako 'A' a ^G  je  shodn‚  se
          znakem  CTRL-G.  Je-li znak promˆnn  typu Char,  jsou tedy
          spr vn  p©i©azen¡
                  znak:='A'  nebo   znak:=^A    nebo   znak:=#10
          ž¡d¡c¡ znaky lze pomoc¡ znaku ^ definovat v rozsahu 0..31.

                                                                  27






                         T u r b o  P a s c a l  v.5


          2.3.4. Typ string

               Pro deklaraci promˆnn‚,  kter  je ur‡ena pro pr ci  s
          ©etˆzcem  znak– se pou‘¡v  promˆnn  typu string.  Za t¡mto
          rezervovan˜m slovem m–‘e n sledovat d‚lka ©etˆzce uzav©en 
          v hranat˜ch z vork ch. Nen¡-li d‚lka uvedena,  p©edpokl d 
          se d‚lka 255 znak–.  Deklarace promˆnn‚ m–‘e vypadat nap©.
          takto:

           var
              a : string[30];
              b : string;
          Turbo Pascal p©id v  k promˆnn‚ string internˆ jeden  byte
          na   po‡ tek  ©etˆzce,   kter˜  obsahuje  skute‡nou  d‚lku
          ©etˆzce.  Pro pr ci  s  ©etˆzci  je  p©eddefinov no  mnoho
          funkc¡ a procedur.

          2.3.5. Typ Boolean

               P©eddefinovan˜  typ Boolean nab˜v  dvou hodnot - True
          a False.  Promˆnn‚ tohoto typu  sm¡  b˜t  p©i©azena  p©¡mo
          nˆkter  z tˆchto hodnot nebo v˜raz typu Boolean.

          2.4. U‘ivatelsky definovan‚ typy.

          2.4.1. Vyjmenovan˜ typ

               Mezi  skal rn¡  typy  pat©¡  i tzv.  vyjmenovan˜ typ.
          Tento  typ  umo‘¤uje  program torovi  definovat   line rn¡
          uspo© d n¡     hodnot,     kter‚    jsou    reprezentov ny
          identifik tory.   Pou‘it‚  identifik tory  jsou  pro  dan˜
          program   ch p ny   jako  konstanty  typu,   v  nˆm‘  byly
          vyjmenov ny.
          P©.:

          type
          dny=(pondeli,utery,streda,ctvrtek,patek,sobota,nedele);
              operator=(plus,minus,krat,deleno);

               Ji‘ jsme se sezn mili s jedn¡m vyjmenovan˜m  typem  -
          Boolean. Ten je definov n jako

                Boolean = ( false,true );

               Ka‘d   pou‘it   konstanta  m  ve vnit©n¡ representaci
          p©i©azeno  ‡¡slo,  kter‚  odpov¡d   jej¡mu  po©ad¡.  Prvn¡
          uveden˜ identifik tor m  p©i©azenu 0 (nulu). Pro tento typ
          jsou definov ny standardn¡ funkce :


                                                                  28






                         T u r b o  P a s c a l  v.5

                succ(a)   v˜sledek je n sleduj¡c¡ hodnota promˆnn‚ a
                pred(a)   v˜sledek je p©edchoz¡ hodnota promˆnn‚ a
                ord(a)    v˜sledek je cel‚ ‡¡slo, kter˜m je promˆnn                     
          a representov na.

          P©.:    succ(pondeli)   je utery
                  pred(patek)     je ctvrtek
                  ord(minus)      je 1 (viz p©edchoz¡ definice)
             D le plat¡
                  ord(succ(a))=ord(a)+1
                  ord(pred(a))=ord(a)-1

                 Funkce  succ  a  pred  nejsou definov ny pro krajn¡
          prvky.
               Mezi  promˆnn˜mi  vyjmenovan‚ho  typu  jsou  povoleny
          relace
          <,>,<=,>=,<>,= s n sleduj¡c¡m smyslem
              a rel b   pr vˆ kdy‘   ord(a) rel ord(b)
          kde  rel    je nˆkter  z relac¡,  a a b jsou promˆnn‚ nebo
          konstanty jednoho vyjmenovan‚ho typu.

          2.4.2. Typ interval.

               Program tor si m–‘e definovat sv–j typ jako  interval
          z ji‘ definovan‚ho skal rn¡ho typu ( tj. Integer, Boolean,
          Char  a vyjmenovan˜ typ).  Nelze definovat interval z typu
          Real.  Definice intervalu specifikuje doln¡ a  horn¡  mez,
          oddˆlen‚ dvˆma te‡kami .. .
          P©.:
          type
               prac_dny = pondeli..patek;
               weekend = sobota..nedele;
               sto = 0..100;
               cislice = '0'..'9';

               Promˆnn˜m tohoto typu sm¡ b˜t p©i©azeny pouze hodnoty
          spadaj¡c¡ do definovan‚ho intervalu. P©eklada‡ automaticky
          nekontroluje,  zda  je  toto  pravidlo  p©i  bˆhu programu
          dodr‘ov no.  Program tor si kontrolu mus¡  vy‘ dat  pomoc¡
          direktivy {$R+}.
               Z  dosud  uveden˜ch  typ– je typu interval nap©.  typ
          Byte, kter˜ je definov n jako
                    Byte= 0..255;
               Pou‘it¡ tohoto typu zp©ehledn¡ program a usnadn¡ jeho
          odladˆn¡.  Dal¨¡ v˜hoda je u¨et©en¡ pamˆti v p©¡padˆ,  kdy
          doln¡  hranice  je  nez porn   a horn¡ men¨¡ ne‘ 256.  Pak
          promˆnn  tohoto typu je um¡stˆna do jednoho byte.

          2.4.3. Typ ukazatel


                                                                  29






                         T u r b o  P a s c a l  v.5

               Doposud uveden‚  typy  mohly  uchov vat  pouze  data.
          Promˆnn   typu  ukazatel nese nov˜ typ informace - adresu.
          Tato promˆnn  v podstatˆ ukazuje na  data. V pamˆti zab¡r 
          ‡ty©i byty, v m‚nˆ v˜znamn‚m slovˆ je tzv. offset, ve v¡ce
          v˜znamn‚m  slovˆ  segmentov   adresa.   Hodnota   nil   je
          zaznamen na jako obˆ adresy nulov‚.
               Promˆnn   typu ukazatel se deklaruje pomoc¡ znaku ^ a
          typu promˆnn‚, na kterou bude ukazatel ukazovat. Nap©.

          var   buffer:string[20];
                pbuf:^buffer;

               Promˆnnou  pbuf  lze  pak   pou‘¡t   ve   spojen¡   s
          procedurami new a dispose ,nebo ve spojen¡ s oper torem @.

          2.4.4. Typ pole.

               Typ  pole  m   v  Turbo Pascalu stejn˜ v˜znam jako ve
          standardn¡m Pascalu. Po‡et dimenz¡ nen¡ omezen.  Maxim ln¡
          povolen  d‚lka pole je 65520 byt– ( z toho plyne p©ibli‘n 
          velikost  nejvˆt¨¡  re ln‚  matice array[1..100,1..100] of
          real).  Slovo packed nem  v Turbo  Pascalu  v˜znam,  nebo‹
          p©eklada‡ ukl d  v¨echny promˆnn‚ automaticky tak, jako by
          bylo uvedeno slovo packed. Pole znak– ve formˆ
             array [m..n] of char;
          m   v˜znam  ©etˆzce  znak– a m  nˆkter‚ vlastnosti,  kter‚
          nemaj¡ ostatn¡ promˆnn‚  typu  pole  (  viz  kompatibilita
          typ–).

          2.4.5. Typ z znam.

               Typ  z znam  je v Turbo Pascalu shodn˜ se standardn¡m
          Pascalem. Je zde povolena fixn¡ i variabiln¡ ‡ st z znamu.
          Fixn¡ ‡ st mus¡ b˜t uvedena p©ed ‡ st¡  variabiln¡.  Slovo
          packed  je  opˆt  bez  v˜znamu  a  nen¡  t©eba jej uv dˆt.
          Promˆnn  typu z znam  sm¡  opˆt  nab˜vat  maxim lnˆ  65520
          byt–.
          P©.:
           record
               prijmeni,jmeno : string [40];
               narozen : datum;
               case stav : dstav of
                  svob : ( );
                  zen : (prijm_druha : string [40];
                         naroz_druha: datum);
                  rozv : (datum_rozv : datum );
             end;




                                                                  30






                         T u r b o  P a s c a l  v.5

          2.4.6. Typ mno‘ina.

               Typ  mno‘ina  m   v  Turbo  Pascalu  maxim ln¡ rozsah
          b zov‚ho typu 256 hodnot. Doln¡ a horn¡ hranice mus¡ b˜t v
          rozsahu 0..255.  Proto nem–‘e b˜t  b zov˜m  typem  mno‘iny
          nap©.  promˆnn   typu shortint,  integer nebo word ( d  se
          obej¡t pomoc¡ intervalu). Je definov na hodnota [],  kter 
          zna‡¡  pr zdnou  mno‘inu  a  je kompatibiln¡ se v¨emi typy
          mno‘ina.
          P©.:
               colors = (bila,zluta,zelena,modra,cervena);
               duha =  set of colors;

          2.4.7. Typ soubor

               Typ  soubor  obsahuje  line rn¡  sekvenci  komponent,
          kter‚  jsou  libovoln‚ho  typu,  kromˆ  typu  soubor    na
          jak‚koliv £rovni  strukturovan‚ho  typu.  Po‡et  komponent
          nen¡ deklarac¡ ur‡en. Typ se definuje pomoc¡ z pisu
             file of type   nebo    file
               Je-li  uveden typ jednotliv˜ch komponent,  jedn  se o
          soubor s udan˜m typem a ovl d n¡ tohoto souboru je pops no
          v kapitole 2.10.3.
               Nen¡-li ud n typ komponent,  pracuje se  s  fyzick˜mi
          bloky  na  nejni‘¨¡  £rovni.  Soubor tohoto typu se ovl d 
          pomoc¡ procedur, popsan˜ch v kapitole 2.10.3.
               Kromˆ tˆchto  soubor–  je  definov n  standardn¡  typ
          text,  kter˜  definuje  textov˜  soubor a jeho ovl d n¡ se
          li¨¡ od soubor– popsan˜ch v˜¨e (viz kapitolu 2.10.1).

          2.4.8. Typov  zmˆna hodnoty.

               Typ v˜razu m–‘e b˜t zmˆnˆn na jin˜ typ pomoc¡  typov‚
          zmˆny. Ta m  syntaxi

                type-identifier( expression )

              Zap¡¨eme-li   tento   v˜raz,   je  hodnota  expression
          p©evedena na hodnotu  odpov¡daj¡c¡  typu  type-identifier.
          Oba typy mus¡ b˜t buƒ ordin ln¡ho typu nebo typu ukazatel.
          Typov   zmˆna  hodnoty  je ch p na jako funkce a nem–‘e se
          tedy nap©.  objevit na lev‚ stranˆ p©i©azovac¡ho p©¡kazu (
          na rozd¡l od typov‚ zmˆny promˆnn‚ ).

          2.4.9. Typov  zmˆna promˆnn‚

              Tato  mo‘nost  dovoluje  zpracov vat  stejn‚  pamˆ‹ov‚
          m¡sto r–zn˜m zp–sobem.  Pou‘¡v   se  opˆt  n zvu  typu  ke
          konverzi pamˆ‹ov‚ho m¡sta na ur‡en˜ typ.


                                                                  31






                         T u r b o  P a s c a l  v.5

              type-identifier ( variable )

              Je-li tento z pis pou‘it na m¡sto z pisu promˆnn‚,  je
          ch p n jakoby  se  zde  vyskytovala  promˆnn   typu  type-
          identifier.

          P©.:
            type Point = record
                     x,y : Iinteger;
                 end;
                 List = array[1..2] of Integer;
            var  P : Point;
                 L : longint;
                 N : Integer;
            begin  P := Point(L);
                   N := Point(l).x;
                   longint(P):= longint(P) + $00080008;
                   List(P)[N] := 32;
            end.


          2.5. Konstanty s udan˜m typem.

               Konstanty   s   udan˜m  typem  umo‘¤uj¡  inicializaci
          promˆnn˜ch.  Na rozd¡l od norm ln¡ch  konstant  v  Pascalu
          maj¡  konstanty  s  udan˜m  typem  uvedenu nejen po‡ te‡n¡
          hodnotu, ale i typ dan‚ promˆnn‚.  Tak je mo‘n‚ vytv ©et i
          strukturovan‚   promˆnn‚   se  specifikovanou    po‡ te‡n¡
          hodnotou.  S tˆmito konstantami se d le v programu zach z¡
          jako  s  norm lnˆ deklarovan˜mi promˆnn˜mi,  tj.  mohou se
          objevit i na lev‚ stranˆ p©i©azovac¡ho p©¡kazu.  Konstanty
          s  udan˜m  typem  jsou  inicializov ny  pouze  na  po‡ tku
          programu.  Nejsou tedy na vstupu  do  podprogramu  lok lnˆ
          deklarovan‚    konstanty    s    uveden˜m    typem   znovu
          inicializov ny !

          2.5.1. Konstanty s jednoduch˜m typem.

               P©i uveden‚m jednoduch‚m  typu  je  deklarace  snadno
          pochopiteln  s n sleduj¡c¡ho p©¡kladu:
              const
                   max : Integer = 0;
                   min : Integer = -999;
                   CR : Char = #13;
                   desetina : real = 0.1;
               Zd–raznˆme,  ‘e  se ve skute‡nosti jedn  o promˆnn‚ s
          udanou po‡ te‡n¡ hodnotou a nelze je tedy pou‘¡t nap©. p©i
          definici dal¨¡ch konstant nebo typ–.  N sleduj¡c¡  pou‘it¡
          nen¡ tedy dovoleno!


                                                                  32






                         T u r b o  P a s c a l  v.5

           const min : byte = 0;
                 max : byte = 128;
          type  Vector = array[min..max] of real;


          2.5.2. Konstanty s typem string.

               Tyto  konstanty specifikuj¡ maxim ln¡ d‚lku ©etˆzce a
          po‡ te‡n¡ hodnotu ©etˆzce. Nejl‚pe v¨e osvˆtl¡ p©¡klad:

          const  Header : string[7] = 'Zahlavi';
                 NewLine : string[2] = #13#10;
                 Jmeno : string[20] = 'Nikdo ';

          2.5.3. Konstanty s typem pole.

               Hodnoty, kter‚ nab˜vaj¡ jednotliv‚ polo‘ky pole, jsou
          uvedeny v z vork ch a oddˆleny ‡ rkami.

          P©.:   type pole = array[1..5] of byte;
                 const  a : pole = (0,1,2,3,4);

              Pak pole a nab˜v  na po‡ tku programu tˆchto hodnot:
           a[1] = 0    a[2] = 1    a[3] = 2    a[4] = 3    a[5] = 4
              U pol¡ znak– je mo‘n  zkr cen  forma z pisu. Definici

          type    CisZnaky = array [0..9] of char;
          const
            Cisl:CisZnaky=('0','1','2','3','4','5','6','7','8','9');

          je mo‘n‚ zapsat ve tvaru

          const Cisl : CisZnaky = ('0123456789');

               P©i v¡cedimension ln¡m poli jsou konstanty pro ka‘dou
          dimenzi uzav©eny do z vorek a oddˆleny ‡ rkou. Nap©.:

            const a:array[1..2,1..2] of real=((0.0,1.0),(2.0,3.0));

               Nejvnit©nˆj¨¡ z vorky odpov¡daj¡ nejpravˆj¨¡ dimenzi.
          Pole a nab˜v  tedy tˆchto hodnot:
           a[1,1] = 0.0   a[1,2] = 1.0   a[2,1] = 2.0   a[2,2] = 3.0

          2.5.4. Konstanty s typem z znam.

               Konstanty s udan˜m typem record maj¡ hodnoty  uvedeny
          v  z vork ch  a s ka‘dou hodnotou je spjat i identifik tor
          jednotliv˜ch  polo‘ek  z znamu,  Jednotliv‚  polo‘ky  jsou
          oddˆleny st©edn¡kem. P©.:


                                                                  33






                         T u r b o  P a s c a l  v.5

          type   Complex = record
                            x,y : real;
                           end;
          const   ImJedn : Complex =(x : 0.0 ; y : 1.0 );
                  RealJedn : Complex = (x : 1.0 ; y : 0.0);

               Polo‘ky mus¡ b˜t uvedeny ve stejn‚m po©ad¡, jako jsou
          uvedeny  v  definici  typu.  U  promˆnn‚ ‡ sti z znamu lze
          rovnˆ‘ t¡mto zp–sobem  nastavit  vybranou  vˆtev  promˆnn‚
          ‡ sti z znamu.

          2.5.5. Konstanty s typem mno‘ina.

               Deklarace  tˆchto  konstant obsahuje po‘adovan˜ po‡et
          ‡len– ( m–‘e b˜t i nulov˜ ) uzav©en˜ do hranat˜ch  z˜vorek
          a  oddˆlen˜ch  ‡ rkou.  ’leny  mno‘iny  lze specifikovat i
          intervalem. P©.:

            type   digits = set of 0..9;
                   letters = set of 'a'..'z';
            const  Even : digits = [0,2,4,6,8];
                   Vowels : letters = ['a','e','i','u','o','y'];
                   HexDig:set of '0'..'Z'=['0'..'9','A'..'F'];

          2.5.6. Konstanty s typem ukazatel.

               Deklarace tˆchto konstant sm¡ obsahovat pouze hodnotu
          nil.

           P©.:
             type  Ptr = ^Pracov;
                   Pracov = record
                             jmeno : string[20];
                             dalsi : Ptr;
                            end;
             const  seznam : Pracov = (jmeno : 'Nikdo';dalsi : nil);
                    prvni : Ptr = nil;

          2.6. P©¡kazy.

               M me-li nadeklarovan  data,  budeme  s  nimi  obvykle
          nˆjak˜m zp–sobem manipulovat. To n m umo‘¤uje ©ada p©¡kaz–
          v  Turbo Pascalu.  Ka‘d˜ p©¡kaz m–‘e b˜t ozna‡en n vˆ¨t¡m,
          kter‚ je oddˆleno od p©¡kazu dvojte‡kou.  T‚mˆ©  v  ka‘d‚m
          p©¡kaze  se  vyskytne  pojem  v˜raz,  a  proto  si nejprve
          v¨imnˆme tohoto pojmu.

          2.6.1. V˜razy

               V˜razy se  skl daj¡  z  operand–  a  oper tor–.  Jako

                                                                  34






                         T u r b o  P a s c a l  v.5

          operand  mohou  vystupovat  konstanty,  promˆnn‚  a z pisy
          funkc¡.  Oper tory v Turbo Pascalu rozli¨ujeme na un rn¡ a
          bin rn¡.   Bin rn¡   oper tory   se   zapisuj¡  v  obvykl‚
          algebraick‚  formˆ  nap©.   a+b  apod.   Un rn¡   oper tor
          p©edch z¡  v‘dy  operand  nap©.  -b .  Kromˆ aritmetick˜ch
          oper tor– rozezn v me oper tory bitov‚, rela‡n¡,  logick‚,
          adresn¡,  mno‘inov‚  a  ©etˆzcov‚.  V˜razy  se vyhodnocuj¡
          podle priorit, p©i shodn‚ prioritˆ zleva doprava. Prioritu
          oper tor– ud v  n sleduj¡c¡ tabulka.
          ______________________________________________________________
           Oper tor                   priorita      kategorie
          ______________________________________________________________
            @,not                    nejvy¨¨¡       un rn¡ oper tory
            *,/,div,mod,and,shl,shr     ³           oper tory n soben¡
                                        ³
            +,-,or,xor                  V           oper tory slu‡ov n¡
            =,<>,<,>,<=,>=,in        nejni‘¨¡       rela‡n¡ oper tory


          2.6.1.1. Aritmetick‚ oper tory.

               N sleduj¡c¡  tabulka  uv d¡  mo‘n‚  typy  operand–  a  typ
          v˜sledku pro uveden˜ oper tor.

          ______________________________________________________________
          Oper tor    Operace      Typ operand–        Typ v˜sledku
          ______________________________________________________________
          +        s‡¡t n¡             celo‡¡seln˜    celo‡¡seln˜
                                          re ln˜         re ln˜
            -        ode‡¡t n¡           celo‡¡seln˜    celo‡¡seln˜
                                          re ln˜         re ln˜
            *        n soben¡            celo‡¡seln˜    celo‡¡seln˜
                                          re ln˜         re ln˜
            /        dˆlen¡              celo‡¡seln˜    re ln˜
                                          re ln˜         re ln˜
           div     celo‡¡seln‚ dˆlen¡    celo‡¡seln˜    celo‡¡seln˜
           mod          zbytek           celo‡¡seln˜    celo‡¡seln˜

          Pozn.:  Oper tory  +  a  - jsou rovnˆ‘ pou‘ity jako un rn¡
          aritmetick‚ oper tory v  obvykl‚m  v˜znamu.    D le  je  +
          pou‘ito  pro  operace s ©etˆzci,  mno‘inami a * a - rovnˆ‘
          jako mno‘inov‚ oper tory.
               Jsou-li oba operandy oper tor– +,  -,  *  re ln‚,  je
          typ v˜sledku real p©i direktivˆ $N- nebo extended p©i $N+.
               Oper tor    mod   vrac¡   zbytek   po   dˆlen¡   dvou
          celo‡¡seln˜ch  operand–,   znam‚nko  je  shodn‚  s  prvn¡m
          operandem  (viz  kapitola  Srovn n¡  Turbo  Pascal  4.0 se
          standardn¡m Pascalem ).



                                                                  35






                         T u r b o  P a s c a l  v.5

          2.6.1.2. Bitov‚ a logick‚ oper tory.

               Bitov‚  a  logick‚  oper tory  pracuj¡  s  promˆnn˜mi
          celo‡¡seln‚ho typu.  Operace jsou prov dˆny na ka‘d‚m bitu
          promˆnn‚.  Operace posuvu pracuj¡ jako logick˜ posuv,  tj.
          p©ebyte‡n‚ bity se ztr cej¡.
          __________________________________________________________
          Oper tor     Operace         Typ operand–   Typ v˜sledku
          __________________________________________________________    
          not       bitov  negace     celo‡¡seln˜    celo‡¡seln˜
              and       bit. log.sou‡in   celo‡¡seln˜    celo‡¡seln˜
              or        bit.log.sou‡et    celo‡¡seln˜    celo‡¡seln˜
              xor       bit.exclus.sou‡et celo‡¡seln˜    celo‡¡seln˜
              shl       posun doleva      celo‡¡seln˜    celo‡¡seln˜
              shr       posun doprava     celo‡¡seln˜    celo‡¡seln˜

               Operace  i  shl  j  resp.  i shr j posouvaj¡ hdnotu i
          doleva resp. doprava o j bit–.

          2.6.1.3. Boolean oper tory

          __________________________________________________________
          Oper tor    Operace        Typ operand–     Typ v˜sledku
          __________________________________________________________   
          not          negace        Boolean           Boolean
             and       logick˜ sou‡in   Boolean           Boolean
             or        logick˜ sou‡et   Boolean           Boolean
             xor       exclusivn¡ or    Boolean           Boolean

               Direktiva $B umo‘¤uje v Turbo  Pascalu  dvoj¡  zp–sob
          vyhodnocen¡  Boolean v˜razu.  P©i direktivˆ {$B+} je ka‘d˜
          v˜raz vyhodnocen kompletnˆ ( stejnˆ  jako  ve  standardn¡m
          Pascalu ).  P©i direktivˆ {$B-} je implementov no zkr cen‚
          vyhodnocov n¡ v˜raz–, tj. v˜raz se p©estane vyhodnocovat v
          okam‘iku, kdy zb˜vaj¡c¡ ‡ st v˜razu ji‘ nem–‘e m¡t vliv na
          v˜sledek.  To umo‘¤uje ps t konstrukce,  kter‚ nejsou  p©i
          standardn¡m vyhodnocov n¡ spr vn‚ nap©.:

            while (I<=Length(S) and (S[I]<>' ') do Inc(I);

          Druh   ‡ st  v˜razu  nen¡  vyhodnocena,  je-li  prvn¡ ‡ st
          False.

          2.6.1.4. žˆtˆzcov‚ oper tory

              Kromˆ ©ady standardn¡ch funkc¡ pro pr ci s ©etˆzci  m 
          Turbo  Pascal  i  operaci  concatenation  ( spojen¡ ) dvou
          ©etˆzc–, kter  pou‘¡v  oper tor +.
          P©.:   alfa + 'a'+'konec vety'
               P©es hne-li  d‚lka  ©etˆzce  255  znak–,   je  zbytek

                                                                  36






                         T u r b o  P a s c a l  v.5

          ignorov n.

          2.6.1.5. Mno‘inov‚ oper tory

          _________________________________________________________
              Oper tor          Operace          Typ operand–
          _________________________________________________________ 
          +         sjednocen¡      kompatibiln¡ typy mno‘in
                 -         rozd¡l          kompatibiln¡ typy mno‘in
                 *         pr–nik          kompatibiln¡ typy mno‘in


          2.6.1.6. Rela‡n¡ oper tory

               Rela‡n¡  oper tory  se  pou‘¡vaj¡  pro  srovn n¡ dvou
          hodnot  v  obvykl‚m  v˜znamu.   Jsou-li  porovn v ny   dva
          jednoduch‚  typy,  mus¡ se jednat o kompatibiln¡ typy.  Je
          povoleno porovn vat spolu re ln‚ a celo‡¡seln‚ hodnoty.
               Je  povoleno  porovn vat  dva  ©etˆzce,  srovn n¡  se
          prov d¡ ve smyslu definice ASCII kodu.
              Pro  porovn n¡  ukazatel– jsou povoleny relace = a <>.
          Dva ukazatel‚ si jsou rovny,  ukazuj¡-li na stejn˜ objekt.
          To  je umo‘nˆno t¡m,  ‘e Turbo Pascal normalizuje adresu (
          p©i pou‘it¡ standardn¡ch funkc¡ New a  GetMem  )  tak,  ‘e
          offset ‡ st je v‘dy v rozsahu $0000..$000F
               Pro  mno‘iny je mo‘n‚ pou‘¡vat rela‡n¡ oper tory = <=
          a >=.  V˜znam a <= b je shodn˜ s  pojmem"a  je  podmno‘ina
          b?".Pou‘it¡ oper toru p©¡slu¨nosti in je shodn‚ s ot zkou,
          zda  lev˜ operand je obsa‘en v mno‘inˆ,  kter  tvo©¡ prav˜
          operand.
          P©.:    if c in ['0'..'9']


          2.6.1.7. Adresn¡ oper tory.

               Turbo  Pascal  m   dva  oper tory,   kter‚   umo‘¤uj¡
          pracovat s adresami.  Jsou to oper tory @ a ^ . Oper tor @
          je un rn¡ a vrac¡ adresu promˆnn‚,  na kterou byl  pou‘it.
          Oper tor  ^  je  tak‚ un rn¡ a zp©¡stup¤uje promˆnnou,  na
          kterou ukazoval ukazatel s oper torem  ^.  Oper tor  ^  se
          uv d¡ za promˆnnou typu ukazatel.

          P©.:   PtrChr^:='A';   promˆnn‚ na kterou ukazoval PtrChr,
                                 je p©i©azen znak 'A'.

                 PtrChr:=@C;     PtrChr ukazuje nyn¡ na promˆnnou C





                                                                  37






                         T u r b o  P a s c a l  v.5

          2.6.2. Jednoduch‚ p©¡kazy.

          2.6.2.1. P©i©azovac¡ p©¡kaz.

               P©i©azovac¡  p©¡kaz  pat©¡  mezi  jednoduch‚  p©¡kazy
          Pascalu.   P©i©azovac¡  oper tor  je   :=   .   Proveden¡m
          p©i©azovac¡ho  p©¡kazu  se p©i©ad¡ promˆnn‚ na lev‚ stranˆ
          p©¡kazu hodnota v˜razu na prav‚ stranˆ p©¡kazu.  V˜raz  na
          prav‚  stranˆ mus¡ b˜t kompatibiln¡ vzhledem k p©i©azen¡ s
          typem promˆnn‚ na lev‚ stranˆ.  Kompatibilita  vzhledem  k
          p©i©azen¡  je  definov na  n sleduj¡c¡mi  pravidly  (  pro
          p©i©azen¡ T1:=T2 ):

           1. Typy dvou objekt– jsou identick‚, kdy‘
             a) jsou ozna‡eny stejn˜m identifik torem typu
             b) jsou ozna‡eny  identifik tory  typu  T1  a  T2,  ale
          tyto typy byly zavedeny definic¡ T1=T2 nebo T2=T1
             c) jsou odvozeny ze stejn‚ho v˜skytu typu

          P©.:     a : pole;
                   b : pole;{ a,b jsou identick‚ho typu }
                   c : array[1..100] of real;
                   d  : array[1..100] of real;  { c,d nejsou ident.}
          e,f : array[boolean] of char;{e,f jsou ident.typu}

           2. Typy dvou objekt– jsou kompatibiln¡, kdy‘
                 a) jsou identick‚
                 b) oba typy jsou re ln‚ ( real,  extended,  single,
          double )
                 c)  oba typy jsou celo‡¡seln‚ ( integer,  shortint,
          longint, byte, word )
                 d) T1 je intervalem z T2 a naopak
                 e) oba jsou intervalem ze stejn‚ho typu
                 f) oba jsou typ  mno‘ina  s  kompatibiln¡m  b zov˜m
          typem
                 g)  oba  jsou pakovan‚ pole znak– se stejn˜m po‡tem
          komponent
                h) T1 je typu string a T2 je typu  string,  pakovan‚
          pole znak– nebo char a naopak
                i)  T1  je  typu  ukazatel  a T2 je typu ukazatel na
          jak˜koliv typ a naopak
           3.  T1 a  T2  jsou  kompatibiln¡  vzhledem  k  p©i©azen¡,
          plat¡-li:
                a)  T1  a  T2  jsou  identick‚  typy  a neobsahuj¡ v
          jak‚koliv £rovni promˆnnou typu file.
                b) T1  a  T2  jsou  kompatibiln¡  ordin ln¡  typy  a
          hodnoty typu T2 spadaj¡ do rozsahu hodnot typu T1
                c)  T1 a T2 jsou re ln‚ typy a hodnoty T2 spadaj¡ do
          rozsahu hodnot T1.
                d) T1 je re ln˜ typ a T2 je celo‡¡seln˜.

                                                                  38






                         T u r b o  P a s c a l  v.5

                e) T1 a T2  jsou typu string.
                f) T1 je typu string a T2 pakovan‚ pole znak–
                g) T1 a T2 jsou kompatibiln¡ pakovan  pole znak–
                h) T1 a T2 jsou kompatibiln¡ typy mno‘in  a  v¨echny
          ‡leny   hodnot   typu   T2   spadaj¡  do  rozsahu  mo‘n˜ch
          hodnot typu T1.
                i) T1 a T2 jsou kompatibiln¡ typy ukazatel.

          2.6.2.2 Vol n¡ procedury.

               Procedury se volaj¡ sv˜m jm‚nem a seznamem  parametr–
          uveden˜m   v  z vorce.   Po‡et  parametr–  mus¡  odpov¡dat
          deklaraci procedury.  Parametry volan‚ hodnotou  mus¡  b˜t
          kompatibiln¡ v–‡i p©i©azen¡, parametry volan‚ odkazem mus¡
          b˜t  kompatibiln¡.  Skute‡n‚ parametry jsou p©ed ny volan‚
          jednotce odpov¡daj¡c¡m form ln¡m parametr–m.

          2.6.2.3. P©¡kaz GOTO.

               P©¡kaz GOTO p©enese ©¡zen¡ programu na p©¡kaz,  kter˜
          je  ozna‡en n vˆ¨t¡m shodn˜m s uveden˜m v p©¡kaze GOTO.  V
          Turbo Pascalu nen¡ povolen skok  mimo  blok  nebo  dovnit©
          bloku.   Znamen   to,   ‘e  nen¡  mo‘n˜  skok  do  nebo  z
          podprogramu.   Skok  do   strukturovan‚ho   p©¡kazu   nen¡
          indikov n  jako  chyba,  m–‘e  v¨ak  zp–sobit nedefinovan‚
          v˜sledky. Proto seradˆji tˆmto skok–m vyhnˆte.

          2.6.3. Strukturovan‚ p©¡kazy

          2.6.3.1. Slo‘en˜ p©¡kaz.

               Slo‘en˜ p©¡kaz  se  pou‘¡v   na  m¡stˆ,  kde  syntaxe
          jazyka   vy‘aduje  pouze  jeden  p©¡kaz.   Slo‘en˜  p©¡kaz
          obsahuje ©adu p©¡kaz–,  uzav©en˜ch mezi rezervovan   slova
          begin  a  end.  P©¡kazy  uvnit© tˆchto "z vorek" mohou b˜t
          libovoln‚ p©¡kazy ( a tedy i opˆt slo‘en‚ p©¡kazy ) a jsou
          navz jem oddˆlen‚ st©edn¡kem.

          2.6.3.2. P©¡kaz if

             P©¡kaz if slou‘¡ pro podm¡nˆn‚ vˆtven¡ programu. P©¡kaz
          m  tvar  :
                     if podminka then p1 [ else p2 ];

               P©i hodnotˆ logick‚ho v˜razu podminka true je vykon n
          p©¡kaz p1 , p©i hodnotˆ false  p©¡kaz p2.  Nen¡-li uvedena
          ‡ st else je ch p na jako pr zdn˜ p©¡kaz.  P©¡kazy p1 a p2
          mohou b˜t libovoln‚  p©¡kazy.  Vznikne-li  nejednozna‡nost
          p©i  pou‘it¡  dal¨¡ho  p©¡kazu  if,   plat¡  pravidlo,  ‘e
          nejbli‘¨¡ reservovan  slova if a else pat©¡ k sobˆ ( pokud

                                                                  39






                         T u r b o  P a s c a l  v.5

          ji‘ nen¡ p©¡kaz if spojen s jin˜m rezervovan˜m slovem else
          ).

          2.6.3.3. P©¡kaz case.

               P©¡kaz  case  je    p©ep¡na‡.  Obsahuje  v˜raz,  tzv.
          selektor,  jeho‘  hodnota ur‡uje,  kter  ‡ st p©¡kazu bude
          vykon na.  D le obsahuje seznam p©¡kaz– ozna‡en˜ch  jednou
          nebo   v¡ce   konstantami   (konstanty  p©ep¡na‡e  )  nebo
          rezervovan˜m slovem else.  Selektor mus¡  b˜t  ordin ln¡ho
          typu a rozsah hodnot mus¡ b˜t v intervalu -32768..32767. V
          p©¡kazu case je vykon n p©¡kaz,  jeho‘ konstanta p©ep¡na‡e
          je shodn  s hodnotou selektoru.  Nen¡-li nalezena shoda  s
          ‘ dnou  konstantou p©ep¡na‡e,  je vykon n p©¡kaz za slovem
          else.  Nen¡-li uvedena ani ‡ st  else  a  ‘ dn   konstanta
          p©ep¡na‡e nen¡ shodn , je p©¡kaz case  pr zdn˜. P©.:

               case i of
                 0,2,4,6,8 : writeln ('suda cislice');
                 1,3,5,7,9 : writeln ('licha cislice');
                 10..100 : writeln (' mezi 10 a 100');
                 else  writeln (' zaporne nebo vetsi jak sto');
               end;

          2.6.3.4. P©¡kaz repeat.

               P©¡kaz repeat  m  tvar
                  repeat  p1;p2; .... until podminka;

               Nen¡-li  splnˆna  podminka  (  hodnota false ),  jsou
          p©¡kazy uzav©en‚ mezi repeat a until  vykon ny  opakovanˆ.
          P©¡kazy uvnit© cyklu jsou vykon ny minim lnˆ jednou. Bˆhem
          p©¡kaz–  uvnit©  cyklu  by se mˆla mˆnit hodnota nˆkter˜ch
          promˆnn˜ch uveden˜ch v ukon‡ovac¡ podm¡nce, aby cykl nebyl
          nekone‡n˜.  P©i direktivˆ p©eklada‡e  {B-  lze  s  v˜hodou
          vyu‘¡t tzv. zkr cen‚ vyhodnocen¡ v˜razu typu Boolean ( viz
          kapitola 2.6.3.1. ).

          2.6.3.5. P©¡kaz while.

               Na  rozd¡l  od p©¡kazu repeat nemus¡ b˜t p©¡kaz while
          vykon n ani jednou.  P©¡kaz m  tvar
                  while podminka do p1;

               Nen¡-li splnˆna podminka ,  p©¡kaz nevykon  ‡ st p1 a
          ,p©ech z¡  na  dal¨¡  p©¡kaz  v  sekvenci.  Je-li podminka
          splnˆna ( hodnota true ), je vykon n p©¡kaz p1 a ©¡zen¡ je
          vr ceno znovuna vyhodnocen¡ ukon‡ovac¡ho v˜razu  podminka.
          P©.:
             i:=1;

                                                                  40






                         T u r b o  P a s c a l  v.5

             while i<10 do begin
                   a[i]:=a[i+1];
                   i:=i+1;
             end;

          2.6.3.6. P©¡kaz for.

               P©¡kaz   zaji¨‹uje   opakovan‚   prov dˆn¡  uveden‚ho
          p©¡kazu.  Cykl je ©¡zen ©¡d¡c¡  promˆnnou,  kter   vzr–st 
          (varianta  s to)  nebo kles  (varianta s downto).  Hodnoty
          ©¡d¡c¡ promˆnn‚ jsou omezeny po‡ te‡n¡ a koncovou hodnotou
          cyklu.   Po skon‡en¡ cyklu nen¡  hodnota  ©¡d¡c¡  promˆnn‚
          definov na. P©¡kaz for  m  tvar

             for control:=initial {to|downto} final do statement;

          P©¡kaz for  ve tvaru

                for V:=expr1 to expr2 do body;

          je ekvivalentn¡ p©¡kazu

               begin
                 Temp1:=expr1;
                 Temp2:=expr2;
                 if Temp1 <= Temp2 then
                 begin
                   V:= Temp1;
                   body;
                   while V <> Temp2 do
                   begin
                     V:=succ(V);
                     body;
                   end;
                 end;
               end;

          P©¡kaz

               for V:=expr1 downto expr2 do body;

          je ekvivalentn¡ s p©¡kazem
               begin
                 Temp1:=expr1;
                 Temp2:=expr2;
                 if Temp1 >= Temp2 then
                 begin
                   V:= Temp1;
                   body;
                   while V <> Temp2 do

                                                                  41






                         T u r b o  P a s c a l  v.5

                   begin
                     V:=pred(V);
                     body;
                   end;
                 end;
               end;

          2.6.3.7. P©¡kaz with.

               P©¡kaz   with  umo‘¤uje  zkr cen˜  z pis  k  p©¡stupu
          jednotliv˜ch polo‘ek promˆnn‚ typu z znam. M  tvar

              with record_variable do statement;

          P©.:M me-li deklaraci

              Type   Datum = record
                       Day : 1..31;
                       Month : 1..12;
                       Year : Integer;
                     end;
              Var  Date : Datum;

          pak tento £sek programu

               with Date do
                 if month = 12 then
                 begin
                   month:=1;
                   year:=year+1;
                 end else
                   month:=month+1;

          je shodn˜ s n sleduj¡c¡mi p©¡kazy :

                if Date.month = 12 then
                begin
                  Date.month:=1;
                  Date.year:=Date.year+1;
                end else
                  Date.month:=Date.month+1;


          2.7. Procedury a funkce.

               Procedury  a  funkce  umo‘¤uj¡  vno©it  dal¨¡   bloky
          (lok ln¡  definice  a  deklarace)  do  hlavn¡ho  programu.
          Ka‘d  deklarace podprogramu obsahuje hlavi‡ku funkce  nebo
          procedury,  deklarace  lok ln¡ch  objekt– (n vˆ¨t¡,  typ–,
          promˆnn˜ch,  funkc¡  a  procedur  )  a  tˆlo  podprogramu.

                                                                  42






                         T u r b o  P a s c a l  v.5

          Deklarace  a definice lok ln¡ch objekt– je form lnˆ shodn 
          se zp–sobem v hlavn¡m  programu.  Tˆlo  podprogramu  tvo©¡
          slo‘en˜ p©¡kaz.
               V  hlavi‡ce  podprogramu je uveden n zev podprogramu,
          seznam form ln¡ch  parametr–  a  u  deklarace  funkce  typ
          funk‡n¡ hodnoty. Seznam form ln¡ch parametr– m–‘e p©¡padnˆ
          chybˆt.  Form ln¡  parametry  rozezn v me  dvoj¡ho druhu :
          parametry volan‚ hodnotou a parametry  volan‚  odkazem.  V
          Turbo  Pascalu  nejsou  parametry typu funkce a procedura.
          Parametry  volan‚  hodnotou  jsou  pou‘¡v ny  pro  vstupn¡
          parametry  a  jejich zmˆna nem  vliv na skute‡n˜ parametr.
          Parametry  volan‚ odkazem pracuj¡ se skute‡n˜mi  parametry
          a  pou‘¡vaj¡  se  jako v˜stupn¡.  Parametry volan‚ odkazem
          p©edch z¡ v seznamu form ln¡ch parametr– rezervovan‚ slovo
          var.
               Tˆlo procedury  m–‘ou tvo©it kromˆ slo‘en‚ho  p©¡kazu
          i  nˆkter‚  direktivy.  Direktiva  forward  dovoluje ©e¨it
          situace,  kdy doch z¡ ke vz jemn‚  rekursivitˆ  dvou  nebo
          v¡ce  procedur  ‡i funkc¡.  Direktiva ©¡k ,  ‘e podprogram
          bude dodefinov n pozdˆji.  P©i dodefinov n¡  procedury  se
          ji‘ neuv d¡ seznam form ln¡ch parametr–.
               Direktiva   external  umo‘¤uje  vazbu  se  samostatnˆ
          kompilovan˜mi podprogramy psan˜mi v assembleru.
               Direktiva  inline  dovoluje   ps t   p©¡mo   strojov‚
          instrukce  m¡sto  tˆla  procedury.  Na  podrobnˆj¨¡  popis
          odkazujeme na p©¡ru‡ky Turbo Pascal a Assembler.
               N sleduj¡c¡ p©¡klad uv d¡ deklaraci procedury,  kter 
          p©ev d¡ hodnotu typu Integer na ©etˆzec ‡¡slic.

             procedure NumStr(n:integer; var s:string);
             var  v:integer;
             begin
               v:=abs(n);
               s:='';
               repeat
                 s:=chr(v mod 10 +ord('0'))+s;
                 v:=v div 10;
               until v = 0;
               if n <0 then s:= '-' + s;
             end;

          2.8. Programov‚ jednotky.

               Turbo  Pascal  umo‘¤uje  pou‘it¡ i tzv.  programov˜ch
          jednotek,  anglicky unit.  Co je to  programov   jednotka?
          Programov    jednotka   v   sobˆ  zahrnuje  p©eddefinovan‚
          konstanty, typy,  promˆnn‚,  procedury a funkce.  Definice
          tˆchto veli‡in se vˆt¨inou t˜k  nˆjak‚ho oboru, jako nap©.
          grafick‚ho v˜stupu,  spolupr ce s MS-DOS a pod. Programov‚
          jednotky si m–‘e vytv ©et u‘ivatel s m nebo  pou‘¡vat  ji‘

                                                                  43






                         T u r b o  P a s c a l  v.5

          p©edem  vytvo©en‚  syst‚mov‚  programov‚  jednotky.   Tyto
          jednotky dovoluj¡ rozdˆlit program na nˆkolik  nez visl˜ch
          ‡ st¡ (  velmi podobn˜ch samostatn‚mu programu), kter‚ lze
          separ tnˆ kompilovat a sestavit dohromady.

          2.8.1. Struktura programov˜ch jednotek.

               Ka‘d    programov   jednotka  nab¡z¡  ©adu  mo‘nost¡,
          prost©ednictv¡m sv˜ch konstant, promˆnn˜ch, typ–, funkc¡ a
          procedur.  Pou‘it¡  programov‚  jednotky  v  programu  n m
          zp©¡stupn¡   v¨echny  deklarovan‚  a  definovan‚  veli‡iny
          stejn˜m zp–sobem,  jako bychom je  definovali  v  programu
          sam‚m. Programov  jednotka m  n sleduj¡c¡ strukturu:

              unit <identifikator>;
              interface
              uses <seznam jednotek>;   { nepovinn‚ }
                  { ve©ejn‚ deklarace a definice }
              implementation
                  { intern¡ deklarace a definice }
                  { procedury a funkce }
              begin
                 { inicializa‡n¡ kod }
              end.

               Programov   jednotka za‡¡n  rezervovan˜m slovem unit,
          kter‚ je n sledov no n zvem t‚to jednotky.  Jm‚no souboru,
          ve  kter‚m  je  zdrojov˜ text t‚to jednotky ulo‘en,  by se
          mˆlo shodovat se jm‚nem programov‚ jednotky.  Po  hlavi‡ce
          jednotky n sleduje slovo interface ,  kter‚ zahajuje sekci
          deklarac¡,  viditeln˜ch pro  ostatn¡  programov‚  jednotky
          nebo  programy,  kter‚  tuto  jednotku  vyu‘ij¡.  V  sekci
          interface  jsou  definov ny  pou‘it‚  konstanty,   typy  a
          deklarov ny  promˆnn‚  stejn˜m  zp–sobem  jako  v  hlavn¡m
          programu.  Funkce a procedury  jsou  v  t‚to  ‡ sti  pouze
          deklarov ny,  ale jejich v˜konn  ‡ st (tˆlo procedury nebo
          funkce)  je  uvedena  a‘  v  sekci  implementation.  Sekce
          interface     kon‡¡     uveden¡m    rezervovan‚ho    slova
          implementation.  V implementa‡n¡ sekci se definuj¡ pomocn‚
          funkce  a  promˆnn‚  a jsou zde uvedena tˆla deklarovan˜ch
          funkc¡ a procedur ze sekce interface.  Dodefinovan‚ funkce
          a procedury maj¡ uvedenu hlavi‡ku,  kter  se mus¡ shodovat
          s deklarac¡ v sekci interface nebo tato hlavi‡ka m–‘e  b˜t
          uvedena  ve zkr cen‚ formˆ,  tj.  je uvedeno pouze kl¡‡ov‚
          slovo procedure nebo function  n sledovan‚  n zvem  funkce
          nebo procedury ( parametry se tedy v–bec neuv d¡ ). V t‚to
          sekci jsou v¨echny objekty pro vnˆj¨¡ svˆt ukryt‚  ( kromˆ
          dodefinovan˜ch funkc¡ a procedur ) a mohou se vyu‘¡t pouze
          v r mci t‚to sekce.
               Cel   sekce  implementation  je norm lnˆ uz vorkov na

                                                                  44






                         T u r b o  P a s c a l  v.5

          mezi rezervovan  slova  implementation a  end.  Vlo‘¡me-li
          p©ed  koncov˜  end rezervovan‚ slovo begin a mezi tato dvˆ
          slova um¡st¡me ©adu p©¡kaz–, vytvo©¡me tzv.  inicializa‡n¡
          sekci.  Tato  sekce  se  pou‘¡v   k  nastaven¡ po‡ te‡n¡ch
          podm¡nek  pro  programovou   jednotku,   nap©.   nastaven¡
          po‡ te‡n¡ch hodnot libovoln˜ch datov˜ch struktur, otev©en¡
          pot©ebn˜ch soubor– a pod.  Inicializa‡n¡ sekce je vykon na
          p©ed prvn¡m v˜kon˜m p©¡kazem hlavn¡ho programu. Pou‘¡v -li
          hlavn¡   program   v¡ce   programov˜ch   jednotek,    jsou
          inicializa‡n¡ sekce vykon v ny postupnˆ v uveden‚m po©ad¡.
          N sleduj¡c¡  p©¡klad  ukazuje programovou jednotku,  kter 
          definuje  funkci  Vytvor  .   Tato  funkce  vytv ©¡  novou
          promˆnnou  typu  Item  a vrac¡ ukazatel na tuto promˆnnou.
          Z rove¤ je textov  ‡ st promˆnn‚ item  vyplnˆna  mezerami.
          Promˆnn  Volana indikuje prvn¡ pou‘it¡ t‚to funkce.

             unit nova;
             interface
              var
               volana : Boolean;
              type
                pitem = ^item;
                item = record
                         a : string[10];
                         link : pitem
                       end;
               function vytvor:pitem;
          implementation
          var
            b : pitem;
          const
           spaces = '          ';
          function vytvor;
          begin
             new(b);
             b^.a:=spaces;
             b^.link:=nil;
             vytvor:=b;
             volana:=true
          end;
          begin
            volana:=false
          end.

          2.8.2. Pou‘it¡ programov˜ch jednotek

               Programov‚  jednotky  na  rozd¡l  od  Include soubor–
          nejsou pou‘¡v ny ve zdrojov‚ formˆ. Programov  jednotka se
          samostatnˆ p©elo‘¡,  ‡¡m‘ vznikne soubor  s  typem  TPU  (
          Turbo Pascal Unit ) a tento p©elo‘en˜ kod je p©isestaven k

                                                                  45






                         T u r b o  P a s c a l  v.5

          hlavn¡mu  programu,  kter˜  programovou  jednotku pou‘¡v .
          Pou‘it¡ programov˜ch jednotek se vy‘ d  p©¡kazem :

             uses unit1[,unit2[,...]];

          kter˜ je  um¡stˆn  bezprost©ednˆ  za  hlavi‡kou  programu,
          nap©.
            program kresba;
            uses Graph;
          Za  rezervovan˜m  slovem  uses  m–‘e  b˜t  pou‘it i seznam
          programov˜ch jednotek,  oddˆlen˜ ‡ rkami.  Po©ad¡ jednotek
          m–‘e  hr t  roli,  jestli‘e nˆjak  jednotka pou‘¡v  rovnˆ‘
          dal¨¡ jednotku.  Pak nejprve mus¡  b˜t  uvedena  jednotka,
          kter    je   vyu‘¡v na  v  pozdˆji  uveden˜ch  jednotk ch.
          P©eklada‡  po  anal˜ze  p©¡kazu  uses  vyhled   na   disku
          p©¡slu¨n˜  soubor  s  typem  TPU  a p©id  pat©i‡n‚ vazby a
          informace k volaj¡c¡  jednotce.  Tak  nap©.  v˜¨e  uveden 
          programov   jednotka  nova  m–‘e  b˜t pou‘ita n sleduj¡c¡m
          zp–sobem:

          program hlavni;
          uses nova;
          var first,work : pitem;
              i : 1..100;
          { zde m–‘e b˜t v¡c definic }
          begin
             for i:=1 to 100 do
                    if  not    volana   then   begin   work:=vytvor;
          first:=work
                                        end
                                   else begin work^.link:=vytvor;
                                              work:=work^.link
                                         end;
          { t¡m se vytvo©¡ spojov˜ seznam  o sto ‡lenech }
          end.


          2.9. Standardn¡ procedury a funkce.

          V   t‚to   kapitole   pop¡¨eme  ve  stru‡nosti  standardn¡
          procedury a funkce,  kter‚  definuje  Turbo  Pascal.  Tyto
          procedury  jsou  p©eddeklarov ny a mohou b˜t program torem
          tzv.  zast¡nˆny.  Pou‘ije-li  program tor  jinou  definici
          tˆchto  podprogram–,  pak  tato  definice m  p©ednost p©ed
          standardn¡.






                                                                  46






                         T u r b o  P a s c a l  v.5

          2.9.1. Procedury Exit, Halt a RunError.

           Exit
          ÄÄÄÄÄ     Procedura Exit   zp–sob¡  n vrat  z  podprogramu
          (je-li  vol na  z  procedury  nebo  funkce ) nebo ukon‡en¡
          programu, je-li vol na z hlavn¡ho programu.
          Deklarace :   Exit;

           Halt
          ÄÄÄÄÄ     Procedura Halt  ukon‡uje program a vrac¡  ©¡zen¡
          opera‡n¡mu syst‚mu MS-DOS.  M–‘e m¡t jeden parametr, kter˜
          specifikuje tzv. exit code. Nen¡-li parametr ud n, je jeho
          implicitn¡ hodnota 0.
          Deklarace :   Halt [ (exitcode : word ) ];

          RunError
          ÄÄÄÄÄÄÄÄ Procedura  RunError  ukon‡uje  program,  generuje
          chybu za bˆhu s p©ed van˜m ‡¡slem (ErrCode) na dan‚m m¡stˆ
          programu.
          Deklarace :   RunError [ (ErrorCode : word) ];

          2.9.2. Procedury a funkce pro dynamickou alokaci.

           Dispose
           ÄÄÄÄÄÄÄ      Procedura uvol¤uje dynamickou promˆnnou,  na
          kterou ukazuje parametr typu ukazatel.  Hodnota  ukazatele
          je po procedu©e Dispose  nedefinovan .
          Deklarace :   Dispose (var p : pointer );

           FreeMem
           ÄÄÄÄÄÄÄ         Uvol¤uje pamˆ‹ o specifikovan‚ velikosti.
          Ukazatel,   uveden˜  jako  parametr,   mus¡  ukazovat   na
          dynamickou  promˆnnou,  kter   byla  vytvo©ena  procedurou
          GetMem. Parametr size ur‡uje velikost v bytech, kter‚ maj¡
          b˜t uvolnˆny.
          Deklarace :   FreeMem (var p :pointer; size : word);

           GetMem
           ÄÄÄÄÄÄ     Procedura zakl d  novou dynamickou promˆnnou o
          specifikovan‚ velikosti a ukl d  jej¡ adresu  do  promˆnn‚
          typu  ukazatel.  Nejvˆt¨¡  mo‘n  specifikovan  velikost je
          65521 byt–.
          Deklarace :   GetMem ( var p :pointer; size : word);

           Mark
           ÄÄÄÄ     Procedura zaznamen  do  promˆnn‚  p    st vaj¡c¡
          adresu  hromady  (  Heap  ).  Tato adresa m–‘e b˜t pozdˆji
          vyu‘ita procedurou Release.  Ukazatel p m–‘e b˜t  ukazatel
          na jak˜koliv typ.
          Deklarace :   Mark ( var p : pointer);

                                                                  47






                         T u r b o  P a s c a l  v.5


           MaxAvail
           ÄÄÄÄÄÄÄÄ        Funkce MaxAvail  vrac¡ velikost maxim ln¡
          souvisl‚ pamˆti v hromadˆ ( souhlas¡ s maxim ln¡ velikost¡
          dynamick‚ promˆnn‚, kterou lze alokovat ). Typ v˜sledku je
          longint.
          Deklarace :   MaxAvail : longint;

           MemAvail
           ÄÄÄÄÄÄÄÄ     Funkce MemAvail vrac¡ velikost sou‡tu  v¨ech
          voln˜ch blok– pamˆti v hromadˆ.
          Deklarace :   MemAvail : longint;

           New
           ÄÄÄ        Procedura vytv ©¡ novou dynamickou promˆnnou a
          nastavuje   ukazatel   tak,    aby   ukazoval   na    tuto
          promˆnnou.Reference  na  novˆ vzniklou promˆnnou je pomoc¡
          p^.
          Deklarace :   New ( var p :pointer );

           Release
           ÄÄÄÄÄÄÄ     Procedura vrac¡ £rove¤ hromady na  stav,  kdy
          byla  ukazateli  p  p©i©azena  hodnota  procedurou  Mark .
          Release    uvol¤uje   v¨echny   promˆnn‚   vytvo©en‚   buƒ
          procedurou  New  nebo  GetMem,  kter‚  byly  vytvo©eny  po
          p©i©azen¡ hodnoty ukazateli p procedurou Mark.
          Deklarace :   Release ( var p :pointer );

          2.9.3. Konverzn¡ funkce

           Chr
           ÄÄÄ     Funkce vrac¡ znak, kter˜ je reprezentov n zadanou
          celo‡¡selnou hodnotou.
          Deklarace :   Chr ( x : byte) : char;

           Ord
           ÄÄÄ        Funkce  vrac¡  ordin ln¡  ‡¡slo  specifikovan‚
          hodnoty  ordin ln¡ho  typu.  V˜raz,  kter˜  je  ud n  jako
          parametr, m–‘e b˜t nap©. typu char, vyjmenovan˜ typ a pod.
          Deklarace :   Ord ( x ) : longint;

           Round
           ÄÄÄÄÄ     Funkce zaokrouhluje parametr re ln‚ho  typu  na
          celo‡¡selnou  hodnotu.   V˜sledek  funkce  je  celo‡¡seln 
          hodnota,  kter  je nejbli‘¨¡ k hodnotˆ  parametru.  ’¡sla,
          kter   jsou  uprost©ed intervalu dvou cel˜ch ‡¡sel ( nap©.
          1.5 ) se zaokrouhluj¡ k ‡¡slu,  kter‚ m   vˆt¨¡  absolutn¡
          hodnotu.
          Deklarace :   Round ( x : real ) : longint;


                                                                  48






                         T u r b o  P a s c a l  v.5

           Trunc
           ÄÄÄÄÄ          Funkce  o©ez v   desetinnou  ‡ st re ln‚ho
          parametru a vrac¡ z¡skanou hodnotu jako celo‡¡selnou  typu
          longint.
          Deklarace :   Trunc ( x :real ) : longint;

          2.9.4. Aritmetick‚ funkce

           Abs
           ÄÄÄ          Funkce  vrac¡  absolutn¡  hodnotu parametru.
          V˜sledek je stejn‚ho typu jako parametr.
          Deklarace :   Abs ( x : y ): y;

           ArcTan
           ÄÄÄÄÄÄ     Funkce vrac¡ arctangent argumentu. V˜sledek je
          v radi nech.
          Deklarace :   ArcTan ( x : real) : real;

           Cos
           ÄÄÄ     Funkce vrac¡ hodnotu kosinu  argumentu.  Argument
          je ud n v radi nech.
          Deklarace :   Cos ( x : real ) : real;

           Exp
           ÄÄÄ     Funkce vrac¡ hodnotu ex .
          Deklarace :   Exp ( x : real ) : real;

           Frac
           ÄÄÄÄ     Funkce vrac¡ desetinnou ‡ st argumentu, kter˜ je
          re ln‚ho typu.  V˜sledek se d  vyj d©it jako Frac(x) = x -
          Int(x).
          Deklarace :   Frac ( x : real ) : real;

           Int
           ÄÄÄ     Funkce vrac¡ celou ‡ st re ln‚ho argumentu.
          Deklarace :   Int ( x : real ) : real;

           Ln
           ÄÄ     Funkce vrac¡ p©irozen˜ algoritmus argumentu.
          Deklarace :   Ln ( x : real ) : real;

           Pi
           ÄÄ     Funkce vrac¡ hodnotu 3.1415926535897932385.
          Deklarace :   Pi: extended;

           Sin
           ÄÄÄ     Funkce vrac¡ hodnotu sinu argumentu.  Argument se
          ud v  v radi nech.
          Deklarace :   Sin ( x : real) : real;


                                                                  49






                         T u r b o  P a s c a l  v.5

           Sqr
           ÄÄÄ     Funkce vrac¡ druhou mocnimu argumentu.V˜sledek je
          stejn‚ho typu jako argument  a je roven x * x.
          Deklarace :   Sqr ( x : y ) : y;

           Sqrt
           ÄÄÄÄ     Funkce vrac¡ hodnotu odmocniny argumentu.
          Deklarace :   Sqrt ( x : real ) : real;

          2.9.5. Ordin ln¡ procedury a funkce

           Dec
           ÄÄÄ       Procedura Dec  zmen¨uje ordin ln¡ promˆnnou x o
          udan˜ po‡et.  Nen¡-li ud n parametr  n  ,  p©edpokl d   se
          roven  1.  Procedura m  optimalizovan˜ kod a je vhodn  pro
          pou‘it¡ v ‡asto opakovan‚  sekvenci.  Dec(x,n)    odpov¡d 
          p©¡kazu  x:=x-n.
          Deklarace :   Dec ( x : ordinal [; n : integer-type ]);

           Inc
           ÄÄÄ        Procedura Inc zvˆt¨uje promˆnnou x ordin ln¡ho
          typu o udan˜ po‡et n. Je du ln¡ k funkci Dec.
          Deklarace :   Inc ( x : ordinal [; n : integer-type ]);

           Odd
           ÄÄÄ     Funkce testuje, zda celo‡¡seln˜ parametr je lich˜
          nebo sud˜. V˜sledek funkce je True,  je-li parametr lich˜,
          jinak False.
          Deklarace :   Odd ( x : longint );

           Pred
           ÄÄÄÄ         Funkce vrac¡ p©edch–dce argumentu,  kter˜ je
          ordin ln¡ho typu. V˜sledek je stejn‚ho typu jako argument.
          Deklarace :   Pred ( x : ordinal ) : ordinal;

           Succ
           ÄÄÄÄ     Funkce vrac¡ n sledovn¡ka  argumentu,  kter˜  je
          ordin ln¡ho typu. V˜sledek je stejn‚ho typu jako argument.
          Deklarace :   Succ ( x : ordinal ) : ordinal;

          2.9.6. Procedury a funkce pro pr ci s ©etˆzci

           Concat
           ÄÄÄÄÄÄ     Funkce spojuje ©etˆzce,  kter‚ jsou ud ny jako
          parametry funkce. Je-li v˜sledek del¨¡, ne‘ 255 znak–,  je
          zkr cen na tuto d‚lku.
          Deklarace :   Concat (s1[ ,s2,...sn] : string ) : string;

           Copy
           ÄÄÄÄ         Funkce vrac¡ pod©etˆzec z udan‚ho ©etˆzce s.

                                                                  50






                         T u r b o  P a s c a l  v.5

          Parametr index  ud v  po‡ te‡n¡ index v p–vodn¡m ©etˆzci a
          parametr  count  po‡et  znak–  p©enesen˜ch   do   v˜sledku
          (po‡¡naje index-t˜m znakem). Je-li hodnota parametru index
          vˆt¨¡, ne‘ d‚lka ©etˆzce s, je vr cen pr zdn˜ ©etˆzec. Je-
          li  hodnota  parametru  count  del¨¡,  ne‘ zb˜vaj¡c¡ d‚lka
          ©etˆzce, je p©enesen pouze zbytek ©etˆzce s.
          Deklarace                                                :
          Copy(s:string;index:Integer;count:Integer):string;

           Delete
           ÄÄÄÄÄÄ          Procedura  vymaz v   pod©etˆzec z ©etˆzce
          s.Hodnota parametru index ud v ,  od kter‚ho indexu maz n¡
          za‡ne a hodnota parametr count  po‡et vymazan˜ch znak–.
          Deklarace : Delete(var s:string;index,count:Integer);

           Insert
           ÄÄÄÄÄÄ       Procedura vkl d  pod©etˆzec udan˜ parametrem
          source do ©etˆzce udan‚ho  parametrem  s.  Hodnota,  udan 
          parametrem index, ud v  po‡ te‡n¡ hodnotu indexu v ©etˆzci
          s, odkud bude vlo‘en ©etˆzec source.
          Deklarace        :                Insert(source:string;var
          s:string;index:Integer);

           Length
           ÄÄÄÄÄÄ     Funkce vrac¡ dynamickou d‚lku ©etˆzce s.
          Deklarace :   Length ( s : string) : integer;

           Pos
           ÄÄÄ     Funkce,  kter  vyhled v   pod©etˆzec  substr    v
          ©etˆzci  s.  Je-li substr  v s nalezen,  vrac¡ Pos hodnotu
          indexu prvn¡ho znaku v ©etˆzci s,  kde byl substr nalezen.
          Neobsahuje-li s pod©etˆzec substr, je vr cena hodnota 0.
          Deklarace :   Pos (substr : string; s : string) : byte;

           Str
           ÄÄÄ       Procedura konvertuje numerickou hodnotu na jej¡
          reprezentaci v ©etˆzci znak–.  Efekt procedury je shodn˜ s
          procedurou  Write,  pouze  v˜sledek nen¡ zaps n na v˜stup,
          ale do promˆnn‚ s.
          Deklarace :  Str (x [: width [ : decimal ]],var s:string);

           Val
           ÄÄÄ     Procedura konvertuje  hodnotu  typu  string    do
          odpov¡daj¡c¡  hodnotu  numerick‚.  Syntaxe  ©etˆzce s mus¡
          odpov¡dat syntaxi cel‚ho nebo re ln‚ho typu. Promˆnn  code
          je p©i £spˆ¨n‚m dokon‡en¡  procedury  nastavena  na  nulu,
          jinak ukazuje index znaku, u kter‚ho do¨lo k chybˆ.
          Deklarace :
          Val(s : string; var v : ciselny_typ; code : integer);


                                                                  51






                         T u r b o  P a s c a l  v.5

          2.9.7. Funkce pracuj¡c¡ s adresami a ukazateli

           Addr
           ÄÄÄÄ         Funkce vrac¡ adresu specifikovan‚ho objektu.
          Funkce je shodn  s oper torem @.
          Deklarace :   Addr ( x  ) : pointer;

           Cseg
           ÄÄÄÄ     Funkce vrac¡ hodnotu CS registru.
          Deklarace :   Cseg : word;

           Dseg
           ÄÄÄÄ     Funkce vrac¡ hodnotu DS registru.
          Deklarace :   Dseg : word;

           Ofs
           ÄÄÄ     Funkce vrac¡ offset  specifikovan‚ho objektu.
          Deklarace :   Ofs ( x ) : word;

           Ptr
           ÄÄÄ     Funkce vytv ©¡  hodnotu  ukazatele,  tvo©enou  ze
          zadan˜ch  parametr–  seg  (segment  base)  a  ofs  (offset
          address).
          Deklarace :   Ptr(seg,ofs : word) :pointer;

           Seg
           ÄÄÄ     Funkce vrac¡ segment specifikovan‚ho objektu.
          Deklarace :    Seg ( x ) : word;

           Sptr
           ÄÄÄÄ    Funkce vrac¡ hodnotu SP registru.
          Deklarace :   Sptr : word;

           Sseg
           ÄÄÄÄ     Funkce vrac¡ hodnotu SS registru.
          Deklarace :   Sseg : word;

          2.9.8. R–zn‚ procedury a funkce

           FillChar
           ÄÄÄÄÄÄÄÄ     Procedura zapl¤uje  souvislou  oblast  count
          byt–  znakem  ch.  Parametr  x,  volan˜ odkazem,  m–‘e b˜t
          jak‚hokoliv typu.
          Deklarace :  FillChar (var x; count : word; ch : ordinal);

           Hi
           ÄÄ     Funkce vrac¡ vy¨¨¡ byte argumentu,  kter˜ je  typu
          word  nebo Integer.
          Deklarace :   Hi ( x ) : byte;


                                                                  52






                         T u r b o  P a s c a l  v.5

           Lo
           ÄÄ      Funkce vrac¡ ni‘¨¡ byte argumentu,  kter˜ je typu
          word nebo Integer.
          Deklarace :   Lo ( x ) : byte;

           Move
           ÄÄÄÄ      Procedura  kop¡ruje  souvislou  oblast  byt–  z
          oblasti   definovan‚   parametrem   source     do  oblasti
          definovan‚ parametrem dest.  Parametr  count  ud v   po‡et
          byt–.
          Deklarace   :         Move   (var  source:any;   dest:any;
          count:Integer);

           ParamCount
           ÄÄÄÄÄÄÄÄÄÄ     Funkce vrac¡ po‡et parametr–,  kter‚  byly
          p©ed ny programu v p©¡kazov‚ © dce ( command line).
          Deklarace :   ParamCount : word;

           ParamStr
           ÄÄÄÄÄÄÄÄ       Funkce vrac¡ index-t˜ parametr z p©¡kazov‚
          © dky.Je-li index vˆt¨¡ ne‘ ParamCount,  je vr cen pr zdn˜
          ©etˆzec.
          Deklarace :   ParamStr (index : word) : string;

           Random
           ÄÄÄÄÄÄ          Funkce vrac¡ n hodn‚ ‡¡slo.  Nen¡-li ud n
          parametr range, je generov no n hodn‚ ‡¡slo v rozsahu 0 <=
          x < 1.0 typu real.  Je-li ud n parametr  range,  mus¡  b˜t
          celo‡¡seln‚ho typu a generovan‚ n hodn‚ ‡¡slo je v rozsahu
          0<=x<range typu word.  Gener tor n hodn˜ch ‡¡selby mˆl b˜t
          p©ed prvn¡m  pou‘it¡  inicializov n  procedurou  Randomize
          nebo je nutn‚ nastavit promˆnnou RandSeed na danou hodnotu
          - to se u‘¡v  v p©¡padech, kdy je nutn‚, aby se generovala
          stejn  posloupnost ‡¡slic v nˆkolika spu¨tˆn¡ch programu.
          Deklarace :   Random ( range : integer-type ) : word;
                        Random : real;

           Randomize
           ÄÄÄÄÄÄÄÄÄ      Inicializuje vestavˆn˜ gener tor n hodn˜ch
          ‡¡sel.  Pokud je z  nˆjak‚ho  d–vodu  nutn‚,  aby  program
          generoval   p©i   ka‘d‚m   spu¨tˆn¡  stejnou  ©adu  ‡¡sel,
          inicializuje se gener tor  nikoli  touto  procedurou,  ale
          p©i©azen¡m  po‡ te‡n¡  hodnoty  promˆnn‚  RandSeed.   (viz
          popis st. prog. jednotky System)
          Deklarace :   Randomize;

           SizeOf
           ÄÄÄÄÄÄ     Funkce vrac¡ po‡et byt–,  kter‚ jsou  obsazeny
          argumentem.
          Deklarace :   SizeOf (x : any ) : word;

                                                                  53






                         T u r b o  P a s c a l  v.5


           Swap
           ÄÄÄÄ      Funkce vrac¡ hodnotu,  kter  vznikne p©ehozen¡m
          vy¨¨¡ho a ni‘¨¡ho bytu argumentu,  kter˜ mus¡ b˜t typ word
          nebo  Integer.
          Deklarace :   Swap ( x : integer ) : integer;
                        Swap ( x : word ) : word;

           UpCase
           ÄÄÄÄÄÄ         Funkce konvertuje hodnotu znaku,  kter˜ je
          zad n jako argument, na velk  p¡smena.
          Deklarace :   UpCase ( c : char ) : char;

          2.10. Vstup a v˜stup

               V Turbo Pascalu rozezn v me t©i druhy promˆnn˜ch typu
          soubor. Jsou to soubory s udan˜m typem, bez udan‚ho typu a
          soubory typu text. P©ed pou‘it¡m promˆnn‚ typu soubor mus¡
          b˜t jm‚no promˆnn‚  spojeno  s  extern¡m  souborem  pomoc¡
          procedury  Assign.  Extern¡  soubor  je  vˆt¨inou  diskov˜
          soubor, ale m–‘e to b˜t i za©¡zen¡, jako nap©.  kl vesnice
          nebo  obrazovka.  Jakmile  p©i©ad¡me  promˆnn‚ typu soubor
          extern¡ jm‚no, mus¡ b˜t promˆnn  otev©ena pro vstup a/nebo
          v˜stup.  Existuj¡c¡ soubor je  otev¡r n  pomoc¡  procedury
          Reset nebo Append,  novˆ zakl dan˜ soubor pomoc¡ procedury
          Rewrite.
               Soubor typu text otev©en˜ procedurou  Reset  dovoluje
          pouze  ‡ten¡  a  soubor  otev©en˜  procedurou Rewrite nebo
          Append pouze  z pis.  Soubory  s  udan˜m  typem  nebo  bez
          dovoluj¡  v‘dy  z pis  i  ‡ten¡  bez ohledu na to,  kterou
          procedurou byly otev©eny.
               Standardn¡ soubory Input a Output jsou  typu  text  a
          jsou  sv z ny  automaticky  s kl vesnic¡ a obrazovkou.  Na
          po‡ tku programu jsou automaticky otev¡r ny.
               Ka‘d˜ soubor je line rn¡  sekvence  komponent,  kter‚
          jsou pr–be‘nˆ ‡¡slov ny. Prvn¡ komponenta m  ‡¡slo 0.
               Soubory   jsou   norm lnˆ   zpracov v ny   sekven‡nˆ.
          Netextov‚  soubory  mohou  b˜t   zpracov v ny   i   p©¡m˜m
          p©¡stupem pomoc¡ procedury Seek.
               Na  konci  zpracov n¡ souboru mus¡ b˜t soubor uzav©en
          pomoc¡ procedury Close.  Po uzav©en¡  souboru  je  extern¡
          soubor  aktualizov n a jm‚no promˆnn‚ typu soubor m–‘e b˜t
          spojeno s dal¨¡m extern¡m souborem.

          2.10.1. Standardn¡ procedury a funkce pro v¨echny soubory

           Assign
           ÄÄÄÄÄÄ     Procedura p©i©azuje  ke  jm‚nu  souboru  jm‚no
          extern¡ho   souboru,   vˆt¨inou   diskov‚ho  souboru  nebo
          za©¡zen¡. Parametr f je typu soubor (jak˜koliv).  Parametr

                                                                  54






                         T u r b o  P a s c a l  v.5

          name  obsahuje  £plnou  specifikaci  souboru,  tj.  ur‡en¡
          diskov‚ jednotky,  cesty a jm‚na souboru.  Zvl ¨tn¡ p©¡pad
          nastane,  je-li  name  pr zdn˜  ©etˆzec.  Pak  je soubor f
          spojen se standardn¡mi souboru Input  resp.  Output.  Tyto
          soubory  pak  lze  obsluhovat tzv.  p©esmˆrov n¡m vstupu a
          v˜stupu ( viz p©¡ru‡ka MS-DOS ).
          Deklarace :   Assign ( f : soubor; name : string);

           ChDir
           ÄÄÄÄÄ     Procedura mˆn¡  sou‡asn˜  adres ©.  Parametr  s
          obsahuje   specifikaci  cesty,   v‡etnˆ  p©¡padn‚  diskov‚
          jednotky.  S direktivou {$I-} je nastavena hodnota  funkce
          IOResult  na nulu,  je-li procedura £spˆ¨n ,  jinak funkce
          IOResult vrac¡ nenulovou hodnotu.
          Deklarace :   ChDir (s : string);

           Close
           ÄÄÄÄÄ     Procedura uzav¡r   otev©en˜  soubor.  Soubor  f
          musel  b˜t  p©ed  pou‘it¡m  procedury  otev©en  nˆkterou z
          procedur Reset, Rewrite nebo Append.
          Deklarace :   Close ( f : soubor);

           Eof
           ÄÄÄ     Funkce, kter  nab˜v  hodnoty True, je-li dosa‘eno
          konce souboru.  V opa‡n‚m p©¡padˆ  nab˜v   hodnoty  False.
          Nen¡-li  uveden  parametr  f  ,  p©edpokl d  se standardn¡
          soubor Input.
          Deklarace :   Eof [ ( var f : soubor ) ];

           Erase
           ÄÄÄÄÄ     Procedura vyma‘e  extern¡  soubor,  spojen˜  se
          jm‚nem  promˆnn‚  typu  soubor.  Tato  procedura nesm¡ b˜t
          pou‘ita na otev©en˜ soubor.
          Deklarace :   Erase( f : soubor );

           GetDir
           ÄÄÄÄÄÄ     Procedura zjist¡  sou‡asn˜  adres ©.  Sou‡asn˜
          adres ©  je  vr cen  v  parametru s .  Parametr d je v˜raz
          celo‡¡seln‚ho typu a ur‡uje diskovou jednotku. Hodnota d=0
          indikuje sou‡asnou diskovou jednotku, hodnota d=1 diskovou
          jednotku A, hodnota d=2 diskovou jednotku B atd.
          Deklarace :   GetDir ( d : byte; var s : string);

           IOResult
           ÄÄÄÄÄÄÄÄ       Funkce  vrac¡  hodnotu    status  posledn¡
          vykonan‚  I/O operace.  Mus¡ b˜t nastavena direktiva {$I-}
          p©eklada‡e. Jestli‘e p©i takto nastaven‚ direktivˆ nastane
          I/O chyba,  v¨echny n sleduj¡c¡ operace  jsou  ignorov ny,
          dokud nezavol me funkci IOResult.
          Deklarace :   IOResult: word;

                                                                  55






                         T u r b o  P a s c a l  v.5


           MkDir
           ÄÄÄÄÄ       Procedura zakl d  zadan˜ adres ©.  Parametr s
          obsahuje cestu tohoto nov‚ho  adres ©e.  Posledn¡  polo‘ka
          cesty nem–‘e b˜t existuj¡c¡ soubor.
          Deklarace :   MkDir ( s : string );


           Rename
           ÄÄÄÄÄÄ      Procedura p©ejmenov v  extern¡ soubor spojen˜
          se  souborem  f  na  jm‚no,  udan‚  v  parametru  newname.
          Procedura nesm¡ b˜t pou‘ita na otev©en˜ soubor.
          Deklarace :   Rename ( f : soubor; newname : string );

           Reset
           ÄÄÄÄÄ     Procedura otev¡r  existuj¡c¡ soubor. Parametr f
          mus¡  b˜t  spojen  se  jm‚nem extern¡ho souboru procedurou
          Assign. Parametr recsize je mo‘n‚ udat pouze pro soubor  s
          neudan˜m typem  a  ud v   velikost  p©en ¨en‚  jednotky  (
          implicitnˆ  128  ).  Chyba nastane,  neexistuje-li extern¡
          soubor.  Byl-li soubor f ji‘ otev©en,  je nejprve  zav©en,
          znovu otev©en a soubor je nastaven na po‡ tek.
          Deklarace :   Reset (f : soubor);
                        Reset (f : file; recsize : word);

           Rewrite
           ÄÄÄÄÄÄÄ          Procedura zakl d  a otev¡r  nov˜ soubor.
          Parametr recsize je mo‘n‚ pou‘¡t pro  soubory  s  neudan˜m
          typem a ud v  velikost p©en ¨en‚ jednotky ( implicitnˆ 128
          ).  Existuje-li  extern¡ soubor spojen˜ se souborem f,  je
          vymaz n a nov˜ soubor je zalo‘en.  Je-li pou‘ita procedura
          Rewrite  na  otev©en˜ soubor,  je soubor nejprve uzav©en a
          znovu zalo‘en.  Pozice souboru  je  nastavena  na  po‡ tek
          pr zdn‚ho souboru.
          Deklarace :   Rewrite ( f : soubor );
                        Rewrite ( f : file; recsize : word);

           RmDir
           ÄÄÄÄÄ          Procedura  odstra¤uje  (vymaz v  ) pr zdn˜
          adres ©.
          Deklarace :   RmDir ( s : string);

          2.10.2. Procedury a funkce pro soubory typu text
           Append
           ÄÄÄÄÄÄ          Procedura  otev¡r   existuj¡c¡  soubor  a
          nastavuje   p©¡¨t¡   pozici   z pisu   na  konec  souboru.
          Neexistuje-li specifikovan˜ soubor, nastane  chyba.  Je-li
          procedura pou‘ita na otev©en˜ soubor, je nejprve uzav©en a
          pak znovu otev©en.  Pozice p©¡¨t¡ho z pisu je nastavena na
          konec souboru.  Po vol n¡ procedury je soubor write only a

                                                                  56






                         T u r b o  P a s c a l  v.5

          funkce Eof je True.
          Deklarace :   Append ( var f : text);

           Eoln
           ÄÄÄÄ          Funkce nab˜v  hodnoty True,  je-li sou‡asn 
          pozice souboru na end-of-line znaku. Nen¡-li ud n parametr
          f, p©edpokl d  se standardn¡ soubor Input.
          Deklarace :   Eoln [ ( var f : text ) ];

           Flush
           ÄÄÄÄÄ     Procedura  zajist¡  z pis  bufru  do  extern¡ho
          souboru.  To  zaji¨‹uje,  ‘e  v¨echna  data  jsou  opravdu
          zaps na do souboru.  Procedura m  smysl pouze pro  soubory
          otev©en‚ pro z pis.
          Deklarace :   Flush ( var f : text );

           Read
           ÄÄÄÄ      Procedura umo‘¤uje ‡ten¡ jedn‚ nebo v¡ce hodnot
          z textov‚ho souboru. Parametry v1, v2 ...vn mohou b˜t typu
          Char, Integer-type,  Real-type nebo string.  Jedin˜ rozd¡l
          proti standardn¡mu Pascalu je typ string. Tato promˆnn  je
          zaplnˆna ©etˆzcem,  kter˜ je ‡ten ze vstupu. Je-li ©etˆzec
          specifikov n  del¨¡,  je  zaplnˆn  pouze  znaky  do  konce
          © dky.P©¡¨t¡  ‡ten¡  je  pak z nov‚ © dky.  Je-li vynech n
          parametr f, p©edpokl d  se standardn¡ soubor Input.
          Deklarace :   Read ( [var f : text;] v1 [,v2,...,vn]);

          Readln
          ÄÄÄÄÄÄ     Procedura vykon  stejnou  akci  jako  procedura
          Read  a pot‚ p©ejde na novou © dku.  Nen¡-li ud n parametr
          f,  p©edpokl d  se standardn¡ soubor Input.  Je-li pou‘ita
          procedura  bez  dal¨¡ch  parametr–,  je  nastavena  pozice
          p©¡¨t¡ho ‡ten¡ na dal¨¡ © dek.
          Deklarace :  Readln [ ( [var f:text;] v1 [,v2,...,vn] ) ];

           SeekEof
           ÄÄÄÄÄÄÄ     Funkce m  obdobn‚ vlastnosti jako funkce Eof.
          Funkce SeekEof v¨ak p©eskakuje v¨echny mezery,  tabel tory
          a  end-of-line  znaky.  Je  u‘ite‡n  p©i ‡ten¡ numerick˜ch
          hodnot. Nen¡-li ud n parametr f, p©edpokl d  se standardn¡
          soubor Input.
          Deklarace :   SeekEof [ ( var f : text ) ] : Boolean;

           SeekEoln
           ÄÄÄÄÄÄÄÄ     Funkce m  shodn‚ vlastnosti s  funkc¡  Eoln.
          Funkce  SeekEoln  v¨ak  p©ed vyhodnocen¡m p©esko‡¡ v¨echny
          mezery a tabel tory na dan‚ © dce.  Nen¡-li ud n  parametr
          f, p©edpokl d  se standardn¡ soubor Input.
          Deklarace :   SeekEoln [ ( var f : text ) ] : Boolean;


                                                                  57






                         T u r b o  P a s c a l  v.5

           SetTextBuf
           ÄÄÄÄÄÄÄÄ          Procedura umo‘¤uje program torovi volbu
          bufru pro sv‚  I/O  operace.  Implicitnˆ  textov‚  soubory
          pou‘¡vaj¡  bufr  128  znak–.  Je mo‘n‚ tento bufr zvˆt¨it,
          abychom redukovali po‡et z pis– na  disk.  Nen¡-li  uveden
          parametr   size,   je   vzata   implicitn¡  velikost  novˆ
          definovan‚ho bufru ur‡en‚ho parametrem buf.
          Deklarace :
          SetTextBuf ( var f:text; var buf [; size:word]);

           Write
           ÄÄÄÄÄ      Procedura  umo‘¤uje  v˜stup  jedn‚  nebo  v¡ce
          promˆnn˜ch do souboru f. Promˆnn‚ v1,...,vn mohou b˜t typu
          Char,  Integer-type, Real-type, Boolean, string. Parametry
          v1,...,vn mohou nab˜vat tento tvar
               Exp [ : MinWidth [ : DecPlaces ]]
          Parametr Exp ur‡uje hodnotu, kter  m  vystoupit.  Parametr
          MinWidth   ur‡uje  po‡et  pozic,   na  kter‚  m   b˜t  Exp
          vystoupen.  Nesta‡¡-li  MinWidth,   je  Exp  vystoupen  na
          pot©ebn˜  po‡et  pozic.  Parametr DecPlaces sm¡ b˜t pou‘it
          pouze pro Real-type a ur‡uje  po‡et  desetinn˜ch  m¡st  za
          desetinnou te‡kou.
          Deklarace :   Write ( [var f:text;] v1 [,v2,...,vn]);

           Writeln
           ÄÄÄÄÄÄÄ      Procedura vykon  stejnou akci jako procedura
          Write a pot‚ vystoup¡ do souboru f end-of-line znak. Nen¡-
          li ud n  parametr  f,  p©edpokl d   se  standardn¡  soubor
          Output. Je-li procedura vyvol na bez parametr– v1,....,vn,
          je zaps n pouze p©echod na novou © dku.
          Deklarace : Writeln [ ( [var f:text;] v1 [,v2,...,vn] ) ];

          2.10.3. Procedury a funkce pro netextov‚ soubory

           BlockRead
           ÄÄÄÄÄÄÄÄÄ        Procedura ‡te jeden nebo v¡ce z znam– ze
          souboru s    neudan˜m  typem.  Parametr  buf  je  promˆnn 
          jak‚hokoliv  typu,  do  kter‚  se budou zapisovat p©e‡ten‚
          z znamy.  Velikost z znamu je d na p©i  otev©en¡  souboru.
          Cel˜  p©e‡ten˜  blok  m   velikost  count*recsize,  a tato
          hodnota mus¡ b˜t men¨¡ jak 64kb. Parametr result indikuje,
          zda p©e‡ten˜ blok obsahuje count z znam–.  Je-li result po
          ukon‡en¡  procedury BlockRead roven parametru count,  bylo
          p©e‡teno count z znam–.  Jinak result ud v  po‡et skute‡nˆ
          p©e‡ten˜ch z znam–.
          Deklarace :   BlockRead (var f:file; var buf; count : word
                                   [; result : word ]);

           BlockWrite
           ÄÄÄÄÄÄÄÄÄÄ     Procedura zapisuje jeden nebo v¡ce z znam–

                                                                  58






                         T u r b o  P a s c a l  v.5

          do  souboru  s  neudan˜m typem.  Procedura pracuje obdobnˆ
          jako procedura BlockRead.
          Deklarace :   BlockWrite ( var f:file; var buf;
                                   count : word [; result : word] );

           FilePos
           ÄÄÄÄÄÄÄ     Funkce vrac¡ sou‡asnou pozici v souboru.  Je-
          li sou‡asn  pozice na po‡ tku souboru, je vr cena 0. Je-li
          na konci souboru,  je vr cena hodnota FileSize(f).  Funkce
          nesm¡ b˜t pou‘ita na soubor typu text.
          Deklarace :   FilePos ( f : soubor ) : longint;

           FileSize
           ÄÄÄÄÄÄÄÄ     Funkce vrac¡ po‡et  komponent  v  souboru  (
          aktu ln¡  velikost  ).  Nesm¡  b˜t  pou‘ita na soubor typu
          text.
          Deklarace :   FileSize ( f : soubor) : longint;

           Seek
           ÄÄÄÄ     Procedura nastav¡ sou‡asnou  pozici  souboru  na
          hodnotu   specifikovanou   parametrem   n.   ’¡slo   prvn¡
          komponenty je 0. Nelze ji pou‘¡t pro soubory typu text.
          Deklarace :   Seek ( f : soubor; n : longint );

           Truncate
           ÄÄÄÄÄÄÄÄ     Procedura umo‘¤uje vymazat  v¨echny  z znamy
          od  sou‡asn‚ pozice souboru.  Po ukon‡en¡ procedury funkce
          Eof nab˜v  hodnoty True.
          Deklarace :   Truncate ( f : soubor );






















                                                                  59






                         T u r b o  P a s c a l  v.5


          3.  Standardn¡ programov‚ jednotky.

               Standardn¡ programov‚ jednotky  se  nijak  neli¨¡  od
          programov˜ch  jednotek  definovan˜ch  u‘ivatelem,  stejn˜m
          zp–sobem se i pou‘¡vaj¡. Jejich hlavn¡m £‡elem je roz¨¡©it
          mo‘nosti Turbo Pascalu,  p©edev¨¡m doplnit  ji‘  vestavˆn‚
          funkce, procedury a konstanty.
               P©eddefinovan‚ standardn¡ programov‚ jednotky jsou :
          Crt        Umo‘¤uje lep¨¡ pr ci s kl vesnic¡ a obrazovkou,
          t.j.    ©¡zen¡   re‘imu    obrazovky,    roz¨¡©en‚    kody
          kl vesnice,     barvy,     pr ce    s    ok‚nky,    ©¡zen¡
          zvuku.
          Dos         Zp©¡stup¤uje  nejd–le‘itˆj¨¡  funkce  MS-DOSu,
          p©edev¨¡m   funkce   datumu   a   ‡asu,    funkce   ©¡zen¡
          adres ©– a funkce spou¨tˆn¡ program–.
          Graph3    Implementuje sou©adnicovˆ  orientovanou  (‘elv¡)
          grafiku ze syst‚mu Turbo Pascal ver. 3.0.
          Printer   Zjednodu¨uje pr ci s tisk rnou.
          System      Knihovna pomocn˜ch funkc¡ Turbo Pascalu.  Tato
          programov    jednotka    je    pou‘ita    automaticky    v
          ka‘d‚ jin‚ jednotce nebo programu.
          Turbo3        Umo‘¤uje  vy¨¨¡ stupe¤ kompatibility s Turbo
          Pascalem ver 3.0.
          Graph     Grafick˜ bal¡k  na  podporu  r–zn˜ch  grafick˜ch
          karet,    nap©.    CGA,   EGA,   VGA,   HERC,   IBM   3270
          PC, MCGA.
          Overlay   Umo‘¤uje vytv ©en¡ p©ekryvn˜ch program–.

               Standardn¡ programov‚ jednotky  se  pou‘¡vaj¡  pomoc¡
          klauzule uses, nap©.
                               uses Dos,Crt,Graph;

          !!!  P O Z O R  !!!
               P©ed  pou‘it¡m  programov˜ch jednotek Turbo3 a Graph3
          je nutn‚ specifikovat pou‘it¡ programov‚ jednotky Crt !

          3.1.  Standardn¡ programov  jednotka System

               Standardn¡ programov   jednotka  System  implementuje
          funkce,   procedury,  promˆnn‚  a  konstanty  d–le‘it‚  na
          "n¡zk‚" -  syst‚mov‚  £rovni,  jako  je  ©¡zen¡  vstupu  a
          v˜stupu  pomoc¡  soubor–,   pr ce  s  ©etˆzci,  operace  v
          pohybliv‚ © dov‚ ‡ rce a dynamick‚ p©idˆlov n¡ pamˆti.
               Programov  jednotka System je pou‘ita  automaticky  a
          nemus¡ b˜t jmenov na v klauzuli uses.

          Pozn mka:      Pokud   je  pou‘¡v n  numerick˜  koprocesor
          (direktiva p©eklada‡e {$N+}),  jsou  hodnoty  v  pohybliv‚
          © dov‚ ‡ rce (nap©. Sqrt, Pi, Sin apod.) roz¨¡©eny:

                                                                  60






                         T u r b o  P a s c a l  v.5

                     {$N+}
                     begin
                        Writeln(Pi);   { 3.14159265358979E+0000 }
                     end.
                     {$N-}
                     begin
                        Writeln(Pi);   { 3.1415926536E+00 }
                     end.
               Procedury a  funkce deklarovan‚ v programov‚ jednotce
          System  jsou  pops ny  v  kapitole  Standardn¡ procedury a
          funkce.   Programov   jednotka  System  d le  p©eddefinuje
          n sleduj¡c¡ promˆnn‚:
          var
             Input          : text;
             Output         : text;
          const
             PrefixSeg      : word      = 0;
             HeapOrg        : pointer   = nil;
             HeapPtr        : pointer   = nil;
             FreePtr        : pointer   = nil;
             FreeMin        : word      = 0;
             HeapError      : pointer   = nil;
             ExitProc       : pointer   = nil;
             RandSeed       : longint   = 0;
             FileMode       : byte      = 2;
             StackLimit     : word      = 0;
             InOutRes       : integer   = 0;
             ExitCode       : integer   = 0;
             ErrorAddr      : pointer   = nil;
             Test8087       : byte      = 0;

               N sleduj¡c¡   typov‚   konstanty   jsou   pou‘ity   v
          p©ekryvn‚m syst‚mu Turbo Pascalu :

             OvrCodeList    : word      = 0;
             OvrHeapSize    : word      = 0;
             OvrDebugPtr    : pointer   = nil;
             OvrHeapOrd     : word      = 0;
             OvrHeapPtr     : word      = 0;
             OvrHeapEnd     : word      = 0;
             OvrLoadList    : word      = 0;
             OvrDosHandle   : word      = 0;
             OvrEMSHandle   : word      = 0;

               Input a Output jsou  standardn¡  vstupn¡  a  v˜stupn¡
          soubory  pou‘it‚ v ka‘d‚ implementaci Pascalu.  Pokud nen¡
          v˜slovnˆ uvedeno jinak,  vztahuj¡ se na standardn¡ vstup a
          v˜stup (kl vesnice, obrazovka).
               PrefixSeg  je  promˆnn   obsahuj¡c¡  adresu  segmentu
          prefixu programu (Program Segment Prefix - PSP). Bl¡‘e viz

                                                                  61






                         T u r b o  P a s c a l  v.5

          p©¡ru‡ka opera‡n¡ho syst‚mu MS-DOS.
               HeapOrg,  HeapPtr,  FreePtr,  FreeMin a HeapError  se
          pou‘¡vaj¡   pro  pr ci  s  hromadou  p©i  tvorbˆ  program–
          vyu‘¡vaj¡c¡ch dynamick‚ p©idˆlov n¡ pamˆti.
               Ukazatel ExitProc je pou‘it pro tvorbu exit procedur.
               Promˆnn  RandSeed slou‘¡ ke  "startov n¡"  gener toru
          n hodn˜ch ‡¡sel. P©i vlo‘en¡ dan‚ hodnoty do t‚to promˆnn‚
          generuje funkce Random jednu ur‡itou posloupnost n hodn˜ch
          ‡¡sel.  To  je  d–le‘it‚ pro nˆkter‚ aplikace,  jako nap©.
          statistika a simulace.
               Zmˆna  hodnoty  promˆnn‚  FileMode   dovoluje   mˆnit
          p©¡stupov˜ re‘im ke v¨em druh–m pr vˆ otev©en˜ch soubor–.
               Programov   jednotka System si mˆn¡ pro svoji ‡innost
          nˆkter‚ p©eru¨ovac¡ vektory a instaluje vlastn¡ rutiny pro
          jejich obsluhu.  P©ed touto zmˆnou ulo‘¡ star‚ p©eru¨ovac¡
          vektory do osmn cti promˆnn˜ch typu pointer tohoto tvaru:
          SaveIntxx
          kde xx je ‡¡slo p©eru¨en¡. T˜k  se to tˆchto p©eru¨en¡:
               00,  02,  1B,  23, 24, 34, 35,36, 37, 38, 39, 3A, 3B,
          3C, 3D, 3E, 3F, 75

          3.2.  Standardn¡ programov  jednotka Printer

               Printer je velmi mal  programov   jednotka  vytvo©en 
          pro  uleh‡en¡ pr ce s tisk rnou.  Tato programov  jednotka
          deklaruje textov˜ soubor Lst a p©i©ad¡ ho k za©¡zen¡ LPT1.
          Pou‘it¡ bude z©ejm‚ z p©¡kladu :

             program HelloPrinter;
             uses Printer;
             begin
                Writeln(Lst,'Hello Printer ...')
             end.

          3.3.  Standardn¡ programov  jednotka Dos

               Implementuje  velk‚  mno‘stv¡  u‘ite‡n˜ch  rutin  pro
          vyu‘¡v n¡ funkc¡ MS-DOSu,  v‡etnˆ pr ce se soubory,  kter‚
          nejsou ve standardn¡m Pascalu implementov ny.

          3.3.1.  Konstanty, typy a promˆnn‚ jednotky Dos

               Konstanty p©¡znak–:
             const
                 FCarry      = $0001;
                 FParity     = $0004;
                 FAuxiliary  = $001C;
                 FZero       = $0040;
                 FSign       = $0080;
                 FOwerflow   = $0800;

                                                                  62






                         T u r b o  P a s c a l  v.5

               Tyto konstanty umo‘¤uj¡ p©¡stup k  jednotliv˜m  bit–m
          registru  p©¡znak–  (Flags)  a  lze  je  vyu‘¡t  nap©.   v
          souvislosti s  pou‘it¡m  procedur  Intr  nebo  MsDos.  Tak
          nap©¡klad

          R.Flags and FCarry <> 0

          m  hodnotu True, pokud je p©¡znak Carry nastaven.

               Konstanty re‘imu souboru:
               Tyto  konstanty  lze  pou‘¡t  v  procedur ch,   kter‚
          pracuj¡ se soubory na disku :
             const
                fmClosed  =  $D7B0;
                fmInput   =  $D7B1;
                fmOutput  =  $D7B2;
                fmInOut   =  $D7B3;

          Typy z znam– soubor–:

             type
                {Typed and untyped files}
                FileRec  =  record
                              Handle: Word;
                              Mode: Word;
                              RecSize: Word;
                              Private: array[1..26] of Byte;
                              UserData: array[1..16] of Byte;
                              Name: array[0..79] of Char;
                            end;
                { TextFile record }
                TextBuf  =  array[0..127] of Char;
                TextRec  =  record
                              Handle: Word;
                              Mode: Word;
                              BufSize: Word;
                              Private: Word;
                              BufPos: Word;
                              BufEnd: Word;
                              BufPtr: ^TextBuf;
                              OpenProc: Pointer;
                              InOutProc: Pointer;
                              FlushProc: Pointer;
                              CloseProc: Pointer;
                              UserData: array[1..16] of Byte;
                              Name: array[0..79] of Char;
                              Buffer: TextBuf;
                           end;

               Definice FileRec je pou‘ita jak pro soubory s  udan˜m

                                                                  63






                         T u r b o  P a s c a l  v.5

          typem,  tak pro soubory s neudan˜m typem, definice TextRec
          pouze pro soubory textov‚.

               Konstanty atribut– soubor–:

               Tyto konstanty jsou pou‘ity k testov n¡,  nastavov n¡
          a  nulov n¡  bit–  atribut–  soubor– ve spojen¡ s pou‘it¡m
          procedur GetAttr, SetAttr, FindFirst a FindNext :
             const
                ReadOnly    = $01;
                Hidden      = $02;
                SysFile     = $04;
                VolumeID    = $08;
                Directory   = $10;
                Archive     = $20;
                AnyFile     = $3F;
               Konstanty atribut– jsou aditivn¡, tak‘e nap©. p©¡kaz

          FindFirst('*.*',ReadOnly+Directory,S);

          nalezne jm‚no v adres ©i,  kter‚ je podadres ©em a z rove¤
          jen   pro   ‡ten¡.   Konstanta  AnyFile  zahrnuje  v¨echny
          atributy.

               Typ Registers:
               Promˆnn‚ typu Registers se  pou‘¡vaj¡  v  procedur ch
          Intr  a  MsDos  pro ur‡en¡ vstupu (a n sledn‚ho v˜stupu) z
          tˆchto  procedur.  Umo‘¤uj¡  zad vat  obsahy  jednotliv˜ch
          registr–  a  ve  v˜stupu pak testovat jednotliv‚ registry.
          Odvol vat se lze na 16ti bitov‚ registry (AX, BX,  CX ...)
          stejnˆ jako na jejich 8-bitov‚ ‡ sti (AH,  AL, BH, BL ...)
          :
             type
                Registers  =  record
                   case integer of
                     0:  (AX,BX,CX,DX,BP,SI,DI,DS,ES,Flags:   word);
          1: (AL,AH,BL,BH,CL,CH,DL,DH: byte);
                end;

               Typ DateTime:

               Promˆnn‚  tohoto  typu  se  pou‘¡vaj¡  ve  spojen¡  s
          procedurami UnpackTime a PackTime umo‘¤uj¡c¡ch p©¡stup  ke
          zhu¨tˆn˜m  z pis–m  datumu  a ‡asu,  kter‚ jsou v˜stupem z
          procedur GetFTime,  SetFTime,  FindFirst a  FindNext  (viz
          d le):

             type
                DateTime = record
                             Year,Month,Day,Hour,Min,Sec: integer;

                                                                  64






                         T u r b o  P a s c a l  v.5

                           end;
               Povolen‚ hodnoty jsou :
          Year:   1980..2099, Month:  1..1, Day:    1..3,
          Hour:   0..23,Min:    0..59, Sec:    0..59.

               Typ SearchRec:
               Promˆnn‚  tohoto  typu  se  pou‘¡vaj¡  ve  spojen¡  s
          procedurami  FindFirst  a  FindNext.   Je  v  nich  ulo‘en
          v˜sledn˜ z znam o prohl‚dnut‚ polo‘ce adres ©e:

             type
                SearchRec = record
                              Fill: array[1..21] of byte;
                              Attr: byte;
                              Time: longint;
                              Size: longint;
                              Name: string[12];
                            end;
               Polo‘ka Fill je rezervov na pro MS-DOS. Attr obsahuje
          atributy  vyhledan‚  polo‘ky  v  adres ©i  (lze  se  na nˆ
          odkazovat  pomoc¡  konstant   atribut–).   Time   obsahuje
          zhu¨tˆn˜ £daj o datumu a ‡asu vzniku polo‘ky v adres ©i. K
          p©eveden¡   £daje  do  ‡iteln‚ho  tvaru  je  t©eba  pou‘¡t
          proceduru UnpackTime. Size ud v  velikost polo‘ky adres ©e
          v bytech a Name jej¡ jm‚no.
          Jsou p©eddefinov ny n sleduj¡c¡ typy pro operace se  jm‚ny
          soubor– :
          type
               ComStr    = string [ 127 ];
               PathStr   = string [  79 ];
               DirStr    = string [  67 ];
               NameStr   = string [   8 ];
               ExtStr    = string [   4 ];

               Promˆnn  DosError:
               Tuto   promˆnnou   lze  pou‘¡t  v  mnoha  procedur ch
          programov‚ jednotky Dos ke zji¨tˆn¡ a  o¨et©en¡  chybov˜ch
          stav–:

             var  DosError: integer;

               Hodnoty,  kter‚ promˆnn  DosError obsahuje odpov¡daj¡
          ,chybov˜m kod–m MS-DOSu. Hodnota 0 (nula) indikuje £spˆ¨n‚
          ,ukon‡en¡ procedury (funkce). Ostatn¡ mo‘n‚ kody jsou:
             2 = soubor nebyl nalezen  (File not found)
             3 = cesta nebyla nalezena  (Path not found)
             5 = p©¡stup odep©en  (Access denied)
             6 = ¨patn  manipulace  (Invalid handle)
             8 = nedostatek pamˆti  (Not enough memory)
            10 = ¨patn‚ prost©ed¡ procesu  (Invalid environment)

                                                                  65






                         T u r b o  P a s c a l  v.5

            11 = ¨patn˜ form t  (Invalid format)
            18 = v¡ce soubor– nen¡  (No more files)

          3.3.2.  Procedury spr vy p©eru¨en¡

               GetIntVec  
               Vrac¡    adresu    ulo‘enou     ve     specifikovan‚m
          interrup‡n¡m vektoru
               GetIntVec(IntNo : byte; var Vector : pointer)

               Intr
               Vykon  obsluhu specifikovan‚ho p©eru¨en¡
            Intr(IntNo : byte; var Regs : Registers)

               MsDos
               Provede   po‘adovanou   funkci   MS-DOSu   (p©eru¨en¡
          21H)
               MsDos(var Regs : Registrers)

               SetIntVec   
               Nastav¡   specifikovan˜   interrup‡n¡    vektor    na
          specifikovanou adresu
               SetIntVec(IntNo : byte; Vector : pointer)

               SwapVectors 
               Zamˆn¡   vektory   p©eru¨en¡  SaveIntxx  za  aktu ln¡
          obsah p©eru¨ovac¡ch vektor–

          3.3.3.  Procedury data a ‡asu
               GetDate    
               Vrac¡ aktu ln¡ datum nastaven‚ v syst‚mu
               GetDate(var Year,Month,Day,DayofWeek : word)

               GetFTime   
               Vrac¡ datum a ‡as posledn¡ aktualizace souboru
               GetFTime(var f; var Time : longint)
          f je promˆnn  typu soubor (s udan˜m nebo  neudan˜m  typem,
          p©¡padnˆ  textov˜).  V˜stupn¡  £daj Time obsahuje zhu¨tˆn˜
          z pis datumu a ‡asu a je t©eba na nˆj aplikovat  proceduru
          UnpackTime.

               GetTime    
               Vrac¡ aktu ln¡ ‡as nastaven˜ v syst‚mu
               GetTime(var Hour,Minute,Second,Sec100 : word)

               PackTime   
               P©evede  z znam  typu  DateTime  do  zhu¨tˆn‚ho  ‡ty©
          bytov‚ho z znamu longint,  kter˜ potom  vyu‘¡v   procedura
          SetFTime
               PackTime(var DT : DateTime; var Time : longint)

                                                                  66






                         T u r b o  P a s c a l  v.5


               SetDate    
               nastav¡ nov‚ syst‚mov‚ datum
               SetDate(Year,Month,Day,DayofWeek : word)

               SetFTime   
               Nastav¡ datum a ‡as posledn¡ aktualizace souboru.
          Pro parametry plat¡ stejn‚ z sady jako u GetFTime
               SetFTime(var f; Time : longint)

               SetTime    
               Nastav¡ nov˜ syst‚mov˜ ‡as
               SetTime(Hour,Minute,Second,Sec100 : word)

               UnpackTime 
               P©evede ‡ty©bytov˜ zhu¨tˆn˜ £daj data a ‡asu posledn¡
          aktualizace souboru do "‡iteln‚ho" z znamu typu DateTime
               UnpackTime(Time : longint; var DT : DateTime)


          3.3.4.  Funkce stavu disku

               DiskFree  
               Vrac¡  po‡et  voln˜ch  byt–  na specifikovan‚ diskov‚
          jednotce
               DiskFree(Drive : word) : longint
               P©¡klad pou‘it¡ :
                       uses Dos;
                       begin
                         Writeln(DiskFree(0) div 1024, 'kB volnych')
                       end.

               DiskSize  
               Vrac¡ celkov˜ po‡et  byt–  na  specifikovan‚  diskov‚
          jednotce
               DiskSize(Drive : word) : longint

          3.3.5.  Procedury spr vy soubor–

               FExpand    
               Roz¨¡©¡ jm‚no souboru o cestu z hlavn¡ho adres ©e.
               FExpand (Path:PathStr):PathStr;

               FindFirst  
               Prohled v   specifikovan˜  (nebo  pracovn¡) adres © a
          najde  v  nˆm  prvn¡  polo‘ku  (t.j.   hlavi‡ku   souboru)
          odpov¡daj¡c¡ zadan‚ specifikaci a atribut–m

               FindFirst(Path:string; Attr:byte; var S:SearchRec)


                                                                  67






                         T u r b o  P a s c a l  v.5

               P©¡klad   programu,   kter˜   vypisuje   jm‚na  v¨ech
          arch¡vn¡ch soubor– typu .PAS :
                     uses Dos;
                     var
                        DirInfo : SearchRec;
                     begin
                        FindFirst('*.PAS',Archive,DirInfo);
                        while DosError = 0 do
                           begin
                              Writeln(DirInfo.Name);
                              FindNext(DirInfo);
                           end;
                     end.

               FindNext   
               Vrac¡ dal¨¡ polo‘ku v adres ©i odpov¡daj¡c¡  jm‚nu  a
          atribut–m zadan˜m v p©echoz¡m vol n¡ FindFirst
               FindNext(var S : SearchRec)

               FSearch    
               Hled   cestu  v seznamu knihoven p©edan‚m v parametru
          DirList.  Knihovny v DirList mus¡ b˜t oddˆleny st©edn¡kem.
          Vrac¡ pln‚ jm‚no souboru v‡etnˆ cesty.
               FSearch (Path:PathStr; DirList:String):PathStr;

               FSplit     
               Rozdˆl¡  jm‚no  do t©¡ ‡ st¡ - na cestu (Dir),  jm‚no
          (Name) a extenzi (Ext).
               FSplit (Path:PathStr;var Dir:DirStr;
                                       var Name:NameStr;
                                       var Ext:ExtStr);

          Typy  PathStr,DirStr,NameStr  a  ExtStr  jsou  pops ny   v
          kapitole 3.3.1.

               GetFAttr   
               Vrac¡ atributy souboru
               GetFAttr(var f; var Attr : byte)
          f  je promˆnn  typu soubor.  Soubor mus¡ b˜t t‚to promˆnn‚
          p©i©azen,  ale uzav©en.  Jednotliv‚ atributy lze  testovat
          pomoc¡ konstant atribut– souboru.

               SetFAttr   
               Nastavuje atributy souboru
               SetFAttr(var f; Attr : byte)






                                                                  68






                         T u r b o  P a s c a l  v.5

          3.3.6.  Procedury a funkce spr vy proces–.

               DosExitCode 
               Funkce,   kter    vrac¡   kod   ukon‡en¡  pod©azen‚ho
          procesu
                      DosExitCode : word
                     Mo‘n‚ hodnoty jsou :
                     0 ... norm ln¡ ukon‡en¡ pod©azen‚ho procesu
                     1 ... ukon‡en¡ pomoc¡ CTRL-C
                     2 ... ukon‡en¡ po chybˆ za©¡zen¡
                     3 ... ukon‡en¡ procedurou Keep (rezidentn¡
                           program)

               Exec
               Vykon   specifikovan˜   program   se   specifikovan˜m
          povelov˜m © dkem
               Exec(Path, CmdLine : string)
               Po    vykon n¡    se    nastavuj¡    hodnoty   funkc¡
          DosError  a  DosExitCode.   Procedura  Exec  nemˆn¡   stav
          p©i©azen¡  pamˆti!  Proto je t©eba p©ed p©ekladem programu
          pou‘¡vaj¡c¡ho   Exec   specifikovat   maxim ln¡   velikost
          dynamick‚ pamˆti (hromady), jinak nastane chyba DosError=8
          (nedostatek pamˆti)
                     P©¡klad,  kter˜  ukazuje,  jak vydat p©¡kaz DIR
          pomoc¡ pod©azen‚ho povelov‚ho procesoru :
                        Exec('\COMMAND.COM', '/C DIR *.PAS')

               Keep
               ukon‡¡ program, ale ponech  jej nad le v pamˆti
               Keep(ExitCode : word)
               Parametr   ExitCode   m    stejn˜   v˜znam   jako   u
          standardn¡ procedury Halt.
               V  pamˆti  z–st v   Stack  Segment,  Data  Segment  i
          Heap Segment.  Proto je nutn‚ spr vnˆ  nastavit  alokov n¡
          pamˆti   pomoc¡   direktivy   p©eklada‡e  $M.   Neodborn˜m
          pou‘¡v n¡m t‚to  procedury  se  v˜raznˆ  sni‘uje  kapacita
          pamˆti,  n slednˆ  m–‘e  doj¡t i k hav rii syst‚mu.  Proto
          doporu‡ujeme  vyu‘¡vat  procedury  Keep  pouze  s   dobrou
          znalost¡ MS-DOSu.

          3.3.7   Procedury pro operace s promˆnn˜mi MS-DOSu.

               GetVerify  
               Vrac¡ status vlajky Verify.
               GetVerify (var Verify:boolean);
               Pokud     Verify=true,     prov d¡    se    ovˆ©ov n¡
          spr vnosti p©enosu  p©i ka‘d‚ vstupn¡ i v˜stupn¡ operaci.

               SetVerify
               Nastavuje vlajku Verify na po‘adovanou hodnotu.

                                                                  69






                         T u r b o  P a s c a l  v.5

            SetVerify (Verify:boolean);

               DosVersion 
               Vrac¡  ‡¡slo  verze  MS-DOSu.   Ni‘¨¡  byte  v˜sledku
          obsahuje verzi, vy¨¨¡ byte modifikaci.
            DosVersion:word;

               EnvCount   
               Vrac¡   po‡et  promˆnn˜ch  obsa‘en˜ch  v  Environment
          oblasti MS-DOSu.
               EnvCount:integer;

               EnvStr
               Vrac¡ n zev a hodnotu promˆnn‚ ur‡enou jej¡m  po©ad¡m
          v oblasti.
            EnvStr(Index:integer):string;

               GetEnv
               Vrac¡ hodnotu promˆnn‚ kter  je ur‡ena n zvem.
            GetEnv(EnvVar:string):string;

               GetCBreak
               Vrac¡  stav vlajky Ctrl-Break.  Pokud je nastavena na
          true, program je mo‘n‚ zastavit pomoc¡ Ctrl-Break.
            GetCBreak:boolean;

               SetCBreak
            Nastavuje vlajku Ctrl-Break na ur‡enou hodnotu.
            SetCBreak (CBreak:boolean);


          3.4.  Standardn¡ programov  jednotka Crt

               Tato standardn¡ programov  jednotka  d v   prost©edky
          pro  snadn˜ p©¡stup k tˆm vlastnostem po‡¡ta‡– IBM PC/AT a
          plnˆ  kompatibiln¡ch,   kter‚  se   t˜kaj¡   obrazovky   a
          kl vesnice. Znamen  to, ‘e standardn¡ programovou jednotku
          Crt  lze pou‘¡vat pouze na tˆchto po‡¡ta‡¡ch.  Mezi hlavn¡
          aktivity   programov‚   jednotky   pat©¡   ©¡zen¡   re‘im–
          obrazovky,  roz¨¡©en‚ho  kodu  kl vesnice,  barev,  oken a
          zvuku.
               Crt pracuje velice rychle, nebo‹ vyu‘¡v  p©¡mo slu‘eb
          BIOSu, p©¡padnˆ vstupuje do obrazovkov‚ pamˆti.

          3.4.1.  Soubory Input a Output
               Crt  obsahuje   £vodn¡   vykonavateln˜   kod,   kter˜
          inicializuje  standardn¡  soubory  Input  a  Output,  t.j.
          p©i©ad¡ jim standardn¡  vstup  (kl vesnice)  a  standardn¡
          v˜stup (obrazovka):
             AssignCrt(Input); Reset(Input);

                                                                  70






                         T u r b o  P a s c a l  v.5

             AssignCrt(Output); Reset(Output);

          3.4.2.  Okna
               Crt   poskytuje   mo‘nost   vytv ©et   na   obrazovce
          jednoduch‚  typy  oken.  Okno  lze  vytvo©it  kdekoliv  na
          obrazovce,  kter   se  pak  st v   vnˆ okna nedosa‘iteln .
          Uvnit© okna funguj¡ v¨echny bˆ‘n‚ funkce tak,  jako by  se
          jednalo o celou obrazovku.  V¨echny obrazovkov‚ sou©adnice
          (vyjma sou©adnice,  kter‚ definuj¡ okno) jsou pak vzta‘eny
          relativnˆ  k oknu,  tedy sou©adnice (1,1) odpov¡d  horn¡mu
          lev‚mu rohu obrazovky-okna.

          3.4.3.  Speci ln¡ znaky
               Jestli‘e zapisujeme do  standardn¡ho  souboru  Output
          nebo  nˆjak‚ho  jin‚ho  souboru  p©ipojen‚ho  k Crt,  maj¡
          n sleduj¡c¡ znaky vyj d©en‚  ve  sv‚  kodov‚  reprezentaci
          zvl ¨tn¡ v˜znam :
          #7    Bell  -  zvonek.   Vyd   ton  z  vnit©n¡ho  tonov‚ho
          gener toru.
          #8  Backspace.  Vr t¡ kurzor o jeden znak zpˆt.  Pokud  je
          kurzor  ji‘  v  lev‚m  horn¡m  rohu aktu ln¡ho okna,  nem 
          ‘ dn˜ £‡inek.
          #10 Line feed.  Posune kurzor na n sleduj¡c¡ © dek (dol–).
          Pokud  je  kurzor  ji‘  na  posledn¡m  © dku,  provede  se
          rolov n¡  aktu ln¡ho  okna,  t.j.  ve¨ker˜  text  okna  se
          posune o © dek nahoru.
          #13 Carriage return. Vr t¡ kurzor na za‡ tek © dku.

          3.4.4.  Vstup © dku
               P©i  ‡ten¡  (vstupu)  © dku  ze  standardn¡ho souboru
          Input nebo nˆjak‚ho jin‚ho souboru p©ipojen‚ho  k  Crt  se
          sou‡asnˆ  zpracov v  pouze jedin˜ © dek.  Ten je ulo‘en do
          vni©n¡ho bufferu textov‚ho  souboru  a  p©i  ka‘d‚m  ‡ten¡
          nˆjak‚  promˆnn‚ je tento buffer pou‘it jako vstup.  Vstup
          © dku probˆhl, pokud je intern¡ buffer pr zdn˜.
               P©i ‡ten¡ © dku  z  textov‚ho  souboru  maj¡  nˆkter‚
          znaky zvl ¨tn¡ edita‡n¡ v˜znam :

          BackSpace       Sma‘e  posledn¡  vlo‘en˜  znak  (vlevo  od
          kurzoru).
          Esc         Sma‘e celou vstupn¡ © dku.
          Enter       Ukon‡uje vstupn¡ © dku a vlo‘¡ na  jej¡  konec
          do bufferu znak konce © dky (CR,LF).
          Ctrl-S      Tot‚‘ jako BackSpace.
          Ctrl-D      Vybere jeden znak z p©edchoz¡ vstupn¡ © dky.
          Ctrl-A      Tot‚‘ jako Esc.
          Ctrl-F      Vybere celou p©edchoz¡ vstupn¡ © dku.
          Ctrl-Z        Ukon‡¡ vstupn¡ © dku a vygeneruje znak konce
          souboru.
               Ctrl-Z vygeneruje znak konce souboru pouze v p©¡padˆ,

                                                                  71






                         T u r b o  P a s c a l  v.5

          ‘e  je  nastavena  promˆnn   CheckEOF  na  hodnotu   True.
          Implicitn¡ hodnota t‚to promˆnn‚ je False.

          3.4.5.  Konstanty a promˆnn‚.
               Konstanty textov˜ch re‘im– :
             const
               BW40  =  0;      { 40x25 B/W on Color Adapter }
               C040  =  1;      { 40x25 Color on Color Adapter }
               BW80  =  2;      { 80x25 B/W on Color Adapter }
               C080  =  3;      { 80x25 Color on Color Adapter }
               Mono  =  7;      { 80x25 B/W on Monochrome Adapter }
               Font8x8 = 256    { Add in for ROM font }
          Prvn¡  ‡ty©i  re‘imy podporuj¡ p©edev¨¡m grafick‚ adapt‚ry
          CGA  a   EGA,   re‘im   Mono   je   ur‡en   pro   z kladn¡
          monochromatick˜  adapt‚r.  Re‘im 8x8 je ur‡en pro grafick‚
          karty EGA/VGA - 43/50 © dk– na obrazovku.

               Konstanty barev text– :
             const
               Black              =  0;
               Blue               =  1;
               Green              =  2;
               Cyan               =  3;
               Red                =  4;
               Magenta            =  5;
               Brown              =  6;
               LightGray          =  7;
               DarkGray           =  8;
               LightBlue          =  9;
               LightGreen         =  10;
               LightCyan          =  11;
               LightRed           =  12;
               LightMagenta       =  13;
               Yellow             =  14;
               White              =  15;
               Blink              =  128;

          Konstanta Blink ozna‡uje re‘im blik n¡.
               Promˆnn‚ definovan‚ v jednotce Crt :

             var
               CheckBreak :  boolean;
               CheckEOF   :  boolean;
               CheckSnow  :  boolean;
               DirectVideo:  boolean;
               TextAttr   :  byte;
               WindMin    :  word;
               WindMax    :  word;
               LastMode   :  word;


                                                                  72






                         T u r b o  P a s c a l  v.5

               Promˆnn  CheckBreak  povoluje  (True)  nebo  zakazuje
          p©ijet¡  znaku Ctrl-Break.  Stisk tohoto dvojznaku zp–sob¡
          p©eru¨en¡ pascalsk‚ho programu v p©¡padˆ, ‘e CheckBreak m 
          hodnotu True.
          Tuto hodnotu m  implicitnˆ.
               Promˆnn   CheckEOF  povoluje  (True)  nebo   zakazuje
          generov n¡  znaku  konce  souboru.  V p©¡padˆ,  ‘e m  tato
          promˆnn  hodnotu False,  nem  stisk dvojznaku Ctrl-Z ‘ dn˜
          efekt.
               Promˆnn   DirectVideo  povoluje  (True) nebo zakazuje
          p©¡m˜ p©¡stup do obrazovkov‚  pamˆti  procedur m  Write  a
          Writeln.  Poznamenejme,  ‘e  tuto  mo‘nost  maj¡  v˜stupn¡
          procedury pouze p©i pou‘it¡ standardn¡ programov‚ jednotky
          Crt !
               Promˆnn  TextAttr ur‡uje aktu ln¡ barvu pozad¡  textu
          a textu samotn‚ho. Tato informace je ulo‘ena v jednom byte
          n sledovnˆ :
                         7   6   5   4   3   2   1   0
                       ÚÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                       ³ B ³ b   b   b ³ f   f   f   f ³
                       ÀÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          kde  prvn¡ ‡ty©i bity (ffff) p©edstavuj¡ barvu textu (t.j.
          16 variant v˜bˆru),  bity 4 - 6  (bbb)  p©edstavuj¡  barvu
          pozad¡  textu  (t.j.  8  variant  v˜bˆru) a bit B indikuje
          re‘im  blik n¡  textu.   V  p©edchoz¡m  odstavci   uveden‚
          konstanty lze pro £pravu t‚to promˆnn‚ pou‘¡t tak,  aby se
          byte  spr vnˆ  naplnil,   tedy  barvu  pozad¡   je   t©eba
          "posunout" o ‡ty©i bity doleva, t.j. vyn sobit ¨estn cti :

                   TextAttr := Yellow + Blue*16 + Blink;

          Uveden‚  nastaven¡  p©edstavuje  ‘lut‚  blikaj¡c¡ p¡smo na
          modr‚m pozad¡.
               Promˆnn‚  WindMin  a  WindMax  obsahuj¡  informaci  o
          um¡stˆn¡  a  velikosti  aktu lnˆ  zvolen‚ho  okna.   Prvn¡
          promˆnn  ud v  lev˜ horn¡ roh a druh  promˆnn  prav˜ doln¡
          roh aktu ln¡ho okna.  Informace  o  sou©adnic¡ch  bodu  je
          ulo‘ena  ve  slovˆ  (16 bit–) tak,  ‘e ve v˜znamˆj¨¡m byte
          (Hi(WindMax),  Hi(WindMin))  je  Y-ov   slo‘ka  a  v  m‚nˆ
          v˜znamn‚m byte (Lo(WindMax),Lo(WindMin))
          je X-ov  slo‘ka sou©adnice.
          Promˆnn  LastMode obsahuje posledn¡ aktivn¡ text mode p©ed
          vyvol n¡m grafick‚ho nebo odli¨n‚ho textov‚ho modu.

          3.4.6.  Procedury a funkce

          AssignCrt  p©ipojuje textov˜ soubor k Crt
                      AssignCrt(var f: Text)
          ClrEol      vyma‘e znaky od kurzoru do konce © dku v‡etnˆ

                                                                  73






                         T u r b o  P a s c a l  v.5

          ClrScr   vyma‘e obrazovku a um¡st¡ kurzor do lev‚ho
                       horn¡ho rohu
          Delay    ‡ek  specifikovan˜ po‡et milisekund
                      Delay(ms : word)
          DelLine     vyma‘e © dku, na n¡‘ je kurzor a zbytek textu
                       posune smˆrem nahoru. Jedn -li se o posledn¡
                       © dku, provede jen vymaz n¡
          GotoXY   um¡st¡ kurzor do specifikovan‚ pozice (X,Y)
                      GotoXY(X,Y : byte)
          HighVideo   nastav¡ vysok˜ jas textu
          InsLine  vlo‘¡ pr zdnou © dku za © dku, na n¡‘ je kurzor
          KeyPressed m  hodnotu True v p©¡padˆ, ‘e byla stisknuta
                       nˆjak  kl vesa. Testuje tedy stisk kl vesy.
                      KeyPressed : boolean


                      Typick˜ zp–sob pou‘it¡ :

                       repeat
                         AnyAction
                       until Keypressed;

          LowVideo  nastavuje n¡zk˜ jas textu
          NormVideo nastavuje norm ln¡ jas textu
          NoSound   vyp¡n  vnit©n¡ tonov˜ gener tor
          ReadKey   p©e‡te jeden znak z kl vesnice bez jeho v˜pisu
                        na obrazovku
                       ReadKey : char
                     P©¡klad typick‚ho pou‘it¡ :

                       Ch := ReadKey;
                       if Ch <> #0 then FuncKey := False else
                       begin
                         FuncKey := True;
                         Ch := ReadKey;
                       end;
          Sound     zapne vnit©n¡ tonov˜ gener tor
          TextBackground ur‡uje barvu pozad¡ textu
                      TextBackground(Color : byte)
                       Povolen‚ hodnoty parametru Color jsou v
                       rozsahu 0..7, tedy prvn¡ch osm barev
          TextColor  ur‡uje barvu textu
                      TextColor(Color : byte)
                      Pro text jsou povoleny barvy v  rozsahu 0..15
          TextMode ur‡uje druh textov‚ho re‘imu (viz Konstanty
                      textov˜ch re‘im–)
                      TextMode(Mode : integer)

          WhereX      funkce, kter  poskytuje X-ovou slo‘ku aktu ln¡
                      pozice kurzoru

                                                                  74






                         T u r b o  P a s c a l  v.5

                      WhereX : byte
          WhereY     funkce, kter  poskytuje Y-ovou slo‘ku aktu ln¡
                     pozice kurzoru
                     WhereY : byte
          Window     nastav¡ nov‚ aktu ln¡ okno
                     Window(X1,Y1,X2,Y2 : byte)
                     X1 a Y1 p©edstavuj¡ slo‘ky horn¡ho lev‚ho rohu
                     okna, X2 a Y2 slo‘ky doln¡ho prav‚ho rohu okna


          3.5.  Standardn¡ programov  jednotka Graph

               Tato standardn¡ programov  jednotka implementuje v¡ce
          ne‘  pades t  procedur  a  funkc¡  podporuj¡c¡ch  grafick‚
          operace.   Umo‘¤uje  pou‘¡vat  r–zn   vstupn¡  i  v˜stupn¡
          grafick   za©¡zen¡,  vytv ©et  bitovˆ  orientovan‚ obrazy.
          Bohatˆ  podporuje  v˜stup  textov‚  informace,   poskytuje
          nˆkolik sazeb text– (font–) a mo‘nost zapisovat je r–zn˜mi
          velikostmi a zp–soby.
               Graph je vlastnˆ samostatn˜ grafick˜ syst‚m, kter˜ je
          t©eba   inicializovat   a  na  konci  t‚‘  © dnˆ  ukon‡it.
          Organizace grafick‚ a textov‚ obrazovky se v z sadˆ  li¨¡,
          proto   existuj¡   speci ln¡   procedury   pro   p©ep¡n n¡
          grafick‚ho  a  textov‚ho  re‘imu.  Poznamenejme,  ‘e  tato
          operace  nem   nic  spole‡n‚ho  s psan¡m text– v grafick‚m
          re‘imu!
               Pro svoji ‡innost vy‘aduje grafika Turbo Pascalu  dvˆ
          skute‡nosti :
          -  p©¡tomnost driveru,  t.j.  ovlada‡e grafick‚ obrazovky,
          na    disku v souboru  typu  .BGI.  Driver  dod v   tv–rce
          grafiky  a mus¡ odpov¡dat grafick‚mu adapt‚ru um¡stˆn‚mu v
          po‡¡ta‡i.   Nej‡astˆji  u‘¡van˜m  grafick˜m  adapt‚rem  je
          adapt‚r  EGA,  p©¡padnˆ  CGA,  HEGA,  Hercules apod.  P©ed
          zapo‡et¡m pr ce s grafikou si dokonale  ovˆ©te,  jak˜  typ
          grafick‚ho adapt‚ru je ve va¨em po‡¡ta‡i
          -    p©¡tomnost  soubor–  sazeb p¡sma na disku v souborech
          typu  .CHR.   V  tˆchto  souborech  jsou  ulo‘eny  v¨echny
          dostupn‚  fonty,  kter‚  se  pou‘¡vaj¡  p©i  psan¡ text– v
          grafick‚m re‘imu.












                                                                  75






                         T u r b o  P a s c a l  v.5

               Grafika Turbo Pascalu pou‘¡v   n sleduj¡c¡  orientace
          sou©adnic :

               (0,0)  ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿  (639,0)
                      ³                                  ³
                      ³                                  ³
                      ³                                  ³
                      ³                                  ³
                      ³                                  ³
                      ³                                  ³
                      ³                                  ³
                      ³                                  ³
                      ³                                  ³
                      ³                                  ³
               (0,349)ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ(639,349)

               Ve  vodorovn‚m  smˆru roste sou©adnice X,  ve svisl‚m
          smˆru sou©adnice Y.  V¨echny hodnoty  jsou  ur‡eny  po‡tem
          zobraziteln˜ch  bod– (pixel–).  Hodnoty uveden‚ na obr zku
          plat¡ pro grafick˜ adapt‚r EGA v re‘imu  vysok‚  p©esnosti
          (High Resolution).
               Grafika  Turbo  Pascalu  m  bˆhem sv‚ ‡innosti ur‡it‚
          vlastnosti,   kter‚  lze  pr–bˆ‘nˆ   testovat   a   mˆnit.
          Jednotliv‚  grafick‚ operace neur‡uj¡ nap©.  jak‚ho typu a
          barvy budou ‡ ry,  kter‚ kresl¡,  nebo jak˜ v˜pl¤ov˜  vzor
          bude  pou‘it  pro  vyplnˆn¡  dan‚  oblasti.   To  je  d no
          aktu ln¡mi vlastnostmi grafiky,  kter‚ jsou pro  konkr‚tn¡
          okam‘ik   konstantn¡.   Lze  je  testovat  a  mˆnit  pouze
          speci ln¡mi procedurami a funkcemi.
               Podobnˆ jako je v textov‚m re‘imu umo‘nˆno  definovat
          okno  jako aktu ln¡ obrazovku,  existuje v grafice mo‘nost
          vytv ©et tzv.  viewport,  kter˜ omezuje grafickou  plochu.
          Nˆkter‚  adapt‚ry,  v‡etnˆ  EGA,  umo‘¤uj¡  v¨ak  vytv ©et
          nˆkolik grafick˜ch str nek najednou,  co‘ m–‘e b˜t v˜hodn‚
          nap©. pro r–zn‚ metody animace.
          Pro alokaci pamˆti jsou p©eddefinov ny dvˆ promˆnn‚:

          var GraphGetMemPtr,
              GraphFreeMemPtr:Pointer;

          kter‚  umo‘¤uj¡  k syst‚mu p©idat vlastn¡ zp–sob alokace a
          uvol¤ov n¡ pamˆti.

          3.5.1.  Kody ukon‡en¡ grafick˜ch operac¡
               Ka‘d  grafick   operace  vrac¡  kod,  kter˜  indikuje
          zp–sob jej¡ho ukon‡en¡, p©¡padnˆ druh vznikl‚ chyby. Tento
          kod pak poskytuje funkce GraphResult.  Mimo tuto funkci je
          k dispozici jin  funkce, kter  poskytne slovn¡ popis chyby
          v angli‡tinˆ.  Proto v p©ehledu chybov˜ch kod–  uv d¡me  i
          jejich anglick˜ popis :

                                                                  76






                         T u r b o  P a s c a l  v.5

              0 ... Bez chyby - No error
             -1 ... grafika nen¡ instalov na - (BGI) graphics not
                     installed
             -2 ... nen¡ k dispozici grafick˜ adapt‚r - Graphics
                     hardware not detected
             -3 ... driver nebyl nalezen - Device driver not found
             -4 ... soubor, v nˆm‘ je driver je ¨patn˜ - Invalid
                     device driver file
             -5 ... nen¡ pamˆ‹ pro instalaci driveru - Not enough
                     memory to load driver
             -6 ... grNoScanMem
             -7 ... grNoFloodMem
             -8 ... soubor, v nˆm‘ je font nebyl nalezen - Font file
                     not found
             -9 ... nen¡ pamˆ‹ pro nata‘en¡ font– - Not enough
                     memory to load font
            -10 ... ¨patn˜ grafick˜ re‘im pro vybran˜ driver -
                     Invalid graphics mode for selected driver
            -11 ... grError
            -12 ... grIOError
            -13 ... grInvalidFont
            -14 ... grInvalidFontNum


          3.5.2.  Procedury a funkce grafiky

          Arc    kresl¡ kruhov˜ oblouk aktu ln¡m stylem ‡ ry a aktu-
           ln¡ barvou

                 Arc(X,Y:integer; StAngle,EndAngle,Radius:word)

          Kruhov˜  oblouk  m   st©ed  v  bodˆ  (X,Y),  polomˆr  dan˜
          parametrem  Radius,   po‡ tek  a   konec   zadan˜   pomoc¡
          po‡ te‡n¡ho  a  koncov‚ho  £hlu  v  parametrech  StAngle a
          EndAngle.  V¨echny £hly se ch pou ve stupn¡ch,  se  smˆrem
          ot ‡en¡ proti smˆru hodinov˜ch ru‡i‡ek.

          Bar           kresl¡ pravo£hlou oblast vyplnˆnou aktu ln¡m
          v˜pl¤ov˜m vzorem
                    Bar(X1,Y1,X2,Y2: integer)
          Parametry X1,  Y1 ur‡uj¡ sou©adnice  lev‚ho  horn¡ho  bodu
          oblasti,  parametry X2, Y2 sou©adnice prav‚ho doln¡ho rohu
          oblasti.

          Bar3D      kresl¡ t©¡rozmˆrnou pravo£hlou  oblast  (kv dr,
          krychli) vyplnˆnou aktu ln¡m v˜pl¤ov˜m vzorem
                Bar3D(X1,Y1,X2,Y2:integer;Depth:word;Top:boolean)
          Parametry  X1,Y1,X2,Y2 maj¡ stejn˜ v˜znam jako u procedury
          Bar. Parametr Depth ur‡uje "hloubku" objektu v pixelech do
          t©et¡ho rozmˆru a parametr Top ©¡k ,  zda vytvo©en˜ objekt

                                                                  77






                         T u r b o  P a s c a l  v.5

          bude  nebo  nebude p©ikryt "v¡kem",  t.j.  zda nebude nebo
          bude dut˜.
               Pro tento £‡el jsou p©eddefinov ny 2 konstanty:
                        TopOn = true    { pln˜ }
                        TopOff = False  { dut˜ }

          Circle     kresl¡ kru‘nici o polomˆru  Radius  se  st©edem
          (X,Y)
                     Circle(X,Y:integer; Radius: word)

          ClearDevice   inicializuje   aktu lnˆ   vybran‚   v˜stupn¡
          za©¡zen¡ a p©iprav¡ toto  za©¡zen¡  k  v˜stupu.  V˜stupn¡m
          za©¡zen¡m  b˜v  obvykle obrazovka,  grafick  tisk rna nebo
          plotter. V p©¡padˆ obrazovky dojde k jej¡mu vymaz n¡.

          ClearViewPort zru¨¡ aktu ln¡ viewport

          CloseGraph ukon‡¡ ‡innost  grafiky  Turbo  Pascalu.  Tento
          p©¡kaz  reinicializuje  textov˜  re‘im obrazovky a prov d¡
          dal¨¡  pot©ebn‚  akce.  Je  t©eba  ho  prov‚st  v‘dy  p©ed
          opu¨tˆn¡m grafick‚ho programu

          DetectGraph  zjist¡,  jak˜  driver  a  jak˜ grafick˜ re‘im
          pot©ebujeme  pro   ‡innost   grafick‚ho   programu.   Tuto
          proceduru je vhodn‚ pou‘¡t v p©¡padˆ,  ‘e tyto skute‡nosti
          nezn me.

                DetectGraph(var GraphDriver,GraphMode: integer)

          V  souvislosti  s  identifikac¡  driveru  definuje   Graph
          n sleduj¡c¡ konstanty :
             const
               Detect      = 0;{ Request autodetection }
               CGA         = 1;
               MCGA        = 2;
               EGA         = 3;
               EGA64       = 4;
               EGAMono     = 5;
               IBM8514     = 6;
               HercMono    = 7;
               ATT400      = 8;
               VGA         = 9;
               PC3270      = 10;

          V  souvislosti  s  identifikac¡ grafick‚ho re‘imu definuje
          Graph n sleduj¡c¡ konstanty :
             const
               CGAC0       = 0; {320x200;cyan,red,yellow}
               CGAC1       = 1; {320x200;red,yellow,green)
               CGAC2       = 2; {320x200;cyan,magenta,white)

                                                                  78






                         T u r b o  P a s c a l  v.5

               CGAC3       = 3; {320x200;cyan,magenta,gray}
               CGAHi       = 4; {640x200; 1 page}
               MCGAC0      = 0; {320x200;green,red,yellow}
               MCGAC1      = 1; { viz CGAC1; 1 page }
               MCGAC2      = 2; { viz CGAC2; 1 page }
               MCGAC3      = 3; { viz CGAC3; 1 page }
               MCGAMed     = 2; {640x200; 1 page}
               MCGAHi      = 3; {640x480; 2 color; 1 page}
               EGALo       = 0; {640x200; 16 color; 4 pages}
               EGAHi       = 1; {640x350; 16 color; 2 pages}
               EGA64Lo     = 0; {640x200; 16 color; 1 page}
               EGA64Hi     = 1; {640x350; 4 color; 1 page}
               EGAMonoHi   = 3; {640x350}
               HercMonoHi  = 0; {720x348; 2 pages}
               ATT400C0    = 0; {320x200; green,red,yellow}
               ATT400C1    = 1; {320x200;red,yellow,green}
               ATT400C2    = 2; {320x200;cyan,magenta,white}
               ATT400C3    = 3; {320x200;cyan,magenta,gray}
               ATT400Med   = 4; {640x200; 1 page}
               ATT400Hi    = 5; {640x400; 1 page}
               VGALo       = 0; {640x200; 16 color; 4 pages}
               VGAMed      = 1; {640x350; 16 color; 2 pages}
               VGAHi       = 2; {640x480; 16 color; 1 page}
               PC3270Hi    = 0; {720x350; 1 page}
               IBM8514Lo   = 0; {640x480;256 colors}
               IBM8514Hi   = 1; {1024x768; 256 colors}

          DrawPoly   kresl¡ mnoho£heln¡k
                DrawPoly(NumPoints: word; var PolyPoints)
          Parametr  NumPoints  mus¡  b˜t  naplnˆn   po‡tem   vrchol–
          mnoho£heln¡ku,  parametr  PolyPoints  obsahuje  sou©adnice
          tˆchto vrchol– (je to strukturovan   promˆnn   bez  typu).
          Typick˜ zp–sob pou‘it¡ ukazuje n sleduj¡c¡ p©¡klad :

          const
               Triangle : array[1..4] of PolyPoint =
                 ((x: 50; y: 100),
                 (x: 100; y: 100),
                 (x: 150; y: 150),
                 (x: 50; y: 100));
             begin
               ...
               DrawPoly(SizeOf(Triangle)
                        div SizeOf(PolyPoint),
                        Triangle);
               ...
             end.

          V  p©¡kladu je vytvo©ena strukturovan  konstanta Triangle,
          kter  obsahuje ‡ty©i prvky  typu  PolyPoint  p©edstavuj¡c¡

                                                                  79






                         T u r b o  P a s c a l  v.5

          dvojice   sou©adnic   jednotliv˜ch   bod–.   P©i  vyvol n¡
          procedury  DrawPoly  se  nejprve  vypo‡¡t   po‡et  vrchol–
          mnoho£heln¡ku z v˜razu
                      SizeOf(Triangle) div SizeOf(PolyPoint)
          kde  se  d‚lka  konstanty  Triangle (16 bytes) celo‡¡selnˆ
          dˆl¡ velikost¡ promˆnn˜ch typu  Polypoint  (4  bytes).  Za
          druh˜   parametr   procedury   DrawPoly  se  dosad¡  p©¡mo
          konstanta Triangle.

          Ellipse    kresl¡ eliptick˜ oblouk
                  Ellipse(X,Y: integer; StAngle,EndAngle: word;
                             XRadius,YRadius: word)
          Parametry X a Y  definuj¡  sou©adnice  st©edu  eliptick‚ho
          oblouku,  StAngle  a EndAngle definuj¡ po‡ te‡n¡ a koncov˜
          £hel a XRadius a YRadius definuj¡ velikosti horizont ln¡ a
          vertik ln¡ p–losy. Pokud dosad¡me
                StAngle := 0; EndAngle := 359;
          dojde k vykreslen¡ cel‚ elipsy.

          FillEllipse vykresl¡ elipsu vyplnˆnou  aktivn¡m  v˜pl¤ov˜m
          vzorem.
                  FillEllipse ( X,Y :integer;   { st©ed }
                            XRadius,YRadius:word); { osy }

          FillPoly         kresl¡  mnoho£heln¡k  vyplnˆn˜  aktu ln¡m
          v˜pl¤ov˜m vzorem
                  FillPoly(NumPoints: word; var PolyPoints)

          Bli‘¨¡ popis viz procedura DrawPoly.

          FloodFill  vypln¡ ohrani‡enou  oblast  aktu ln¡  barvou  a
          v˜pl¤ov˜m vzorem.
              FloodFill ( X,Y : integer;  { bod uvnit© plochy }
                              Border:word);  { barva ohrani‡en¡ }

          GetArcCoords  poskytne  sou©adnice  naposledy nakreslen‚ho
          kruhov‚ho oblouku
              GetArcCoords(var ArcCoords: ArcCoordsType)
          Typ parametru je p©eddefinov n n sledovnˆ :
             type
               ArcCoordsType = record
                                 X,Y: integer;
                                 XStart,YStart: word;
                                 XEnd,YEnd: word;
                               end;

          kde X a Y ud vaj¡  sou©adnice  st©edu  oblouku,  XStart  a
          YStart   sou©adnice   po‡ te‡n¡ho   bodu  a  XEnd  a  YEnd
          sou©adnice koncov‚ho bodu naposledy nakreslen‚ho kruhov‚ho
          oblouku.

                                                                  80






                         T u r b o  P a s c a l  v.5


          GetAspectRatio  vrac¡  efektivn¡   rozli¨ovac¡   schopnost
          grafick‚ obrazovky v ose X a v ose Y
               GetAspectRatio(Xasp,Yasp: word)

          GetBkColor vrac¡ aktu ln¡ barvu pozad¡ (kresl¡c¡ plochy)
           GetBkColor : word
          Typick˜ zp–sob pou‘it¡ :
             CurrentColor := GetBkColor;

          GetColor   vrac¡ aktu ln¡ barvu pop©ed¡ ("inkoustu")
             GetColor : word;

          GetDefaultPalette  vrac¡  vˆtu  typu  PaletteType,  kde je
          ulo‘ena paleta inicializovan  p©i InitGraph.
             GetDefaultPalette(Palette:PaletteType);

          kde : type PaletteType=record
                             Size : word;
                             Colors:array[0..MaxColors]
                                           of shortint;
                     end;
          GetDriveName  vrac¡  ©etˆzec  obsahuj¡c¡  jm‚no  aktivn¡ho
          driveru.

          GetFillPattern   vrac¡   aktu ln¡   u‘ivatelem  definovan˜
          v˜pl¤ov˜ vzor. Typ parametru je pops n u SetFillPattern.
              GetFillPattern(var FillPattern:FillPatternType);

          GetFillSettings poskytuje informace o aktu ln¡m  v˜pl¤ov‚m
          vzoru
           GetFillSettings(var FillInfo: FillSettingsType)
          Typ FillSettingType je p©eddeklarov n n sledovnˆ:
             type
               FillSettingsType = record
                                    Pattern : word;
                                    Color   : word;
                                  end;

          kde  Pattern  ud v   ‡¡slo  v˜pl¤ov‚ho vzoru a Color ud v 
          barvu v˜pl¤ov‚ho vzoru.  Typick˜  zp–sob  pou‘it¡  ukazuje
          p©¡klad :
             var
               FillInfo : FillSettingsType;
               CurPattern,CurColor : word;
             begin
               ...
               GetFillSettings(FillInfo);
               CurPattern := FillInfo.Pattern;
               CurColor := FillInfo.Color;

                                                                  81






                         T u r b o  P a s c a l  v.5

               ...
             end.

          GetGraphMode vrac¡ kod aktu ln¡ho grafick‚ho re‘imu
           GetGraphMode : integer
          Typick˜ zp–sob pou‘it¡ :
               CurrentGraphMode := GetGraphMode;
          Jednotliv‚   grafick‚   re‘imy   lze  pak  testova  pomoc¡
          p©eddeklarovan˜ch konstant (viz DetectGraph).

          GetImage   ulo‘¡  do  pamˆti  specifikovanou  obd‚ln¡kovou
          oblast grafick‚ obrazovky.
          GetImage(x1,y1,x2,y2:integer; { hranice }
                   var BitMap);   { oblast pamˆti }

          P©¡klad :
          var p : pointer;
              w : word;
          .......
          w:=ImageSize(200,160,220,190);
          GetMem(p,w);
          GetImage(200,160,220,190,p^);
          ......
          PutImage(100,100,p^,CopyPut);

          GetLineSettings  poskytuje  informace  o  aktu ln¡m druhu,
          vzoru a s¡le ‡ar
           GetLineSettings(var LineInfo: LineSettingsType)
          Typ LineSettingsType je p©eddefinov n n sledovnˆ:
             type
               LineSettingsType = record
                                    LineStyle : word;
                                    Pattern   : word;
                                    Thickness : word;
                                  end;
          Polo‘ka LineStyle ur‡uje kod druhu ‡ ry a Thickness ur‡uje
          ¨¡©ku ‡ ry.  V  souvislosti  s  identifikac¡  tˆchto  dvou
          vlastnost¡ ‡ar jsou p©eddefinov ny n sleduj¡c¡ konstanty :
             const
               { Line styles }
               SolidLn    = 0;
               DottedLn   = 1;
               CenterLn   = 2;
               DashedLn   = 3;
               UserBitLn  = 4;   { User defined line style }
               { Line widths }
               NormWidth   = 1;
               ThickWidth  = 3;

          GetMaxMode  vrac¡  mo‘n˜  po‡et  mod–  pro aktivn¡ driver.

                                                                  82






                         T u r b o  P a s c a l  v.5

          ’¡sla 0..GetMaxMode  je  no‘n‚  pou‘¡t  jako  parametr  do
          SetColor.
              GetMaxMode:word;

          GetMaxColor  vrac¡  nejvˆt¨¡  ‡¡slo barvy,  kter‚ je mo‘n‚
          pou‘¡t jako parametr do SetColor
              GetMaxColor:word;

          GetMaxX    vrac¡ maxim ln¡ po‡et bod– ve smˆru X
              GetMaxX : word
          Tedy nap©¡klad pro driver EGA v re‘imu EGAHi bude  hodnota
          GetMaxX = 639.

          GetMaxY    vrac¡ maxim ln¡ po‡et bod– ve smˆru Y
              GetMaxY : word
          Tedy  nap©¡klad pro driver EGA v re‘imu EGAHi bude hodnota
          GetMaxY = 349.

          GetModeName vrac¡ ©etˆzec obsahuj¡c¡ jm‚no  modu  ur‡en‚ho
          parametrem
              GetModeName(ModeNum:integer):string;

          GetModeRange  vrac¡  po‡et mod– pro specifikovan˜ grafick˜
          driver  oddelenˆ  pro   n¡zkou   a   vysokou   rozli¨ovac¡
          schopnost.
              GetModeRange(GraphDriver:integer;
                       var LoMode,HiMode:integer);

          GetPalette  poskytuje  informace  o  aktu ln¡  velikosti a
          nastaven¡ palety barev
              GetPalette(var Palette : PaletteType)
          Typ PaletteType je p©eddefinov n n sledovnˆ :
             const
               MaxColors = 15;
             type
               PaletteType = record
                 Size   : byte;
                 Colors : array[0..MaxColors] of shortint;
                             end;

          Polo‘ka Size obsahuje velikost palety  barev,  tedy  po‡et
          dostupn˜ch barev. Polo‘ka Colors obsahuje skute‡n‚ hodnoty
          barev v paletˆ.

          GetPaletteSize vrac¡ velikost aktivn¡ palety barev.
              GetPaletteSize:integer;

          GetPixel       vrac¡  kod  barvy  bodu  o  specifikovan˜ch
          sou©adnic¡ch
              GetPixel(X,Y: integer) : word

                                                                  83






                         T u r b o  P a s c a l  v.5

          K¢d odpov¡d  um¡stˆn¡ barvy v paletˆ barev.

          GetTextSettings poskytuje informace o aktu ln¡m  nastaven¡
          vlastnost¡ grafick‚ho textu
              GetTextSettings(var TextInfo: TextSettingsType)
          Typ TextSettingsType je p©eddefinov n n sledovnˆ:
             type
               CharSizeType = 1..10;
               TextSettingsType = record
                                    Font      = word;
                                    Direction = word;
                                    CharSize  = CharSizeType;
                                    Horiz     = word;
                                    Vert      = word;
                                  end;
          V   souvislosti   s   identifikac¡  textov˜ch  font–  jsou
          p©eddeklarov ny n sleduj¡c¡ konstanty :
             const
               DefaultFont          = 0; {8x8 bit mapped}
               TriplexFont          = 1; {"Stroked" fonts}
               SmallFont            = 2;
               SansSerifFont        = 3;
               GothicFont           = 4;
               HorizDir             = 0; {Left to right}
               VertDir              = 1; {Bottom to top}
               UserCharSize         = 0;

          GetViewSettings poskytuje informace o aktu ln¡m viewportu
               GetViewSettings(var ViewPort : ViewPortType)
          Typ ViewPortType je p©eddefinov n n sledovnˆ :
             type
               ViewPortType = record
                                X1,Y1,X2,Y2: word;
                                Clip :  boolean;
                              end;
          Polo‘ky X1,Y1,X2,Y2 ud vaj¡ velikost aktu ln¡ho  viewportu
          (horn¡  lev˜  a  doln¡  prav˜ bod) a Clip ud v ,  zda bude
          (True) nebo nebude  prov dˆno  "zast©ih v n¡"  objekt–  do
          rozmˆr– viewportu.

          GetX
          GetY        vrac¡ X-ovou (GetX) a Y-ovou (GetY) sou©adnici
          aktu ln¡ polohy grafick‚ho kurzoru - "pis tka"
              GetX :  integer;
              GetY :  integer;

          GraphDefaults navr t¡ v¨echny standardn¡ promˆnn‚ do stavu
          po InitGraph.

          GraphErrorMsg  vrac¡  slovn¡  popis  chyby   specifikovan‚

                                                                  84






                         T u r b o  P a s c a l  v.5

          chybov˜m kodem
           GraphErrorMsg(ErrorCode: integer) :  string
          Hodnotu ErrorCode lze z¡skat funkc¡ GraphResult.

          GraphResult   vrac¡  chybov˜  kod,   resp.   kod  ukon‡en¡
          p©edchoz¡ grafick‚ operace. P©¡klad ukazuje typick˜ zp–sob
          pou‘it¡ ve spojitosti s funkc¡ GraphErrorMsg :
             var
               GraphDriver,GraphMode :  integer;
             begin
               GraphDriver := Detect;
               InitGraph(GraphDriver,GraphMode,'');
               if GraphResult <> 0 then
               begin
                 Writeln('Graphics error: ',
                         GraphErrorMsg(GraphResult));
                 Readln;
                 Halt(1);
               end;
               ...
             end.
          ImageSize  vrac¡ hodnotu, kter  ud v  po‡et byte nutn˜ch k
          ulo‘en¡ pravo£hl‚ oblasti obrazovky
              ImageSize(X1,Y1,X2,Y2 :  word) :  word
          Hodnoty X1,Y1 ud vaj¡  lev˜  horn¡  roh  oblasti,  hodnoty
          X2,Y2 ud vaj¡ prav˜ doln¡ roh oblasti.

          InitGraph    inicializuje  grafick˜ syst‚m Turbo Pascalu a
          nastavuje pat©i‡n‚ periferie do grafick‚ho re‘imu
              InitGraph(var GraphDriver :  integer;
                           var GraphMode :  integer;
                           DriverPath : string)
          Pro ur‡en¡ parametr–  GraphDriver  a  GraphMode  lze  u‘¡t
          pat©i‡n˜ch p©eddefinovan˜ch konstant (viz procedura
          DetectGraph),  nebo  p©¡mo  v˜stup– procedury DetectGraph.
          Parametr DriverPath ur‡uje cestu k adres ©i na  disku,  na
          nˆm‘  se  vyskytuje  soubor typu .BGI obsahuj¡c¡ p©¡slu¨n˜
          driver.  P©edpokl dejme,  ‘e m me grafick˜ adapt‚r  EGA  a
          chceme  kreslit  v  jeho  re‘imu  vysok‚  p©esnosti  (High
          Resolution).  D le nech‹ se  driver  pro  EGA  (ulo‘en˜  v
          souboru  EGA.BGI)  nal‚z   na  disku C: a adres ©i PASCAL,
          kter˜ le‘¡ hned pod hlavn¡m adres ©em. Potom zad me p©¡kaz
          k inicializaci grafiky n sledovnˆ :
               InitGraph(EGA,EGAHi,'C:\PASCAL\')
          Pr zdn˜ ©etˆzec DriverPath (viz p©edchoz¡ p©¡klad)  ud v ,
          ‘e p©¡slu¨n˜ driver se nach z¡ na pracovn¡m adres ©i.

          InstallUserDriver umo‘¤uje instalaci vlastn¡ho driveru.
              InstallUserDriver(Name:string;
                            AutoDetectPtr:pointer):integer;

                                                                  85






                         T u r b o  P a s c a l  v.5


          InstallUserFont instalace nov‚ho fontu naza©azen‚ho do BGI
          syst‚mu.
              InstallUserFont(FontFileName:string):integer;
          V˜sledkem  tˆchto funkc¡ je ‡¡slo chybov‚ho stavu (pops no
          v 3.5.1).

          Line       kresl¡ ‡ ru z  bodu  (X1,Y1)  do  bodu  (X2,Y2)
          aktu ln¡m stylem ‡ar a aktu ln¡ barvou
              Line(X1,Y1,X2,Y2 :  integer)
          Vyzkou¨ejte si :
             Randomize;
             repeat
               Line(Random(GetMaxX),Random(GetMaxY),
                    Random(GetMaxX),Random(GetMaxY));
             until KeyPressed;

          LineRel        kresl¡  ‡ ru  od aktu ln¡ polohy grafick‚ho
          kurzoru do bodu,  jeho‘ sou©adnice jsou  d ny  vd lenost¡,
          t.j.  p©¡r–stkem sou©adnic v ose X a Y, od aktu ln¡ polohy
          grafick‚ho kurzoru
              LineRel(DX,XY :  integer)

          LineTo      kresl¡  ‡ ru  od  aktu ln¡  polohy  grafick‚ho
          kurzoru do bodu (X,Y)
              LineTo(X,Y :  integer)

          MoveRel        p©esune  grafick˜  kurzor  do  pozice  dan‚
          p©¡r–stkem sou©adnic v  ose  X  a  Y  od  aktu ln¡  polohy
          grafick‚ho kurzoru
              MoveRel(DX,DY :  integer)

          MoveTo     p©esune grafick˜ kurzor do bodu (X,Y)
              MoveTo(X,Y :  integer)

          OutText     vyp¡¨e specifikovan˜ ©etˆzec aktu ln¡m fontem,
          barvou a velikost¡ od aktu ln¡ pozice grafick‚ho kurzoru
              OutText(TextString :  string)

          OutTextXY vyp¡¨e specifikovan˜ ©etˆzec  aktu ln¡m  fontem,
          barvou a velikost¡ od pozice (X,Y)
              OutText(X,Y: integer; TextString: string)

          PieSlice      kresl¡  kruhovou  v˜se‡  vyplnˆnou aktu ln¡m
          v˜pl¤ov˜m vzorem
              PieSlice(X,Y: integer;
                          StAngle,EndAngle,Radius: word)
          Jednotliv‚ parametry maj¡ stejn˜ v˜znam jako  u  procedury
          Arc.


                                                                  86






                         T u r b o  P a s c a l  v.5

          PutImage      vlo‘¡  bitovˆ  definovan˜ obraz na grafickou
          obrazovku
              PutImage(X,Y: integer; var BitMap; BitBlt: word)
          Parametry X a Y ud vaj¡  sou©adnice  lev‚ho  horn¡ho  rohu
          pravo£hl‚  oblasti,  kam  m  b˜t obraz vlo‘en.  Netypovan˜
          parametr BitMap ud v  v˜¨ku  a  ¨¡©ku  oblasti  a  vlastn¡
          bitov˜  obraz  oblasti.   Parametr  BitBlt  ur‡uje,  jakou
          operac¡ se bude obraz vkl dat, t.j. jak˜m zp–sobem se bude
          skl dat se st vaj¡c¡m obrazem na grafick‚  obrazovce.  Pro
          identifikaci  tohoto  zp–sobu  jsou definov ny n sleduj¡c¡
          konstanty:
             const
               NormalPut  = 0;   { MOV }
               CopyPut    = 0;   { MOV }
               XORPut     = 1;   { XOR }
               ORPut      = 2;   { OR }
               ANDPut     = 3;   { AND }
               NOTPut     = 4;   { NOT }

          N sleduj¡c¡   p©¡klad   uk ‘e   zp–sob   pou‘it¡    bitovˆ
          orientovan‚ grafiky :
             uses Graph;
             var
               p     : pointer;
               Size  : word;
             begin
               ...
               Size := ImageSize(10,20,30,40);
               GetMem(p,Size); {Allocate memory on heap}
               GetImage(10,20,30,40,p^);   {Read image}
               PutImage(100,100,p^,NormalPut); {Copy image}
               ...
             end.
          PutPixel         vytvo©¡   (nakresl¡)  bod  v  pozici  X,Y
          specifikovan‚ barvy (Pixel)
              PutPixel(X,Y: integer; Pixel: word)

          Rectangle  kresl¡ dvˆ na sebe kolm‚ ‡ ry
              Rectangle(X1,Y1,X2,Y2 : integer)
          V˜znam jednotliv˜ch parametr– bude z©ejm˜ z obr zku:
          .(X1,Y1)
                                  +  (X1,X2)
                                  ³
                                  ³
                                  ³
                                  ³
                                  ³
                                  ³
                                  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ + (X2,Y2)


                                                                  87






                         T u r b o  P a s c a l  v.5


          RegisterBGIDriver   ozn m¡   grafick‚mu   syst‚mu   adresu
          driveru, kter˜ byl nata‘en do programu.
              RegisterBGIDriver(Driver:pointer):integer;

          RegisterBGIFont tot‚‘ pro font.
          P©¡klad :

          ...
          Assign (FontF,'TRIP.CHR');
          Reset(FontF,1);
          GetMem(FontP,FileSize(FontF));
          if RegisterBGIFont(FontP) < 0 then
             writeln('Error registering font : ',
                      GraphErrorMsg(GraphResult));
             Halt(1);
          end;
          ...... vlastn¡ grafick‚ operace.

          RestoreCrtMode   nastav¡   textov˜  m]d,   jak˜  byl  p©ed
          inicializac¡ grafiky.

          Sector     vykresl¡ a vypln¡ ‡ st elipsy.
               Sector(x,y:integer;      {st©ed}
                     StAngle,EndAngle, {po‡. a koncov˜ £hel}
                     XRadius,YRadius:word); {polomˆry os}

          SetActivePage nastav¡ aktivn¡ str nku
               SetActivePage(Page :  word)

          SetAllPalette vytvo©¡ novou paletu
               SetPalette(var Palette)
          Netypovan˜ parametr Palette ud v  ¨¡©ku palety (t.j. po‡et
          barev palety) a jednotliv‚ barvy palety.  Parametrem  m–‘e
          b˜t   nap©.    promˆnn    typu   PaletteType,   kter˜   je
          p©eddefinov n (viz procedura GetPalette).

          SetBkColor nastav¡ barvu pozad¡, t.j. kresl¡c¡ plochy
               SetBkColor(Color :  word)

          SetColor   nastav¡ barvu pop©ed¡, t.j. "inkoustu"
               SetColor(Color :  word)

          SetFillPattern umo‘¤uje definovat vlastn¡ v˜pl¤ov˜ vzor
               SetFillPattern(Pattern: FillPatternType;
                                 Color: word)
          kde typ FillPatternType je p©eddefinov n n sledovnˆ:
             type
               FillPatternType = array[1..8] of byte;
          T¡m je vytvo©ena matice 8x8 bit– (= bod–), v n¡‘ nastaven˜

                                                                  88






                         T u r b o  P a s c a l  v.5

          bit  p©edstavuje  bod  na  obrazovce,tedy  nap©¡klad   lze
          vytvo©it a specifikovat n sleduj¡c¡ v˜pl¤ov˜ vzor :

                   1   2   3   4   5   6   7   8         Hexa
                   .       .       .       .       1     $AA
                       .       .       .       .   2     $55
                   .       .       .       .       3     $AA
                       .       .       .       .   4     $55
                   .       .       .       .       5     $AA
                       .       .       .       .   6     $55
                   .       .       .       .       7     $AA
                       .       .       .       .   8     $55

          P©¡klad vytvo©en¡ a pou‘it¡ tohoto vzoru :
             uses Graph;
             const
               Muj: FillPatternType =
                    ($AA,$55,$AA,$55,$AA,$55,$AA,$55);
             begin
               ...
               SetFillPattern(Muj,White);
               Bar(0,0,100,100);
               ...
             end.

          SetFillStyle nastav¡ v˜pl¤ov˜ vzor a barvu.
                SetFillStyle(Pattern:word;
                                Color:word);
          Pro  tyto  procedury je p©eddefinov no 12 druh– v˜pl¤ov˜ch
          vzor– :

          EmptyFill         = 0  { fills in background color}
          SolidFill         = 1    {  fills  in  solid  fill  color}
          LineFill          = 2  { ------- fill }
          LtSlashFill       = 3  { /// fill }
          SlashFill         = 4  { /// fill with thick lines}
          BkSlashFill       = 5  { \\\ fill with thick lines}
          LtBkSlashFill     = 6  { \\\\ }
          HatchFill         = 7  { light hatch fill}
          XHatchFill        = 8  { heavy cross hatch fill}
          InterleaveFill    = 9  { interleaving line fill}
          WideDotFill       = 10 { widely spaced dot fill}
          CloseDotFill      = 11 { closely spaced dot fill}
          UserFill          = 12 { user defined fill}

          SetGraphBufSize (BufSize:word);
          umo‘¤uje  u‘ivateli zmˆnit velikost standardn¡ vyrovn vac¡
          pamˆti pro grafick‚ vypl¤ov n¡.

          SetGraphMode nastav¡ po‘adovan˜ grafick˜ re‘im

                                                                  89






                         T u r b o  P a s c a l  v.5

               SetGraphMode(Mode: integer)
          P©i specifikaci lze u‘¡vat p©eddefinovan‚  konstanty  (viz
          procedura DetectGraph).

          SetLineStyle nastav¡ nov˜ aktu ln¡ styl ‡ar
               SetLineStyle(LineStyle: word;
                               Pattern: word;
                               Thickness: word)
          P©i  specifikaci  lze u‘¡vat p©eddefinovan‚ konstanty (viz
          procedura GetLineSettings).

          SetPalette zmˆn¡ jednu specifikovanou barvu v paletˆ
               SetPalette(ColorNum: word; Color: byte)

          SetRGBPalette  umo‘¤uje  modifikace  palety   pro   driver
          IBM8514 a VGA
               SetRGBPalette(Collornum,RedValue,GreenValue,
                                BlueValue:integer);

          SetTextJustify nastav¡ aktu ln¡ zp–sob um¡stˆn¡ text–
               SetTextJustify(Horiz,Vert: word)
          Lze u‘¡vat n sleduj¡c¡ p©eddefinovan‚ konstanty:
             const
               { Horizontal justification }
               LeftText   = 0;
               CenterText = 1;
               RightText  = 2;
               { Vertical justification }
               BottomText = 0;
               CenterText = 1;
               TopText    = 2;

          SetTextStyle nastav¡ aktu ln¡ font, styl a velikost p¡sma
               SetTextStyle(Font: word;
                               Direction: word;
                               CharSize: CharSizeType)
          Typ   CharSizeType   je   p©eddefinov n   (viz   procedura
          GetTextSettings)

          SetUseCharSize umo‘¤uje zmˆnit velikost a  pomˆr  ¨¡©ky  a
          v˜¨ky pro nˆkter‚ typy p¡sma.
               SetUserCharSize(MultX,DivX,MultY,DivY:word);

          SetViewPort nastav¡ nov˜ aktu ln¡ viewport
               SetViewPort(X1,Y1,X2,Y2: word; Clip: boolean)
          Parametry  X1,Y1  ud vaj¡  sou©adnice  lev‚ho horn¡ho rohu
          viewportu, X2 a Y2 ud vaj¡ sou©adnice prav‚ho doln¡ho rohu
          viewportu a Clip ud v ,  zda bude  nebo  nebude  prov dˆno
          "zast©ih v n¡"   obrazu  do  aktu ln¡ho  viewportu.   Jsou
          definov ny konstanty pro nastaven¡ parametru Clip:

                                                                  90






                         T u r b o  P a s c a l  v.5

             const
               ClipOn  = True;
               ClipOff = False;

          SetVisualPage ur‡¡,  kter  str nka bude aktu ln¡ (pokud to
          driver umo‘¤uje)
               SetVisualPage(Page: word)

          SetWriteMode nastav¡ zp–sob kresby pro kreslen¡ p©¡mek.
               SetWriteMode(WriteMode:integer);
          Parametr WriteMode je pops n u popisu procedury PutImage -
          BitBlt .

          TextHeight vrac¡ v˜¨ku specifikovan‚ho textu v pixelech
               TextHeight(TextString: string) :  word
          Tato hodnota je z visl  na aktu ln¡m stylu p¡sma.

          TextWidth  vrac¡ ¨¡©ku specifikovan‚ho textu v pixelech
               TextWidht(textString: string) :  word
          Tato hodnota je z visl  na aktu ln¡m stylu p¡sma.

          3.6.  Standardn¡ programov  jednotka Overlay.

          3.6.1.  K¢dy ukon‡en¡ p©ekryvn˜ch operac¡.

          V¨echny  procedury  vrac¡  v˜sledkov˜ k¢d v p©eddefinovan‚
          promˆnn‚ OvrResult.
          var OvrResult : integer;
          Ta m–‘e nab˜vat tˆchto (rovnˆ‘ p©eddefinovan˜ch) hodnot :
          const  {Result codes}
            ovrOk          = 0;
            ovrError       = -1;
            ovrNotFound    = -2;
            ovrNoMemory    = -3;
            ovrIOError     = -4;
            ovrNoEMSDriver = -5;
            ovrNoEMSMemory = -6;

          3.6.2.  Procedury a funkce umo‘¤uj¡c¡ p©ekr˜v n¡.

          OvrInit    inicializuje syst‚m umo‘¤uj¡c¡ ©¡zen¡  p©ekryv–
          a otev©e soubor,  kter˜ se bude pou‘¡vat p©i bˆhu programu
          pro ukl d n¡ pr vˆ nereferovan‚ programov‚ jednotky.
               OvrInit(FileName:string);

          OvrInitEMS tot‚‘ jako OvrInit,  jen jako buffer se pou‘¡v 
          EMS-pamˆ‹. Jm‚no souboru se tedy neud v .

          OvrSetBuf  nastav¡ velikost bufferu pro p©ekryvy
               OvrSetBuf(Size:longint);

                                                                  91






                         T u r b o  P a s c a l  v.5


          OvrGetBuf  vrac¡ velikost bufferu.
               OvrGetBuf:longint;

          OvrClearBuf provede v˜maz bufferu.














































                                                                  92






                         T u r b o  P a s c a l  v.5

          4. Srovn n¡ Turbo Pascal 4.0 se standardn¡m Pascalem

          4.1. Omezen¡ proti standardu

               -   pouze   prvn¡ch   63   znak–   identifik tor–  je
          v˜znamn˜ch.
               - ve standardn¡m  Pascalu  je  znak  @  alternativn¡m
          znakem  pro ^.  V Turbo Pascalu m  znak @ v˜znam oper toru
          a nen¡ shodn˜ s ^.
          -  ve  standardn¡m  Pascalu  jsou  rovnocenn‚  koment ©ov‚
          z vorky { a } s (* a *). V Turbo Pascalu mus¡ b˜t koment ©
          ukon‡en  stejn˜m  druhem  z vorky.  To umo‘¤uje uzav©¡t do
          koment ©e   cel‚   £seky   programu    v‡etnˆ    koment ©–
          pou‘¡vaj¡c¡ch jin˜ druh koment ©ov˜ch z vorek.
          -  v deklaraci promˆnn‚ typu z znam s variantn¡ ‡ st¡ mus¡
          b˜t  ve  standardn¡m  Pascalu  vy‡erp ny  v¨echny  hodnoty
          rozli¨ovac¡  promˆnn‚.  V  Turbo  Pascalu  v¨echny hodnoty
          uvedeny b˜t nemus¡.
          - ve standardu nen¡ p©ipu¨tˆn soubor obsahuj¡c¡ komponentu
          opˆt s typem file. Zde nen¡ toto omezen¡.
          - v Turbo Pascalu nen¡ definov na  promˆnn   ^file,  kter 
          zp©¡stup¤uje buffer promˆnn‚ typu soubor.
          -  tˆlo  funkce  nemus¡  obsahovat  p©i©azovac¡  p©¡kaz  k
          identifik toru funkce.
          - promˆnn ,  kter  je selektorem promˆnn‚  ‡ sti  z znamu,
          m–‘e b˜t parametrem volan˜m hodnotou.
          - nejsou povoleny form ln¡ parametry funkce a procedury.
          - p©ed pou‘it¡m standardn¡ch procedur Reset a Rewrite mus¡
          b˜t  v  Turbo Pascalu jm‚nu souboru p©i©azeno re ln‚ jm‚no
          pomoc¡ funkce Assign.
          - V Turbo Pascalu nejsou definov ny funkce    Get  a  Put.
          Jsou plnˆ nahrazeny procedurami Read a Write.
          -  pro  standardn¡  proceduru  New  nejsou  povoleny dal¨¡
          parametry,  kter‚ ve standardn¡m Pascalu  ur‡uj¡  variantu
          dynamick‚   ‡ sti   z znamu.Tot‚‘  samoz©ejmˆ  plat¡  i  o
          procedu©e Dispose.
          -  procedury  Pack  a  Unpack  nejsou  v   Turbo   Pascalu
          definov ny.
          -  v  Turbo Pascalu je v˜raz  i mod j  vypo‡ten jako  i-(i
          div j) * j   a nen¡ chyba, je-li j z porn‚.
          - v Turbo Pascalu nelze sk kat p©¡kazem  Goto  na  n vˆ¨t¡
          mimo blok ( nelze vysko‡it z podprogramu ).
          -  nen¡-li  hodnota  selektoru  v p©¡kazu Case rovna ‘ dn‚
          definovan‚ kostantˆ,  nenastane chyba  a  p©¡kaz  case  je
          ch p n  jako  pr zdn˜  (  nen¡-li  uvedeno  else ) nebo je
          vykon na ‡ st za else.
          - znak Eoln je p©i ‡ten¡ nahrazen ve  standardn¡m  Pascalu
          mezerou.  V  Turbo  Pascalu  je to znak CR ( hexadecim lnˆ
          X'13' ).
          - ‡ten¡ promˆnn‚ Integer nebo Real  kon‡¡  ve  standardn¡m

                                                                  93






                         T u r b o  P a s c a l  v.5

          Pascalu  p©i ‡ten¡ znaku,  kter˜ nepat©¡ do syntaxe ‡¡sla.
          Turbo   Pascal   kon‡¡   p©i    nalezen¡    mezery    nebo
          ©¡d¡c¡ho znaku v‡etnˆ eof.

          4.2. Roz¨¡©en¡ proti standardu

               - je roz¨¡©en slovn¡k rezervovan˜ch slov.
          - identifik tory mohou obsahovat znak _ .
          -celo‡¡seln‚  konstanty mohou b˜t ps ny jako hexadecim ln¡
          s prefixem $.
          - n vˆ¨t¡ mohou b˜t i identifik tory.
          - konstanty typu ©etˆzec znak– m–‘e obsahovat i  ©¡d¡c¡  a
          ostatn¡  neti¨titeln‚  znaky  a  jsou kompatibiln¡ s typem
          string.
          - deklarace konstant, n vˆ¨t¡, promˆnn˜ch, typ–,  procedur
          a funkc¡ nem  ur‡eno po©ad¡ a m–‘e b˜t i opakov na.
          -  jsou  implementov ny  dal¨¡ standardn¡ celo‡¡seln‚ typy
          ShortInt,  LongInt,  Byte,  Word  a  re ln‚  typy  single,
          double, extended, a comp.
          - je implementov n typ string.
          -  promˆnn‚  mohou  b˜t  deklarov ny  na  absolutn¡ adrese
          pomoc¡ klauzule absolute.
          - promˆnn  m–‘e  b˜t  zkonvertov na  na  jin˜  typ  pomoc¡
          konverze typ–.
          - jsou zavedeny konstanty s udan˜m typem.
          - jsou definov ny logick‚ oper tory xor, shl a shr.
          -  oper tory  not,  or,  and  a xor mohou b˜t pou‘ity i na
          celo‡¡seln‚ promˆnn‚ ( bitov‚ operace ).
          - oper tor + je pou‘it i na spojov n¡ ©etˆzc–.
          -  je  definov n  oper tor  @,   kter˜  zp©¡stupn¡  adresu
          promˆnn‚, funkce nebo procedury.
          - p©¡kaz case  umo‘¤uje i ‡ st else.
          -  procedury  a funkce mohou b˜t deklarov ny s direktivami
          external, inline a interrupt.
          - form ln¡ parametr volan˜ odkazem nemus¡ m¡t ud n typ.
          - jsou zavedeny programov‚ jednotky  dovoluj¡c¡  modul rn¡
          programov n¡ a separ tn¡ kompilaci.
          - je definov na ©ada dal¨¡ch funkc¡ a procedur, umo‘¤uj¡c¡
          pohodlnou pr ci program tora.












                                                                  94

